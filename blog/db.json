{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","path":"medias/reward/alipay.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"a7782d417fb5c1bcfb9cfb65aa9bc8c31e4cddc2","modified":1651504271170},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1651389158541},{"_id":"source/about/index.md","hash":"8fda9957260fbff661c2b106d664e25fa2087687","modified":1651504064612},{"_id":"source/categories/index.md","hash":"4ed6c95040b433dac7dddc6e0c83a6f6743c77fa","modified":1651504003887},{"_id":"source/contact/index.md","hash":"b95431c5b3ef5be7ea558021d29f87620f08e82f","modified":1651504091709},{"_id":"source/friends/index.md","hash":"e0f61963e6de2c2246701ad7e1c1ad903f1190aa","modified":1651504265093},{"_id":"source/tags/index.md","hash":"8aa6920172756c86def31d5641618065eba7067b","modified":1651504031038},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"2e426784b8ee4ee022425140ae6ef39c1bcdb679","modified":1651554870609},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"c3142092e1988c1371ae5b8f5513dca4eb59e47b","modified":1651549273699},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"public/search.xml","hash":"80c1d7f6fac7831d14be52f2fc7642235039cc44","modified":1659679029634},{"_id":"public/404/index.html","hash":"140f397bbe0dcd409491e01b55e03b2772eb343a","modified":1658382971032},{"_id":"public/about/index.html","hash":"def0ce8305c7d865fcb3b47e416c79e3dfb0c158","modified":1659679029634},{"_id":"public/categories/index.html","hash":"647676e40f1de12751ccf16b2d49cf4cca057bd2","modified":1659679029634},{"_id":"public/contact/index.html","hash":"9b08fa385bd98f23a67c73c8f18e165eab710922","modified":1658382971032},{"_id":"public/friends/index.html","hash":"810e0c9c33cd5e5e5fe22603bc0e3bdc329bc3ca","modified":1658382971032},{"_id":"public/tags/index.html","hash":"8ece352ba01593790ec86043462b8ccd25428e49","modified":1659679029634},{"_id":"public/2022/05/02/hello-world/index.html","hash":"fd4d0a79a992b93a80b99a8ad6e8d3cdc64dc1d4","modified":1658382971032},{"_id":"public/archives/index.html","hash":"b85f9a6b204fde972bf3d6e0d83240ce70389013","modified":1659679029634},{"_id":"public/archives/2022/index.html","hash":"ad00bb9c58e48a974b730fde8e584f72ca90895c","modified":1659679029634},{"_id":"public/archives/2022/05/index.html","hash":"8a61d2dad9047237a32faa4159ac40679062c847","modified":1659679029634},{"_id":"public/index.html","hash":"5ce3de989ac04077c061748fc4c28d8d45cc57d0","modified":1659679029634},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1651504751358},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1651504751358},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1651504751358},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1651504751358},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1651504751358},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1651504751358},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1651504751358},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1651504751358},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1651504751358},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1651504751358},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1651504751358},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1651504751358},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1651504751358},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1651504751358},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1651504751358},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1651504751358},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1651504751358},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1651504751358},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1651504751358},{"_id":"public/medias/reward/wechat.png","hash":"c3142092e1988c1371ae5b8f5513dca4eb59e47b","modified":1651551843804},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1651504751358},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1651504751358},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1651504751358},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1651504751358},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1651504751358},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1651504751358},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1651504751358},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1651504751358},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1651504751358},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1651504751358},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1651504751358},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1651504751358},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1651504751358},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1651504751358},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1651504751358},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1651504751358},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1651504751358},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1651504751358},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1651504751358},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1651504751358},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1651504751358},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1651504751358},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1651504751358},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1651504751358},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1651504751358},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1651504751358},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1651504751358},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1651504751358},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1651504751358},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1651504751358},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1651504751358},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1651504751358},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1651504751358},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1651504751358},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1651504751358},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1651504751358},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1651504751358},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1651504751358},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1651504751358},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1651504751358},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1651504751358},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1651504751358},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1651504751358},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1651504751358},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1651504751358},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1651504751358},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1651504751358},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1651504751358},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1651504751358},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1651504751358},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1651504751358},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1651504751358},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1651504751358},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1651504751358},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1651504751358},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1651504751358},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1651504751358},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1651504751358},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1651504751358},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1651504751358},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1651504751358},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1651504751358},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1651504751358},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1651504751358},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1651504751358},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1651504751358},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1651504751358},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1651504751358},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1651504751358},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1651504751358},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1651504751358},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1651504751358},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1651504751358},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1651504751358},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1651504751358},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1651504751358},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1651504751358},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1651504751358},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1651504751358},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1651504751358},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1651504751358},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1651504751358},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1651504751358},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1651504751358},{"_id":"public/atom.xml","hash":"b2371df7c6d491be4ee1f93c9620b72b0ae26e55","modified":1659679029634},{"_id":"source/_posts/test.md","hash":"f52323b3dfdb517a4337bda34c945b427bb9f9d7","modified":1651551197496},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","hash":"e294d9d3f5aff0aefd2b3ce8a65b41af85838e11","modified":1651549233886},{"_id":"public/2022/05/03/test/index.html","hash":"a42a1971efb664a4f7431a4c3d37b46e80e792df","modified":1651559206031},{"_id":"public/categories/默认/index.html","hash":"9ae160a4eb5bfaa59e0d6db66dacfc27d634e827","modified":1659679029634},{"_id":"public/tags/其他/index.html","hash":"c9ff96c4c4c490bf698c58009bc91afddd1700b7","modified":1659679029634},{"_id":"public/medias/reward/alipay.png","hash":"e294d9d3f5aff0aefd2b3ce8a65b41af85838e11","modified":1651551843804},{"_id":"source/_posts/lc-15.md","hash":"7cea2f6a3e7f51f8aba9ba512f7064d0a0d63284","modified":1655285660966},{"_id":"public/2022/06/15/lc-15/index.html","hash":"30712c6aae6c96102f5b3702db4979665a69f584","modified":1658382971032},{"_id":"public/categories/leetcode/index.html","hash":"a4c047ab5be3dc9b95303541030748758a4a68d1","modified":1659679029634},{"_id":"public/tags/leetcode/index.html","hash":"63a942f5ec2e29a5810a7af589bdb57bd5165726","modified":1659679029634},{"_id":"public/archives/2022/06/index.html","hash":"f53c6e46af77935c96d6c94a07151a806089a817","modified":1659679029634},{"_id":"source/_posts/lc-17.md","hash":"ccd744df7bab55ebd62706cbb5853a5cbc4afd2c","modified":1655394184160},{"_id":"public/2022/06/16/lc-17/index.html","hash":"639277f5320fe870b9641cd375e4e7378e862528","modified":1658382971032},{"_id":"source/_posts/lc-19.md","hash":"95bd931cca4c02e765aa8366d9242f38cff00891","modified":1655522312041},{"_id":"public/2022/06/17/lc-19/index.html","hash":"cdd50222135e94cc6d20da068220cebc3910206e","modified":1658382971032},{"_id":"source/_posts/lc-20.md","hash":"8ef1f10a6ea6d8d2178044717bc9842d61e04bfb","modified":1655531470782},{"_id":"public/2022/06/18/lc-20/index.html","hash":"4962faf10be5aa5aa4290262a3894c0519c94bbb","modified":1658382971032},{"_id":"source/_posts/lc-21.md","hash":"97d345ab43a2a1f388fb06410a7e138243617429","modified":1655705789296},{"_id":"public/2022/06/20/lc-21/index.html","hash":"10f10bb7077521b099dc706eb8dc9fe7d957aef7","modified":1658382971032},{"_id":"source/_posts/lc-22.md","hash":"c103133937db81802f6842b6f171dea8dadb5b4b","modified":1655801365111},{"_id":"public/2022/06/21/lc-22/index.html","hash":"04a232e87176b3e6fc0d78e11d8ab3bf7ed90516","modified":1658382971032},{"_id":"source/_posts/lc-23.md","hash":"03cee8fd4216099b6b690aeb5688d117425c83a0","modified":1655898778037},{"_id":"public/2022/06/22/lc-23/index.html","hash":"8564f23c53a28201dcaf18b62c16050b47c78213","modified":1658382971032},{"_id":"source/_posts/lc-26.md","hash":"feb2e422dfd74213d052f8d9ad8f30242845a616","modified":1656080455105},{"_id":"public/2022/06/24/lc-26/index.html","hash":"501c910c237c2e60456923c265d69af692e488ce","modified":1658382971032},{"_id":"source/_posts/lc-28.md","hash":"dbb6e27acac662513b5868adfe00ef42e09fe16f","modified":1656388270731},{"_id":"public/2022/06/27/lc-28/index.html","hash":"5f67ae9ea052bc22ac729e7a277f0094d6cc2d3d","modified":1658382971032},{"_id":"source/_posts/lc-29.md","hash":"481908a03354d1ae6209b76d3f7e1bf53ae29881","modified":1656428842906},{"_id":"public/2022/06/28/lc-29/index.html","hash":"71174de4cd9e49bf07119a07418fe7dc9e39fd1a","modified":1658382971032},{"_id":"public/page/2/index.html","hash":"060e7f632a8d3aabddb2b45df1573ef101b62084","modified":1659679029634},{"_id":"source/_posts/lc-33.md","hash":"f51dfe2955a71c533c07c934b90df38b7259022a","modified":1656568794891},{"_id":"public/2022/06/29/lc-33/index.html","hash":"cc69474f77f89e105e957d16445c4c73fbdfa80d","modified":1658382971032},{"_id":"source/_posts/lc-34.md","hash":"7631b6f0c1d837873082e4b024ac39b3def3f98b","modified":1656662481949},{"_id":"public/2022/07/01/lc-34/index.html","hash":"96c5033ea144d755a361906ddf4d0c51d231a12c","modified":1658382971032},{"_id":"public/archives/page/2/index.html","hash":"6691d8a2835e8e8e80cf9902548237d0cf6cd244","modified":1659679029634},{"_id":"public/archives/2022/07/index.html","hash":"793ec2166869a3840d26012f75ed6bf69ae029ea","modified":1659679029634},{"_id":"public/archives/2022/page/2/index.html","hash":"af6fcfe6a5a7195ecc2cf4adcd89f5ce1c158678","modified":1659679029634},{"_id":"source/_posts/lc-36.md","hash":"8f1f200977ffa292ba542c1a6af0849392091e39","modified":1656916618887},{"_id":"public/2022/07/04/lc-36/index.html","hash":"d1ce9bb23c20b4861d89a68fe20f518fc8212db3","modified":1658382971032},{"_id":"public/tags/leetcode/page/2/index.html","hash":"56074ed522d984f4b8795e01127239c702f8a88a","modified":1659679029634},{"_id":"public/categories/leetcode/page/2/index.html","hash":"37078fda8ee8930b8e394db82df6340cc06ebad1","modified":1659679029634},{"_id":"source/_posts/lc-38.md","hash":"194ce943b60609a670a0ce36c012e939c8bf6cfa","modified":1657076104660},{"_id":"public/2022/07/05/lc-38/index.html","hash":"52cbea4a1f48c7d9b92aa7e794b643373db4b9f6","modified":1658382971032},{"_id":"source/_posts/lc-41.md","hash":"1ed2ccd1f1332e386287345f637bad7bf3ca32bb","modified":1657174558137},{"_id":"public/2022/07/06/lc-41/index.html","hash":"779e2f6a75cf154c663e70c9c0cab1d91be386ab","modified":1658382971032},{"_id":"source/_posts/lc-42.md","hash":"3bd9bacaaf5df778c51a6d85179db17c96dc0ef6","modified":1657259443185},{"_id":"public/2022/07/08/lc-42/index.html","hash":"0df88e679706a8ec0ae2c398e235da5fb9e316a2","modified":1658382971032},{"_id":"source/_posts/lc-44.md","hash":"b99c3e979094ccd4312a2b45ee28a45618f1d85b","modified":1657541721583},{"_id":"public/2022/07/11/lc-44/index.html","hash":"a68136f0fd116a7892a586f02402597302f3e8d6","modified":1658382971032},{"_id":"source/_posts/lc-46.md","hash":"398ac5a168c88984271d4de68420fac43eb5852c","modified":1657594277334},{"_id":"public/2022/07/12/lc-46/index.html","hash":"7792b4b4e83b66df5126b55b4c10f5d042a87d72","modified":1658382971032},{"_id":"source/_posts/lc-48.md","hash":"6ffac1183e0b5d8d2f022f007341046055e829fd","modified":1657700271450},{"_id":"public/2022/07/13/lc-48/index.html","hash":"6ea72467bab09a56ed126731531603c3e7921a07","modified":1658382971032},{"_id":"source/_posts/lc-49.md","hash":"e3254d848cfa32c188888dd22b5a9b1683b8e801","modified":1658146326942},{"_id":"public/2022/07/18/lc-49/index.html","hash":"09667ec5c78e3ba3a304889925856e1d7455072d","modified":1658382971032},{"_id":"public/page/3/index.html","hash":"313593b12b2c97b1000c0c3db0735caa0c0691a3","modified":1659679029634},{"_id":"source/_posts/lc-50.md","hash":"d69fd453ea737ae5a862cce16460f457912c0c2a","modified":1658211058726},{"_id":"public/2022/07/19/lc-50/index.html","hash":"6cb657ad1abc6251f0d1de9b8533e319f7fbd2e2","modified":1658382971032},{"_id":"source/_posts/lc-53.md","hash":"2660425880a10c692205b38a82781de6ae5dbd30","modified":1658302380722},{"_id":"public/2022/07/20/lc-53/index.html","hash":"02a7f2479e94cdd4eba8a3bd6b5d502f071e6283","modified":1658382971032},{"_id":"source/_posts/lc-54.md","hash":"61e199614490d082762b4ffff93d1f99eff0b39e","modified":1658382946284},{"_id":"public/2022/07/21/lc-54/index.html","hash":"c46d4f40f02d2ad6346d1be26912ce294955588e","modified":1658721141115},{"_id":"source/_posts/lc-55.md","hash":"c5f13e9cd5b75b4ad112670e3719391d2c051470","modified":1658805686571},{"_id":"public/2022/07/22/lc-55/index.html","hash":"9a1dd6390bd830e090f50bd6c75f2cfa5cb74c0c","modified":1658841335323},{"_id":"public/archives/page/3/index.html","hash":"030c1be04f2f6347f0bf2dfda79661744a6cda40","modified":1659679029634},{"_id":"public/archives/2022/page/3/index.html","hash":"3bfd6669e42602647954379cf223ec03080e1ffc","modified":1659679029634},{"_id":"public/archives/2022/07/page/2/index.html","hash":"a53de0e37b71cb2cd806865c99303bd5ac037fca","modified":1659679029634},{"_id":"source/_posts/lc-56.md","hash":"ce706efe1099cedea7989a372b55335daa057ffd","modified":1658841326565},{"_id":"public/2022/07/26/lc-56/index.html","hash":"22b6dccd97488f4925c1ed306cd13779f848fc7f","modified":1658913327048},{"_id":"source/_posts/lc-62.md","hash":"f5dda8a6b249328e020eb7289ce771a0ce970803","modified":1658913314145},{"_id":"public/2022/07/27/lc-62/index.html","hash":"9504881adfe61d1e91d5fb6a81c78f18667db8ad","modified":1658994826497},{"_id":"public/categories/leetcode/page/3/index.html","hash":"e9a91c30a423959c3cdd2759a392483d80702669","modified":1659679029634},{"_id":"public/tags/leetcode/page/3/index.html","hash":"a67c69be04398d35f7ca3b1abd1f40818b43a41f","modified":1659679029634},{"_id":"source/_posts/lc-66.md","hash":"f5d5a364f5e3af22ce0f5a5703e840fc01bcd35e","modified":1658994817545},{"_id":"public/2022/07/28/lc-66/index.html","hash":"6c1bf0efb309c6b9838660d2246ac4f62cfd7315","modified":1659073676073},{"_id":"source/_posts/lc-69.md","hash":"eb9fd41809fcd28d17bf79b5d1ff71d0994ce10b","modified":1659073666661},{"_id":"public/2022/07/29/lc-69/index.html","hash":"acfa7eba3b21321bda75ee68508a1ab32bbbabbc","modified":1659340413551},{"_id":"source/_posts/lc-70.md","hash":"9fcd2ee7c2602515bc12637fa4455a0e171fef81","modified":1659340406312},{"_id":"public/2022/08/01/lc-70/index.html","hash":"2f74cd1d164933ea34895ab42e9066e939529e55","modified":1659433548569},{"_id":"public/archives/2022/08/index.html","hash":"c57f6badac52628a5219b6a5c7f56e81cfd11a94","modified":1659679029634},{"_id":"source/_posts/lc-73.md","hash":"fc4aef2fc3d3c1599d3965dc95a71edf052a2063","modified":1659433534647},{"_id":"public/2022/08/02/lc-73/index.html","hash":"8421559d86b61b41f92b12d0bb4c4a154ec42e9e","modified":1659518229786},{"_id":"public/page/4/index.html","hash":"8005eb437ead229bda3bfa9eac13b009e7bf5a44","modified":1659679029634},{"_id":"source/_posts/lc-75.md","hash":"6b21124589880413746b08cb0958d3e50d77bd4c","modified":1659518222711},{"_id":"public/2022/08/03/lc-75/index.html","hash":"66914579e6085d2df2083b4390831df8912d9218","modified":1659628437276},{"_id":"source/_posts/lc-76.md","hash":"779cbcd9f0483814ba494a71b201750f627a7662","modified":1659628428937},{"_id":"public/2022/08/04/lc-76/index.html","hash":"21f46775423499ffff7637d88c7a1dc04a78fd77","modified":1659679029634},{"_id":"source/_posts/lc-78.md","hash":"6abdf2f1a3be2a2ed2df2b055292aa52f59b06dd","modified":1659679021583},{"_id":"public/2022/08/05/lc-78/index.html","hash":"92a42be36f7732ec7503d370a66014d373f609da","modified":1659679029634}],"Category":[{"name":"默认","_id":"cl2pnbrgc0001q4ujau72bp4d"},{"name":"leetcode","_id":"cl4f9809k00017kuu6pxe6w91"}],"Data":[],"Page":[{"title":"404","date":"2022-05-02T15:10:57.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-05-02 23:10:57\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2022-05-02T15:11:11.170Z","path":"404/index.html","comments":1,"_id":"cl2ovae2c0000youjcje4ayk1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-05-02T15:07:08.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-05-02 23:07:08\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-05-02T15:07:44.612Z","path":"about/index.html","comments":1,"_id":"cl2ovae2m0002youj9er170kq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-05-02T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-02 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2022-05-02T15:06:43.887Z","path":"categories/index.html","comments":1,"_id":"cl2ovae2n0003youjgdyp2mej","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2022-05-02T15:07:32.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-05-02 23:07:32\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2022-05-02T15:08:11.709Z","path":"contact/index.html","comments":1,"_id":"cl2ovae2o0004youj2id2459o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2022-05-02T15:08:05.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-05-02 23:08:05\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-05-02T15:11:05.093Z","path":"friends/index.html","comments":1,"_id":"cl2ovae2p0005youj9fl94ah3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-05-02T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-02 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2022-05-02T15:07:11.038Z","path":"tags/index.html","comments":1,"_id":"cl2ovae2q0006youj3ojyhk7d","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-05-02T02:02:23.362Z","updated":"2022-05-01T07:12:38.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2ovae2g0001youjhy7n5yxz","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"lc-15","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-15T02:57:47.000Z","_content":"\n```java\n//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k\n//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. \n//\n// Notice that the solution set must not contain duplicate triplets. \n//\n// \n// Example 1: \n// Input: nums = [-1,0,1,2,-1,-4]\n//Output: [[-1,-1,2],[-1,0,1]]\n// Example 2: \n// Input: nums = []\n//Output: []\n// Example 3: \n// Input: nums = [0]\n//Output: []\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 3000 \n// -105 <= nums[i] <= 105 \n// \n// Related Topics Array Two Pointers Sorting \n// 👍 18445 👎 1774\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n\n        if (nums == null || nums.length <= 2) {\n            return result;\n        }\n\n        Arrays.sort(nums);\n\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            for (int j = i + 1; j < nums.length - 1; j++) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                int start = j + 1;\n                int end = nums.length - 1;\n                int target = -(nums[i] + nums[j]);\n\n                if (target < 0) {\n                    break;\n                }\n                while (start <= end) {\n                    if (start + 1 >= end) {\n                        if (nums[start] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[start]);\n                            result.add(oneR);\n                        } else if (nums[end] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[end]);\n                            result.add(oneR);\n                        }\n                        break;\n                    }\n\n                    int mid = start + (end - start) / 2;\n                    if (nums[mid] == target) {\n                        List<Integer> oneR = new ArrayList<>();\n                        oneR.add(nums[i]);\n                        oneR.add(nums[j]);\n                        oneR.add(nums[mid]);\n                        result.add(oneR);\n                        break;\n                    } else if (nums[mid] < target) {\n                        start = mid;\n                    } else {\n                        end = mid;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","source":"_posts/lc-15.md","raw":"---\ntitle: lc-15\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-15 10:57:47\n---\n\n```java\n//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k\n//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. \n//\n// Notice that the solution set must not contain duplicate triplets. \n//\n// \n// Example 1: \n// Input: nums = [-1,0,1,2,-1,-4]\n//Output: [[-1,-1,2],[-1,0,1]]\n// Example 2: \n// Input: nums = []\n//Output: []\n// Example 3: \n// Input: nums = [0]\n//Output: []\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 3000 \n// -105 <= nums[i] <= 105 \n// \n// Related Topics Array Two Pointers Sorting \n// 👍 18445 👎 1774\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n\n        if (nums == null || nums.length <= 2) {\n            return result;\n        }\n\n        Arrays.sort(nums);\n\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            for (int j = i + 1; j < nums.length - 1; j++) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                int start = j + 1;\n                int end = nums.length - 1;\n                int target = -(nums[i] + nums[j]);\n\n                if (target < 0) {\n                    break;\n                }\n                while (start <= end) {\n                    if (start + 1 >= end) {\n                        if (nums[start] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[start]);\n                            result.add(oneR);\n                        } else if (nums[end] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[end]);\n                            result.add(oneR);\n                        }\n                        break;\n                    }\n\n                    int mid = start + (end - start) / 2;\n                    if (nums[mid] == target) {\n                        List<Integer> oneR = new ArrayList<>();\n                        oneR.add(nums[i]);\n                        oneR.add(nums[j]);\n                        oneR.add(nums[mid]);\n                        result.add(oneR);\n                        break;\n                    } else if (nums[mid] < target) {\n                        start = mid;\n                    } else {\n                        end = mid;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","slug":"lc-15","published":1,"updated":"2022-06-15T09:34:20.966Z","_id":"cl4f9809200007kuudym5699s","comments":1,"layout":"post","photos":[],"link":"","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k</span>\n<span class=\"token comment\">//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Notice that the solution set must not contain duplicate triplets. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [-1,0,1,2,-1,-4]</span>\n<span class=\"token comment\">//Output: [[-1,-1,2],[-1,0,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [0]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 3000 </span>\n<span class=\"token comment\">// -105 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 18445 👎 1774</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k</span>\n<span class=\"token comment\">//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Notice that the solution set must not contain duplicate triplets. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [-1,0,1,2,-1,-4]</span>\n<span class=\"token comment\">//Output: [[-1,-1,2],[-1,0,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [0]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 3000 </span>\n<span class=\"token comment\">// -105 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 18445 👎 1774</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"lc-17","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-16T02:57:16.000Z","_content":"\n```java\n//Given a string containing digits from 2-9 inclusive, return all possible lette\n//r combinations that the number could represent. Return the answer in any order. \n//\n//\n// A mapping of digits to letters (just like on the telephone buttons) is given \n//below. Note that 1 does not map to any letters. \n//\n// \n// Example 1: \n//\n// \n//Input: digits = \"23\"\n//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n// \n//\n// Example 2: \n//\n// \n//Input: digits = \"\"\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: digits = \"2\"\n//Output: [\"a\",\"b\",\"c\"]\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= digits.length <= 4 \n// digits[i] is a digit in the range ['2', '9']. \n// \n// Related Topics Hash Table String Backtracking \n// 👍 10965 👎 707\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        Map<Character, String> myMap = new HashMap<>();\n        myMap.put('2', \"abc\");\n        myMap.put('3', \"def\");\n        myMap.put('4', \"ghi\");\n        myMap.put('5', \"jkl\");\n        myMap.put('6', \"mno\");\n        myMap.put('7', \"pqrs\");\n        myMap.put('8', \"tuv\");\n        myMap.put('9', \"wxyz\");\n\n        List<String> result = null;\n\n        if (digits == null || digits.length() == 0) {\n            return new ArrayList<>();\n        }\n\n        for (int i = 0; i < digits.length(); i++) {\n            result = getNext(result, myMap, digits, i);\n        }\n\n        return result;\n    }\n\n    private List<String> getNext(List<String> curList,  Map<Character, String> myMap, String digits, int index) {\n        if (index >= digits.length()) {\n            return curList;\n        }\n\n        char ch = digits.charAt(index);\n        String charsStr = myMap.get(ch);\n        List<String> result = new ArrayList<>();\n\n        for (char repCh : charsStr.toCharArray()) {\n            if (curList == null) {\n                result.add(\"\" + repCh);\n            } else {\n                for (String curStr : curList) {\n                    result.add(curStr + repCh);\n                }\n            }\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","source":"_posts/lc-17.md","raw":"---\ntitle: lc-17\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-16 10:57:16\n---\n\n```java\n//Given a string containing digits from 2-9 inclusive, return all possible lette\n//r combinations that the number could represent. Return the answer in any order. \n//\n//\n// A mapping of digits to letters (just like on the telephone buttons) is given \n//below. Note that 1 does not map to any letters. \n//\n// \n// Example 1: \n//\n// \n//Input: digits = \"23\"\n//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n// \n//\n// Example 2: \n//\n// \n//Input: digits = \"\"\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: digits = \"2\"\n//Output: [\"a\",\"b\",\"c\"]\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= digits.length <= 4 \n// digits[i] is a digit in the range ['2', '9']. \n// \n// Related Topics Hash Table String Backtracking \n// 👍 10965 👎 707\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        Map<Character, String> myMap = new HashMap<>();\n        myMap.put('2', \"abc\");\n        myMap.put('3', \"def\");\n        myMap.put('4', \"ghi\");\n        myMap.put('5', \"jkl\");\n        myMap.put('6', \"mno\");\n        myMap.put('7', \"pqrs\");\n        myMap.put('8', \"tuv\");\n        myMap.put('9', \"wxyz\");\n\n        List<String> result = null;\n\n        if (digits == null || digits.length() == 0) {\n            return new ArrayList<>();\n        }\n\n        for (int i = 0; i < digits.length(); i++) {\n            result = getNext(result, myMap, digits, i);\n        }\n\n        return result;\n    }\n\n    private List<String> getNext(List<String> curList,  Map<Character, String> myMap, String digits, int index) {\n        if (index >= digits.length()) {\n            return curList;\n        }\n\n        char ch = digits.charAt(index);\n        String charsStr = myMap.get(ch);\n        List<String> result = new ArrayList<>();\n\n        for (char repCh : charsStr.toCharArray()) {\n            if (curList == null) {\n                result.add(\"\" + repCh);\n            } else {\n                for (String curStr : curList) {\n                    result.add(curStr + repCh);\n                }\n            }\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","slug":"lc-17","published":1,"updated":"2022-06-16T15:43:04.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h70ez30000e8uuc8mieewq","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string containing digits from 2-9 inclusive, return all possible lette</span>\n<span class=\"token comment\">//r combinations that the number could represent. Return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A mapping of digits to letters (just like on the telephone buttons) is given </span>\n<span class=\"token comment\">//below. Note that 1 does not map to any letters. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"23\"</span>\n<span class=\"token comment\">//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"\"</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"2\"</span>\n<span class=\"token comment\">//Output: [\"a\",\"b\",\"c\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= digits.length &lt;= 4 </span>\n<span class=\"token comment\">// digits[i] is a digit in the range ['2', '9']. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Hash Table String Backtracking </span>\n<span class=\"token comment\">// 👍 10965 👎 707</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> myMap<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> curList<span class=\"token punctuation\">,</span>  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> myMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> curList<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> charsStr <span class=\"token operator\">=</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> repCh <span class=\"token operator\">:</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curList <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> curStr <span class=\"token operator\">:</span> curList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curStr <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string containing digits from 2-9 inclusive, return all possible lette</span>\n<span class=\"token comment\">//r combinations that the number could represent. Return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A mapping of digits to letters (just like on the telephone buttons) is given </span>\n<span class=\"token comment\">//below. Note that 1 does not map to any letters. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"23\"</span>\n<span class=\"token comment\">//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"\"</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"2\"</span>\n<span class=\"token comment\">//Output: [\"a\",\"b\",\"c\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= digits.length &lt;= 4 </span>\n<span class=\"token comment\">// digits[i] is a digit in the range ['2', '9']. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Hash Table String Backtracking </span>\n<span class=\"token comment\">// 👍 10965 👎 707</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> myMap<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> curList<span class=\"token punctuation\">,</span>  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> curList<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> charsStr <span class=\"token operator\">=</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> repCh <span class=\"token operator\">:</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curList <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> curStr <span class=\"token operator\">:</span> curList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curStr <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"lc-19","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-17T02:39:59.000Z","_content":"\n```java\n//Given the head of a linked list, remove the nth node from the end of the list \n//and return its head. \n//\n// \n// Example 1: \n//\n// \n//Input: head = [1,2,3,4,5], n = 2\n//Output: [1,2,3,5]\n// \n//\n// Example 2: \n//\n// \n//Input: head = [1], n = 1\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: head = [1,2], n = 1\n//Output: [1]\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the list is sz. \n// 1 <= sz <= 30 \n// 0 <= Node.val <= 100 \n// 1 <= n <= sz \n// \n//\n// \n// Follow up: Could you do this in one pass? \n// Related Topics Linked List Two Pointers \n// 👍 10475 👎 494\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int listLen = 0;\n        ListNode temp = head;\n        \n        if (head == null || n <= 0) {\n            return head;\n        }\n        \n        while (temp != null) {\n            listLen++;\n            temp = temp.next;\n        }\n        \n        if (listLen < n) {\n            return head;\n        }\n        if (listLen == n) {\n            ListNode result = head.next;\n            head.next = null;\n            return result;\n        }\n        \n        int subLen = listLen - n - 1;\n        temp = head;\n        for (int i = 0; i < subLen; i++) {\n            temp = temp.next;\n        }\n        \n        ListNode removeNode = temp.next;\n        temp.next = removeNode.next;\n        removeNode.next = null;\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-19.md","raw":"---\ntitle: lc-19\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-17 10:39:59\n---\n\n```java\n//Given the head of a linked list, remove the nth node from the end of the list \n//and return its head. \n//\n// \n// Example 1: \n//\n// \n//Input: head = [1,2,3,4,5], n = 2\n//Output: [1,2,3,5]\n// \n//\n// Example 2: \n//\n// \n//Input: head = [1], n = 1\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: head = [1,2], n = 1\n//Output: [1]\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the list is sz. \n// 1 <= sz <= 30 \n// 0 <= Node.val <= 100 \n// 1 <= n <= sz \n// \n//\n// \n// Follow up: Could you do this in one pass? \n// Related Topics Linked List Two Pointers \n// 👍 10475 👎 494\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int listLen = 0;\n        ListNode temp = head;\n        \n        if (head == null || n <= 0) {\n            return head;\n        }\n        \n        while (temp != null) {\n            listLen++;\n            temp = temp.next;\n        }\n        \n        if (listLen < n) {\n            return head;\n        }\n        if (listLen == n) {\n            ListNode result = head.next;\n            head.next = null;\n            return result;\n        }\n        \n        int subLen = listLen - n - 1;\n        temp = head;\n        for (int i = 0; i < subLen; i++) {\n            temp = temp.next;\n        }\n        \n        ListNode removeNode = temp.next;\n        temp.next = removeNode.next;\n        removeNode.next = null;\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-19","published":1,"updated":"2022-06-18T03:18:32.041Z","_id":"cl4ihijdb00005suub1yw32mk","comments":1,"layout":"post","photos":[],"link":"","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the head of a linked list, remove the nth node from the end of the list </span>\n<span class=\"token comment\">//and return its head. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2,3,4,5], n = 2</span>\n<span class=\"token comment\">//Output: [1,2,3,5]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1], n = 1</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2], n = 1</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the list is sz. </span>\n<span class=\"token comment\">// 1 &lt;= sz &lt;= 30 </span>\n<span class=\"token comment\">// 0 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= sz </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you do this in one pass? </span>\n<span class=\"token comment\">// Related Topics Linked List Two Pointers </span>\n<span class=\"token comment\">// 👍 10475 👎 494</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> listLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            listLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> listLen <span class=\"token operator\">-</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> subLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token class-name\">ListNode</span> removeNode <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> removeNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        removeNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the head of a linked list, remove the nth node from the end of the list </span>\n<span class=\"token comment\">//and return its head. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2,3,4,5], n = 2</span>\n<span class=\"token comment\">//Output: [1,2,3,5]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1], n = 1</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2], n = 1</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the list is sz. </span>\n<span class=\"token comment\">// 1 &lt;= sz &lt;= 30 </span>\n<span class=\"token comment\">// 0 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= sz </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you do this in one pass? </span>\n<span class=\"token comment\">// Related Topics Linked List Two Pointers </span>\n<span class=\"token comment\">// 👍 10475 👎 494</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> listLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            listLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> listLen <span class=\"token operator\">-</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> subLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">ListNode</span> removeNode <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> removeNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        removeNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-20","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-18T02:46:14.000Z","_content":"\n```java\n//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']\n//', determine if the input string is valid. \n//\n// An input string is valid if: \n//\n// \n// Open brackets must be closed by the same type of brackets. \n// Open brackets must be closed in the correct order. \n// \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"()\"\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"()[]{}\"\n//Output: true\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"(]\"\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= s.length <= 104 \n// s consists of parentheses only '()[]{}'. \n// \n// Related Topics String Stack \n// 👍 13610 👎 616\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> myStack = new Stack<>();\n        for (char ch : s.toCharArray()) {\n            if (ch == '(' || ch == '[' || ch == '{') {\n                myStack.push(ch);\n            } else {\n                if (myStack.isEmpty()) {\n                    return false;\n                }\n                char top = myStack.peek();\n\n                if ((top == '(' && ch == ')') ||\n                        (top == '[' && ch == ']') ||\n                        (top == '{' && ch == '}')) {\n                    myStack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return myStack.isEmpty();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-20.md","raw":"---\ntitle: lc-20\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-18 10:46:14\n---\n\n```java\n//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']\n//', determine if the input string is valid. \n//\n// An input string is valid if: \n//\n// \n// Open brackets must be closed by the same type of brackets. \n// Open brackets must be closed in the correct order. \n// \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"()\"\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"()[]{}\"\n//Output: true\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"(]\"\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= s.length <= 104 \n// s consists of parentheses only '()[]{}'. \n// \n// Related Topics String Stack \n// 👍 13610 👎 616\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> myStack = new Stack<>();\n        for (char ch : s.toCharArray()) {\n            if (ch == '(' || ch == '[' || ch == '{') {\n                myStack.push(ch);\n            } else {\n                if (myStack.isEmpty()) {\n                    return false;\n                }\n                char top = myStack.peek();\n\n                if ((top == '(' && ch == ')') ||\n                        (top == '[' && ch == ']') ||\n                        (top == '{' && ch == '}')) {\n                    myStack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return myStack.isEmpty();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-20","published":1,"updated":"2022-06-18T05:51:10.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4jgpdk40000bsuu48j5g9w9","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']</span>\n<span class=\"token comment\">//', determine if the input string is valid. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An input string is valid if: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Open brackets must be closed by the same type of brackets. </span>\n<span class=\"token comment\">// Open brackets must be closed in the correct order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()[]{}\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"(]\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= s.length &lt;= 104 </span>\n<span class=\"token comment\">// s consists of parentheses only '()[]{}'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Stack </span>\n<span class=\"token comment\">// 👍 13610 👎 616</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">&gt;</span></span> myStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'{'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                myStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">char</span> top <span class=\"token operator\">=</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'{'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    myStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string s containing just the characters '(', ')', '&#123;', '&#125;', '[' and ']</span>\n<span class=\"token comment\">//', determine if the input string is valid. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An input string is valid if: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Open brackets must be closed by the same type of brackets. </span>\n<span class=\"token comment\">// Open brackets must be closed in the correct order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()[]&#123;&#125;\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"(]\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= s.length &lt;= 104 </span>\n<span class=\"token comment\">// s consists of parentheses only '()[]&#123;&#125;'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Stack </span>\n<span class=\"token comment\">// 👍 13610 👎 616</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> myStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'&#123;'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                myStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">char</span> top <span class=\"token operator\">=</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'&#123;'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    myStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-21","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-20T03:24:09.000Z","_content":"\n```java\n//You are given the heads of two sorted linked lists list1 and list2.\n//\n// Merge the two lists in a one sorted list. The list should be made by splicing\n// together the nodes of the first two lists.\n//\n// Return the head of the merged linked list.\n//\n//\n// Example 1:\n//\n//\n//Input: list1 = [1,2,4], list2 = [1,3,4]\n//Output: [1,1,2,3,4,4]\n//\n//\n// Example 2:\n//\n//\n//Input: list1 = [], list2 = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: list1 = [], list2 = [0]\n//Output: [0]\n//\n//\n//\n// Constraints:\n//\n//\n// The number of nodes in both lists is in the range [0, 50].\n// -100 <= Node.val <= 100\n// Both list1 and list2 are sorted in non-decreasing order.\n//\n// Related Topics Linked List Recursion\n// 👍 12767 👎 1163\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode head, cur, temp1, temp2;\n\n        if (list1 == null) {\n            return list2;\n        }\n        if (list2 == null) {\n            return list1;\n        }\n        temp1 = list1;\n        temp2 = list2;\n\n        if (temp1.val < temp2.val) {\n            head = temp1;\n            cur = temp1;\n            temp1 = temp1.next;\n        } else {\n            head = temp2;\n            cur = temp2;\n            temp2 = temp2.next;\n        }\n\n        while (temp1 != null || temp2 != null) {\n            if (temp1 != null && (temp2 == null || temp1.val < temp2.val)) {\n                cur.next = temp1;\n                cur = temp1;\n                temp1 = temp1.next;\n            } else {\n                cur.next = temp2;\n                cur = temp2;\n                temp2 = temp2.next;\n            }\n        }\n\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-21.md","raw":"---\ntitle: lc-21\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-20 11:24:09\n---\n\n```java\n//You are given the heads of two sorted linked lists list1 and list2.\n//\n// Merge the two lists in a one sorted list. The list should be made by splicing\n// together the nodes of the first two lists.\n//\n// Return the head of the merged linked list.\n//\n//\n// Example 1:\n//\n//\n//Input: list1 = [1,2,4], list2 = [1,3,4]\n//Output: [1,1,2,3,4,4]\n//\n//\n// Example 2:\n//\n//\n//Input: list1 = [], list2 = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: list1 = [], list2 = [0]\n//Output: [0]\n//\n//\n//\n// Constraints:\n//\n//\n// The number of nodes in both lists is in the range [0, 50].\n// -100 <= Node.val <= 100\n// Both list1 and list2 are sorted in non-decreasing order.\n//\n// Related Topics Linked List Recursion\n// 👍 12767 👎 1163\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode head, cur, temp1, temp2;\n\n        if (list1 == null) {\n            return list2;\n        }\n        if (list2 == null) {\n            return list1;\n        }\n        temp1 = list1;\n        temp2 = list2;\n\n        if (temp1.val < temp2.val) {\n            head = temp1;\n            cur = temp1;\n            temp1 = temp1.next;\n        } else {\n            head = temp2;\n            cur = temp2;\n            temp2 = temp2.next;\n        }\n\n        while (temp1 != null || temp2 != null) {\n            if (temp1 != null && (temp2 == null || temp1.val < temp2.val)) {\n                cur.next = temp1;\n                cur = temp1;\n                temp1 = temp1.next;\n            } else {\n                cur.next = temp2;\n                cur = temp2;\n                temp2 = temp2.next;\n            }\n        }\n\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-21","published":1,"updated":"2022-06-20T06:16:29.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4mchf1f0000iguu8izkg494","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given the heads of two sorted linked lists list1 and list2.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge the two lists in a one sorted list. The list should be made by splicing</span>\n<span class=\"token comment\">// together the nodes of the first two lists.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the head of the merged linked list.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [1,2,4], list2 = [1,3,4]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = [0]</span>\n<span class=\"token comment\">//Output: [0]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The number of nodes in both lists is in the range [0, 50].</span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100</span>\n<span class=\"token comment\">// Both list1 and list2 are sorted in non-decreasing order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Recursion</span>\n<span class=\"token comment\">// 👍 12767 👎 1163</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> temp1<span class=\"token punctuation\">,</span> temp2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        temp1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        temp2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given the heads of two sorted linked lists list1 and list2.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge the two lists in a one sorted list. The list should be made by splicing</span>\n<span class=\"token comment\">// together the nodes of the first two lists.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the head of the merged linked list.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [1,2,4], list2 = [1,3,4]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = [0]</span>\n<span class=\"token comment\">//Output: [0]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The number of nodes in both lists is in the range [0, 50].</span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100</span>\n<span class=\"token comment\">// Both list1 and list2 are sorted in non-decreasing order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Recursion</span>\n<span class=\"token comment\">// 👍 12767 👎 1163</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> temp1<span class=\"token punctuation\">,</span> temp2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        temp1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        temp2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-22","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-21T08:30:33.000Z","_content":"\n```java\n//Given n pairs of parentheses, write a function to generate all combinations of\n// well-formed parentheses. \n//\n// \n// Example 1: \n// Input: n = 3\n//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n// Example 2: \n// Input: n = 1\n//Output: [\"()\"]\n// \n// \n// Constraints: \n//\n// \n// 1 <= n <= 8 \n// \n// Related Topics String Dynamic Programming Backtracking \n// 👍 13432 👎 511\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> generateParenthesis(int n) {\n        List<String> result = new ArrayList<>();\n        generateNext(result, n, \"\", n, n);\n        return result;\n    }\n\n    private void generateNext(List<String> result, int n, String current, int left, int right) {\n        if (current.length() == 2 * n) {\n            result.add(current);\n            return;\n        }\n        String currentBack = current;\n        if (left > 0) {\n            current = current + '(';\n            generateNext(result, n, current, left - 1, right);\n            current = currentBack;\n        }\n        if (right > left) {\n            current = current + ')';\n            generateNext(result, n, current, left, right - 1);\n            current = currentBack;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-22.md","raw":"---\ntitle: lc-22\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-21 16:30:33\n---\n\n```java\n//Given n pairs of parentheses, write a function to generate all combinations of\n// well-formed parentheses. \n//\n// \n// Example 1: \n// Input: n = 3\n//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n// Example 2: \n// Input: n = 1\n//Output: [\"()\"]\n// \n// \n// Constraints: \n//\n// \n// 1 <= n <= 8 \n// \n// Related Topics String Dynamic Programming Backtracking \n// 👍 13432 👎 511\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> generateParenthesis(int n) {\n        List<String> result = new ArrayList<>();\n        generateNext(result, n, \"\", n, n);\n        return result;\n    }\n\n    private void generateNext(List<String> result, int n, String current, int left, int right) {\n        if (current.length() == 2 * n) {\n            result.add(current);\n            return;\n        }\n        String currentBack = current;\n        if (left > 0) {\n            current = current + '(';\n            generateNext(result, n, current, left - 1, right);\n            current = currentBack;\n        }\n        if (right > left) {\n            current = current + ')';\n            generateNext(result, n, current, left, right - 1);\n            current = currentBack;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-22","published":1,"updated":"2022-06-21T08:49:25.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4nxdyi80000rouu8c96aay9","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n pairs of parentheses, write a function to generate all combinations of</span>\n<span class=\"token comment\">// well-formed parentheses. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: n = 3</span>\n<span class=\"token comment\">//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: n = 1</span>\n<span class=\"token comment\">//Output: [\"()\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 8 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Backtracking </span>\n<span class=\"token comment\">// 👍 13432 👎 511</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">generateParenthesis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> current<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">String</span> currentBack <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&gt;</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n pairs of parentheses, write a function to generate all combinations of</span>\n<span class=\"token comment\">// well-formed parentheses. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: n = 3</span>\n<span class=\"token comment\">//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: n = 1</span>\n<span class=\"token comment\">//Output: [\"()\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 8 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Backtracking </span>\n<span class=\"token comment\">// 👍 13432 👎 511</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">generateParenthesis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> current<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">String</span> currentBack <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">></span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-23","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-22T08:40:02.000Z","_content":"\n```java\n//You are given an array of k linked-lists lists, each linked-list is sorted in\n//ascending order.\n//\n// Merge all the linked-lists into one sorted linked-list and return it.\n//\n//\n// Example 1:\n//\n//\n//Input: lists = [[1,4,5],[1,3,4],[2,6]]\n//Output: [1,1,2,3,4,4,5,6]\n//Explanation: The linked-lists are:\n//[\n//  1->4->5,\n//  1->3->4,\n//  2->6\n//]\n//merging them into one sorted list:\n//1->1->2->3->4->4->5->6\n//\n//\n// Example 2:\n//\n//\n//Input: lists = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: lists = [[]]\n//Output: []\n//\n//\n//\n// Constraints:\n//\n//\n// k == lists.length\n// 0 <= k <= 104\n// 0 <= lists[i].length <= 500\n// -104 <= lists[i][j] <= 104\n// lists[i] is sorted in ascending order.\n// The sum of lists[i].length will not exceed 104.\n//\n// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor\n//t\n// 👍 12620 👎 487\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) {\n            return null;\n        }\n        ListNode head = null, cur = null;\n        ListNode[] tempNodes = new ListNode[lists.length];\n        for (int i = 0; i < lists.length; i++) {\n            tempNodes[i] = lists[i];\n        }\n\n        while (true) {\n            int minV = Integer.MAX_VALUE;\n            ListNode minN = null;\n            int i = 0;\n            int keyIndex = -1;\n\n            for (ListNode node : tempNodes) {\n                if (node != null) {\n                    if (node.val < minV) {\n                        minN = node;\n                        minV = node.val;\n                        keyIndex = i;\n                    }\n                }\n                i++;\n            }\n            if (minN == null) {\n                break;\n            }\n\n            tempNodes[keyIndex] = tempNodes[keyIndex].next;\n\n            if (head == null) {\n                head = minN;\n            }\n            if (cur != null) {\n                cur.next = minN;\n            }\n            cur = minN;\n        }\n        return head;\n    }\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-23.md","raw":"---\ntitle: lc-23\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-22 16:40:02\n---\n\n```java\n//You are given an array of k linked-lists lists, each linked-list is sorted in\n//ascending order.\n//\n// Merge all the linked-lists into one sorted linked-list and return it.\n//\n//\n// Example 1:\n//\n//\n//Input: lists = [[1,4,5],[1,3,4],[2,6]]\n//Output: [1,1,2,3,4,4,5,6]\n//Explanation: The linked-lists are:\n//[\n//  1->4->5,\n//  1->3->4,\n//  2->6\n//]\n//merging them into one sorted list:\n//1->1->2->3->4->4->5->6\n//\n//\n// Example 2:\n//\n//\n//Input: lists = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: lists = [[]]\n//Output: []\n//\n//\n//\n// Constraints:\n//\n//\n// k == lists.length\n// 0 <= k <= 104\n// 0 <= lists[i].length <= 500\n// -104 <= lists[i][j] <= 104\n// lists[i] is sorted in ascending order.\n// The sum of lists[i].length will not exceed 104.\n//\n// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor\n//t\n// 👍 12620 👎 487\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) {\n            return null;\n        }\n        ListNode head = null, cur = null;\n        ListNode[] tempNodes = new ListNode[lists.length];\n        for (int i = 0; i < lists.length; i++) {\n            tempNodes[i] = lists[i];\n        }\n\n        while (true) {\n            int minV = Integer.MAX_VALUE;\n            ListNode minN = null;\n            int i = 0;\n            int keyIndex = -1;\n\n            for (ListNode node : tempNodes) {\n                if (node != null) {\n                    if (node.val < minV) {\n                        minN = node;\n                        minV = node.val;\n                        keyIndex = i;\n                    }\n                }\n                i++;\n            }\n            if (minN == null) {\n                break;\n            }\n\n            tempNodes[keyIndex] = tempNodes[keyIndex].next;\n\n            if (head == null) {\n                head = minN;\n            }\n            if (cur != null) {\n                cur.next = minN;\n            }\n            cur = minN;\n        }\n        return head;\n    }\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-23","published":1,"updated":"2022-06-22T11:52:58.037Z","_id":"cl4pirc7r000030uu3nz87nzq","comments":1,"layout":"post","photos":[],"link":"","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an array of k linked-lists lists, each linked-list is sorted in</span>\n<span class=\"token comment\">//ascending order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge all the linked-lists into one sorted linked-list and return it.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[1,4,5],[1,3,4],[2,6]]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4,5,6]</span>\n<span class=\"token comment\">//Explanation: The linked-lists are:</span>\n<span class=\"token comment\">//[</span>\n<span class=\"token comment\">//  1-&gt;4-&gt;5,</span>\n<span class=\"token comment\">//  1-&gt;3-&gt;4,</span>\n<span class=\"token comment\">//  2-&gt;6</span>\n<span class=\"token comment\">//]</span>\n<span class=\"token comment\">//merging them into one sorted list:</span>\n<span class=\"token comment\">//1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[]]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k == lists.length</span>\n<span class=\"token comment\">// 0 &lt;= k &lt;= 104</span>\n<span class=\"token comment\">// 0 &lt;= lists[i].length &lt;= 500</span>\n<span class=\"token comment\">// -104 &lt;= lists[i][j] &lt;= 104</span>\n<span class=\"token comment\">// lists[i] is sorted in ascending order.</span>\n<span class=\"token comment\">// The sum of lists[i].length will not exceed 104.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor</span>\n<span class=\"token comment\">//t</span>\n<span class=\"token comment\">// 👍 12620 👎 487</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">ListNode</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tempNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span>lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            tempNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ListNode</span> minN <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> keyIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">:</span> tempNodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        minN <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        minV <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                        keyIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minN <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                head <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cur <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an array of k linked-lists lists, each linked-list is sorted in</span>\n<span class=\"token comment\">//ascending order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge all the linked-lists into one sorted linked-list and return it.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[1,4,5],[1,3,4],[2,6]]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4,5,6]</span>\n<span class=\"token comment\">//Explanation: The linked-lists are:</span>\n<span class=\"token comment\">//[</span>\n<span class=\"token comment\">//  1->4->5,</span>\n<span class=\"token comment\">//  1->3->4,</span>\n<span class=\"token comment\">//  2->6</span>\n<span class=\"token comment\">//]</span>\n<span class=\"token comment\">//merging them into one sorted list:</span>\n<span class=\"token comment\">//1->1->2->3->4->4->5->6</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[]]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k == lists.length</span>\n<span class=\"token comment\">// 0 &lt;= k &lt;= 104</span>\n<span class=\"token comment\">// 0 &lt;= lists[i].length &lt;= 500</span>\n<span class=\"token comment\">// -104 &lt;= lists[i][j] &lt;= 104</span>\n<span class=\"token comment\">// lists[i] is sorted in ascending order.</span>\n<span class=\"token comment\">// The sum of lists[i].length will not exceed 104.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor</span>\n<span class=\"token comment\">//t</span>\n<span class=\"token comment\">// 👍 12620 👎 487</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tempNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span>lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            tempNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ListNode</span> minN <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> keyIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">:</span> tempNodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        minN <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        minV <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                        keyIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minN <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                head <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            cur <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-26","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-24T05:51:18.000Z","_content":"\n```java\n//Given an integer array nums sorted in non-decreasing order, remove the duplica\n//tes in-place such that each unique element appears only once. The relative order\n// of the elements should be kept the same. \n//\n// Since it is impossible to change the length of the array in some languages, y\n//ou must instead have the result be placed in the first part of the array nums. M\n//ore formally, if there are k elements after removing the duplicates, then the fi\n//rst k elements of nums should hold the final result. It does not matter what you\n// leave beyond the first k elements. \n//\n// Return k after placing the final result in the first k slots of nums. \n//\n// Do not allocate extra space for another array. You must do this by modifying \n//the input array in-place with O(1) extra memory. \n//\n// Custom Judge: \n//\n// The judge will test your solution with the following code: \n//\n// \n//int[] nums = [...]; // Input array\n//int[] expectedNums = [...]; // The expected answer with correct length\n//\n//int k = removeDuplicates(nums); // Calls your implementation\n//\n//assert k == expectedNums.length;\n//for (int i = 0; i < k; i++) {\n//    assert nums[i] == expectedNums[i];\n//}\n// \n//\n// If all assertions pass, then your solution will be accepted. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,1,2]\n//Output: 2, nums = [1,2,_]\n//Explanation: Your function should return k = 2, with the first two elements of\n// nums being 1 and 2 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0,0,1,1,1,2,2,3,3,4]\n//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n//Explanation: Your function should return k = 5, with the first five elements o\n//f nums being 0, 1, 2, 3, and 4 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 3 * 104 \n// -100 <= nums[i] <= 100 \n// nums is sorted in non-decreasing order. \n// \n// Related Topics Array Two Pointers \n// 👍 7035 👎 10653\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int curV = Integer.MAX_VALUE;\n       \tint index = -1;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != curV) {\n                curV = nums[i];\n                index++;\n                nums[index] = curV;\n            }\n        }\n        \n        return index + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-26.md","raw":"---\ntitle: lc-26\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-24 13:51:18\n---\n\n```java\n//Given an integer array nums sorted in non-decreasing order, remove the duplica\n//tes in-place such that each unique element appears only once. The relative order\n// of the elements should be kept the same. \n//\n// Since it is impossible to change the length of the array in some languages, y\n//ou must instead have the result be placed in the first part of the array nums. M\n//ore formally, if there are k elements after removing the duplicates, then the fi\n//rst k elements of nums should hold the final result. It does not matter what you\n// leave beyond the first k elements. \n//\n// Return k after placing the final result in the first k slots of nums. \n//\n// Do not allocate extra space for another array. You must do this by modifying \n//the input array in-place with O(1) extra memory. \n//\n// Custom Judge: \n//\n// The judge will test your solution with the following code: \n//\n// \n//int[] nums = [...]; // Input array\n//int[] expectedNums = [...]; // The expected answer with correct length\n//\n//int k = removeDuplicates(nums); // Calls your implementation\n//\n//assert k == expectedNums.length;\n//for (int i = 0; i < k; i++) {\n//    assert nums[i] == expectedNums[i];\n//}\n// \n//\n// If all assertions pass, then your solution will be accepted. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,1,2]\n//Output: 2, nums = [1,2,_]\n//Explanation: Your function should return k = 2, with the first two elements of\n// nums being 1 and 2 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0,0,1,1,1,2,2,3,3,4]\n//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n//Explanation: Your function should return k = 5, with the first five elements o\n//f nums being 0, 1, 2, 3, and 4 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 3 * 104 \n// -100 <= nums[i] <= 100 \n// nums is sorted in non-decreasing order. \n// \n// Related Topics Array Two Pointers \n// 👍 7035 👎 10653\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int curV = Integer.MAX_VALUE;\n       \tint index = -1;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != curV) {\n                curV = nums[i];\n                index++;\n                nums[index] = curV;\n            }\n        }\n        \n        return index + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-26","published":1,"updated":"2022-06-24T14:20:55.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4sjn4uk0000w8uu6qwwfbns","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums sorted in non-decreasing order, remove the duplica</span>\n<span class=\"token comment\">//tes in-place such that each unique element appears only once. The relative order</span>\n<span class=\"token comment\">// of the elements should be kept the same. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since it is impossible to change the length of the array in some languages, y</span>\n<span class=\"token comment\">//ou must instead have the result be placed in the first part of the array nums. M</span>\n<span class=\"token comment\">//ore formally, if there are k elements after removing the duplicates, then the fi</span>\n<span class=\"token comment\">//rst k elements of nums should hold the final result. It does not matter what you</span>\n<span class=\"token comment\">// leave beyond the first k elements. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return k after placing the final result in the first k slots of nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Do not allocate extra space for another array. You must do this by modifying </span>\n<span class=\"token comment\">//the input array in-place with O(1) extra memory. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Custom Judge: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The judge will test your solution with the following code: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//int[] nums = [...]; // Input array</span>\n<span class=\"token comment\">//int[] expectedNums = [...]; // The expected answer with correct length</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//int k = removeDuplicates(nums); // Calls your implementation</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//assert k == expectedNums.length;</span>\n<span class=\"token comment\">//for (int i = 0; i &lt; k; i++) {</span>\n<span class=\"token comment\">//    assert nums[i] == expectedNums[i];</span>\n<span class=\"token comment\">//}</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If all assertions pass, then your solution will be accepted. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,1,2]</span>\n<span class=\"token comment\">//Output: 2, nums = [1,2,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 2, with the first two elements of</span>\n<span class=\"token comment\">// nums being 1 and 2 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0,0,1,1,1,2,2,3,3,4]</span>\n<span class=\"token comment\">//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 5, with the first five elements o</span>\n<span class=\"token comment\">//f nums being 0, 1, 2, 3, and 4 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 3 * 104 </span>\n<span class=\"token comment\">// -100 &lt;= nums[i] &lt;= 100 </span>\n<span class=\"token comment\">// nums is sorted in non-decreasing order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers </span>\n<span class=\"token comment\">// 👍 7035 👎 10653</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span> curV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n       \t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> curV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curV <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curV<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums sorted in non-decreasing order, remove the duplica</span>\n<span class=\"token comment\">//tes in-place such that each unique element appears only once. The relative order</span>\n<span class=\"token comment\">// of the elements should be kept the same. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since it is impossible to change the length of the array in some languages, y</span>\n<span class=\"token comment\">//ou must instead have the result be placed in the first part of the array nums. M</span>\n<span class=\"token comment\">//ore formally, if there are k elements after removing the duplicates, then the fi</span>\n<span class=\"token comment\">//rst k elements of nums should hold the final result. It does not matter what you</span>\n<span class=\"token comment\">// leave beyond the first k elements. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return k after placing the final result in the first k slots of nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Do not allocate extra space for another array. You must do this by modifying </span>\n<span class=\"token comment\">//the input array in-place with O(1) extra memory. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Custom Judge: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The judge will test your solution with the following code: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//int[] nums = [...]; // Input array</span>\n<span class=\"token comment\">//int[] expectedNums = [...]; // The expected answer with correct length</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//int k = removeDuplicates(nums); // Calls your implementation</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//assert k == expectedNums.length;</span>\n<span class=\"token comment\">//for (int i = 0; i &lt; k; i++) &#123;</span>\n<span class=\"token comment\">//    assert nums[i] == expectedNums[i];</span>\n<span class=\"token comment\">//&#125;</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If all assertions pass, then your solution will be accepted. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,1,2]</span>\n<span class=\"token comment\">//Output: 2, nums = [1,2,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 2, with the first two elements of</span>\n<span class=\"token comment\">// nums being 1 and 2 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0,0,1,1,1,2,2,3,3,4]</span>\n<span class=\"token comment\">//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 5, with the first five elements o</span>\n<span class=\"token comment\">//f nums being 0, 1, 2, 3, and 4 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 3 * 104 </span>\n<span class=\"token comment\">// -100 &lt;= nums[i] &lt;= 100 </span>\n<span class=\"token comment\">// nums is sorted in non-decreasing order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers </span>\n<span class=\"token comment\">// 👍 7035 👎 10653</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> curV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n       \t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> curV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curV <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curV<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">return</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-28","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-27T05:50:03.000Z","_content":"\n```java\n//Implement strStr(). \n//\n// Given two strings needle and haystack, return the index of the first occurren\n//ce of needle in haystack, or -1 if needle is not part of haystack. \n//\n// Clarification: \n//\n// What should we return when needle is an empty string? This is a great questio\n//n to ask during an interview. \n//\n// For the purpose of this problem, we will return 0 when needle is an empty str\n//ing. This is consistent to C's strstr() and Java's indexOf(). \n//\n// \n// Example 1: \n//\n// \n//Input: haystack = \"hello\", needle = \"ll\"\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: haystack = \"aaaaa\", needle = \"bba\"\n//Output: -1\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= haystack.length, needle.length <= 104 \n// haystack and needle consist of only lowercase English characters. \n// \n// Related Topics Two Pointers String String Matching \n// 👍 4350 👎 3748\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        int lh = haystack.length();\n        int ln = needle.length();\n\n        if (lh < ln) {\n            return -1;\n        }\n\n\n        if (ln == 0) {\n            return 0;\n        }\n\n        if (ln == lh) {\n            if (haystack.equals(needle)) {\n                return 0;\n            } else {\n                return -1;\n            }\n        }\n\n        for (int i = 0; i <= lh - ln; i++) {\n            String subStr = haystack.substring(i, i + ln);\n            if (subStr.equals(needle)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-28.md","raw":"---\ntitle: lc-28\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-27 13:50:03\n---\n\n```java\n//Implement strStr(). \n//\n// Given two strings needle and haystack, return the index of the first occurren\n//ce of needle in haystack, or -1 if needle is not part of haystack. \n//\n// Clarification: \n//\n// What should we return when needle is an empty string? This is a great questio\n//n to ask during an interview. \n//\n// For the purpose of this problem, we will return 0 when needle is an empty str\n//ing. This is consistent to C's strstr() and Java's indexOf(). \n//\n// \n// Example 1: \n//\n// \n//Input: haystack = \"hello\", needle = \"ll\"\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: haystack = \"aaaaa\", needle = \"bba\"\n//Output: -1\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= haystack.length, needle.length <= 104 \n// haystack and needle consist of only lowercase English characters. \n// \n// Related Topics Two Pointers String String Matching \n// 👍 4350 👎 3748\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        int lh = haystack.length();\n        int ln = needle.length();\n\n        if (lh < ln) {\n            return -1;\n        }\n\n\n        if (ln == 0) {\n            return 0;\n        }\n\n        if (ln == lh) {\n            if (haystack.equals(needle)) {\n                return 0;\n            } else {\n                return -1;\n            }\n        }\n\n        for (int i = 0; i <= lh - ln; i++) {\n            String subStr = haystack.substring(i, i + ln);\n            if (subStr.equals(needle)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-28","published":1,"updated":"2022-06-28T03:51:10.731Z","_id":"cl4wddm2f0000houug8h60n7y","comments":1,"layout":"post","photos":[],"link":"","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement strStr(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given two strings needle and haystack, return the index of the first occurren</span>\n<span class=\"token comment\">//ce of needle in haystack, or -1 if needle is not part of haystack. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Clarification: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// What should we return when needle is an empty string? This is a great questio</span>\n<span class=\"token comment\">//n to ask during an interview. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For the purpose of this problem, we will return 0 when needle is an empty str</span>\n<span class=\"token comment\">//ing. This is consistent to C's strstr() and Java's indexOf(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"hello\", needle = \"ll\"</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"aaaaa\", needle = \"bba\"</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= haystack.length, needle.length &lt;= 104 </span>\n<span class=\"token comment\">// haystack and needle consist of only lowercase English characters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Two Pointers String String Matching </span>\n<span class=\"token comment\">// 👍 4350 👎 3748</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> lh <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ln <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lh <span class=\"token operator\">&lt;</span> ln<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> lh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> lh <span class=\"token operator\">-</span> ln<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> subStr <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subStr<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement strStr(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given two strings needle and haystack, return the index of the first occurren</span>\n<span class=\"token comment\">//ce of needle in haystack, or -1 if needle is not part of haystack. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Clarification: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// What should we return when needle is an empty string? This is a great questio</span>\n<span class=\"token comment\">//n to ask during an interview. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For the purpose of this problem, we will return 0 when needle is an empty str</span>\n<span class=\"token comment\">//ing. This is consistent to C's strstr() and Java's indexOf(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"hello\", needle = \"ll\"</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"aaaaa\", needle = \"bba\"</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= haystack.length, needle.length &lt;= 104 </span>\n<span class=\"token comment\">// haystack and needle consist of only lowercase English characters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Two Pointers String String Matching </span>\n<span class=\"token comment\">// 👍 4350 👎 3748</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> lh <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ln <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lh <span class=\"token operator\">&lt;</span> ln<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> lh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> lh <span class=\"token operator\">-</span> ln<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> subStr <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subStr<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-29","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-28T03:51:03.000Z","_content":"\n```java\n//Given two integers dividend and divisor, divide two integers without using mul\n//tiplication, division, and mod operator. \n//\n// The integer division should truncate toward zero, which means losing its frac\n//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr\n//uncated to -2. \n//\n// Return the quotient after dividing dividend by divisor. \n//\n// Note: Assume we are dealing with an environment that could only store integer\n//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if \n//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q\n//uotient is strictly less than -231, then return -231. \n//\n// \n// Example 1: \n//\n// \n//Input: dividend = 10, divisor = 3\n//Output: 3\n//Explanation: 10/3 = 3.33333.. which is truncated to 3.\n// \n//\n// Example 2: \n//\n// \n//Input: dividend = 7, divisor = -3\n//Output: -2\n//Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n// \n//\n// \n// Constraints: \n//\n// \n// -231 <= dividend, divisor <= 231 - 1 \n// divisor != 0 \n// \n// Related Topics Math Bit Manipulation \n// 👍 3208 👎 10948\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int divide(int dividend, int divisor) {\n        boolean minus = (dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0);\n\n        if (divisor == 1) {\n            return dividend;\n        }\n\n        long dividendLong = (long)dividend;\n        long divisorLong = (long)divisor;\n\n\n        if (dividend == Integer.MIN_VALUE && divisor == -1) {\n            return Integer.MAX_VALUE;\n        }\n\n\n        if (dividend < 0) {\n            dividendLong = -dividendLong;\n        }\n\n        if (divisor < 0) {\n            divisorLong = -divisorLong;\n        }\n\n        long times = 1l;\n        int result = 0;\n\n        while (divisorLong < dividendLong && divisorLong < Integer.MAX_VALUE) {\n            divisorLong = divisorLong << 1;\n            times = times << 1;\n        }\n\n        if (divisorLong > dividendLong) {\n            divisorLong = divisorLong >> 1;\n            times = times >> 1;\n        }\n\n        while (times > 0) {\n            if (dividendLong >= divisorLong) {\n                dividendLong -= divisorLong;\n                result+=times;\n            }\n\n            if (dividendLong < divisorLong) {\n                divisorLong = divisorLong >> 1;\n                times = times >> 1;\n            }\n        }\n        if (minus) {\n            return -result;\n        } else {\n            return result;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-29.md","raw":"---\ntitle: lc-29\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-28 11:51:03\n---\n\n```java\n//Given two integers dividend and divisor, divide two integers without using mul\n//tiplication, division, and mod operator. \n//\n// The integer division should truncate toward zero, which means losing its frac\n//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr\n//uncated to -2. \n//\n// Return the quotient after dividing dividend by divisor. \n//\n// Note: Assume we are dealing with an environment that could only store integer\n//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if \n//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q\n//uotient is strictly less than -231, then return -231. \n//\n// \n// Example 1: \n//\n// \n//Input: dividend = 10, divisor = 3\n//Output: 3\n//Explanation: 10/3 = 3.33333.. which is truncated to 3.\n// \n//\n// Example 2: \n//\n// \n//Input: dividend = 7, divisor = -3\n//Output: -2\n//Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n// \n//\n// \n// Constraints: \n//\n// \n// -231 <= dividend, divisor <= 231 - 1 \n// divisor != 0 \n// \n// Related Topics Math Bit Manipulation \n// 👍 3208 👎 10948\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int divide(int dividend, int divisor) {\n        boolean minus = (dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0);\n\n        if (divisor == 1) {\n            return dividend;\n        }\n\n        long dividendLong = (long)dividend;\n        long divisorLong = (long)divisor;\n\n\n        if (dividend == Integer.MIN_VALUE && divisor == -1) {\n            return Integer.MAX_VALUE;\n        }\n\n\n        if (dividend < 0) {\n            dividendLong = -dividendLong;\n        }\n\n        if (divisor < 0) {\n            divisorLong = -divisorLong;\n        }\n\n        long times = 1l;\n        int result = 0;\n\n        while (divisorLong < dividendLong && divisorLong < Integer.MAX_VALUE) {\n            divisorLong = divisorLong << 1;\n            times = times << 1;\n        }\n\n        if (divisorLong > dividendLong) {\n            divisorLong = divisorLong >> 1;\n            times = times >> 1;\n        }\n\n        while (times > 0) {\n            if (dividendLong >= divisorLong) {\n                dividendLong -= divisorLong;\n                result+=times;\n            }\n\n            if (dividendLong < divisorLong) {\n                divisorLong = divisorLong >> 1;\n                times = times >> 1;\n            }\n        }\n        if (minus) {\n            return -result;\n        } else {\n            return result;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-29","published":1,"updated":"2022-06-28T15:07:22.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4yayyvc0000scuu0h8yg1tx","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two integers dividend and divisor, divide two integers without using mul</span>\n<span class=\"token comment\">//tiplication, division, and mod operator. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The integer division should truncate toward zero, which means losing its frac</span>\n<span class=\"token comment\">//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr</span>\n<span class=\"token comment\">//uncated to -2. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the quotient after dividing dividend by divisor. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: Assume we are dealing with an environment that could only store integer</span>\n<span class=\"token comment\">//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if </span>\n<span class=\"token comment\">//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q</span>\n<span class=\"token comment\">//uotient is strictly less than -231, then return -231. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 10, divisor = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: 10/3 = 3.33333.. which is truncated to 3.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 7, divisor = -3</span>\n<span class=\"token comment\">//Output: -2</span>\n<span class=\"token comment\">//Explanation: 7/-3 = -2.33333.. which is truncated to -2.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -231 &lt;= dividend, divisor &lt;= 231 - 1 </span>\n<span class=\"token comment\">// divisor != 0 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Bit Manipulation </span>\n<span class=\"token comment\">// 👍 3208 👎 10948</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dividend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> minus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">long</span> dividendLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> divisorLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>divisor<span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dividendLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>dividendLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divisorLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>divisorLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">long</span> times <span class=\"token operator\">=</span> <span class=\"token number\">1l</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">&lt;</span> dividendLong <span class=\"token operator\">&amp;&amp;</span> divisorLong <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">&gt;</span> dividendLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>times <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">&gt;=</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dividendLong <span class=\"token operator\">-=</span> divisorLong<span class=\"token punctuation\">;</span>\n                result<span class=\"token operator\">+=</span>times<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">&lt;</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                times <span class=\"token operator\">=</span> times <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two integers dividend and divisor, divide two integers without using mul</span>\n<span class=\"token comment\">//tiplication, division, and mod operator. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The integer division should truncate toward zero, which means losing its frac</span>\n<span class=\"token comment\">//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr</span>\n<span class=\"token comment\">//uncated to -2. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the quotient after dividing dividend by divisor. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: Assume we are dealing with an environment that could only store integer</span>\n<span class=\"token comment\">//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if </span>\n<span class=\"token comment\">//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q</span>\n<span class=\"token comment\">//uotient is strictly less than -231, then return -231. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 10, divisor = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: 10/3 = 3.33333.. which is truncated to 3.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 7, divisor = -3</span>\n<span class=\"token comment\">//Output: -2</span>\n<span class=\"token comment\">//Explanation: 7/-3 = -2.33333.. which is truncated to -2.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -231 &lt;= dividend, divisor &lt;= 231 - 1 </span>\n<span class=\"token comment\">// divisor != 0 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Bit Manipulation </span>\n<span class=\"token comment\">// 👍 3208 👎 10948</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dividend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> minus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">long</span> dividendLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> divisorLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>divisor<span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dividendLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>dividendLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            divisorLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>divisorLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">long</span> times <span class=\"token operator\">=</span> <span class=\"token number\">1l</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">&lt;</span> dividendLong <span class=\"token operator\">&amp;&amp;</span> divisorLong <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">></span> dividendLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>times <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">>=</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                dividendLong <span class=\"token operator\">-=</span> divisorLong<span class=\"token punctuation\">;</span>\n                result<span class=\"token operator\">+=</span>times<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">&lt;</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                times <span class=\"token operator\">=</span> times <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-33","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-06-29T03:11:46.000Z","_content":"\n```java\n//There is an integer array nums sorted in ascending order (with distinct values\n//). \n//\n// Prior to being passed to your function, nums is possibly rotated at an unknow\n//n pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k]\n//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For \n//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0\n//,1,2]. \n//\n// Given the array nums after the possible rotation and an integer target, retur\n//n the index of target if it is in nums, or -1 if it is not in nums. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [4,5,6,7,0,1,2], target = 0\n//Output: 4\n// Example 2: \n// Input: nums = [4,5,6,7,0,1,2], target = 3\n//Output: -1\n// Example 3: \n// Input: nums = [1], target = 0\n//Output: -1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5000 \n// -104 <= nums[i] <= 104 \n// All values of nums are unique. \n// nums is an ascending array that is possibly rotated. \n// -104 <= target <= 104 \n// \n// Related Topics Array Binary Search \n// 👍 15303 👎 957\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int search(int[] nums, int target) {\n        if (nums[0] < nums[nums.length - 1]) {\n            return searchInner(nums, target, 0, nums.length - 1, true);\n        } else {\n            return searchInner(nums, target, 0, nums.length - 1, false);\n        }\n    }\n\n    private int searchInner(int[] nums, int target, int from, int end, boolean isAsc) {\n        if (from == end) {\n            if (nums[from] == target) {\n                return from;\n            } else {\n                return -1;\n            }\n        }\n\n        if (from + 1 == end) {\n            if (nums[from] == target) {\n                return from;\n            } else if (nums[end] == target) {\n                return end;\n            } else {\n                return -1;\n            }\n        }\n\n        int mid = from + (end - from) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        }\n\n        if (isAsc) {\n            if (nums[mid] < target) {\n                return searchInner(nums, target, mid, end, true);\n            } else {\n                return searchInner(nums, target, from, mid, true);\n            }\n        } else {\n            if (nums[mid] <= nums[from] && nums[mid] <= nums[end]) {\n                if (nums[mid] < target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, false);\n                    } else {\n                        return searchInner(nums, target, mid, end, true);\n                    }\n                } else {\n                    return searchInner(nums, target, from, mid, false);\n                }\n            } else {\n                if (nums[mid] > target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, true);\n                    } else {\n                        return searchInner(nums, target, mid, end, false);\n                    }\n                } else {\n                    return searchInner(nums, target, mid, end, false);\n                }\n            }\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```","source":"_posts/lc-33.md","raw":"---\ntitle: lc-33\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-29 11:11:46\n---\n\n```java\n//There is an integer array nums sorted in ascending order (with distinct values\n//). \n//\n// Prior to being passed to your function, nums is possibly rotated at an unknow\n//n pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k]\n//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For \n//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0\n//,1,2]. \n//\n// Given the array nums after the possible rotation and an integer target, retur\n//n the index of target if it is in nums, or -1 if it is not in nums. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [4,5,6,7,0,1,2], target = 0\n//Output: 4\n// Example 2: \n// Input: nums = [4,5,6,7,0,1,2], target = 3\n//Output: -1\n// Example 3: \n// Input: nums = [1], target = 0\n//Output: -1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5000 \n// -104 <= nums[i] <= 104 \n// All values of nums are unique. \n// nums is an ascending array that is possibly rotated. \n// -104 <= target <= 104 \n// \n// Related Topics Array Binary Search \n// 👍 15303 👎 957\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int search(int[] nums, int target) {\n        if (nums[0] < nums[nums.length - 1]) {\n            return searchInner(nums, target, 0, nums.length - 1, true);\n        } else {\n            return searchInner(nums, target, 0, nums.length - 1, false);\n        }\n    }\n\n    private int searchInner(int[] nums, int target, int from, int end, boolean isAsc) {\n        if (from == end) {\n            if (nums[from] == target) {\n                return from;\n            } else {\n                return -1;\n            }\n        }\n\n        if (from + 1 == end) {\n            if (nums[from] == target) {\n                return from;\n            } else if (nums[end] == target) {\n                return end;\n            } else {\n                return -1;\n            }\n        }\n\n        int mid = from + (end - from) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        }\n\n        if (isAsc) {\n            if (nums[mid] < target) {\n                return searchInner(nums, target, mid, end, true);\n            } else {\n                return searchInner(nums, target, from, mid, true);\n            }\n        } else {\n            if (nums[mid] <= nums[from] && nums[mid] <= nums[end]) {\n                if (nums[mid] < target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, false);\n                    } else {\n                        return searchInner(nums, target, mid, end, true);\n                    }\n                } else {\n                    return searchInner(nums, target, from, mid, false);\n                }\n            } else {\n                if (nums[mid] > target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, true);\n                    } else {\n                        return searchInner(nums, target, mid, end, false);\n                    }\n                } else {\n                    return searchInner(nums, target, mid, end, false);\n                }\n            }\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```","slug":"lc-33","published":1,"updated":"2022-06-30T05:59:54.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl50map4o0000xguu96a1dxrh","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is an integer array nums sorted in ascending order (with distinct values</span>\n<span class=\"token comment\">//). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Prior to being passed to your function, nums is possibly rotated at an unknow</span>\n<span class=\"token comment\">//n pivot index k (1 &lt;= k &lt; nums.length) such that the resulting array is [nums[k]</span>\n<span class=\"token comment\">//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For </span>\n<span class=\"token comment\">//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0</span>\n<span class=\"token comment\">//,1,2]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the array nums after the possible rotation and an integer target, retur</span>\n<span class=\"token comment\">//n the index of target if it is in nums, or -1 if it is not in nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 0</span>\n<span class=\"token comment\">//Output: 4</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 3</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1], target = 0</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5000 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// All values of nums are unique. </span>\n<span class=\"token comment\">// nums is an ascending array that is possibly rotated. </span>\n<span class=\"token comment\">// -104 &lt;= target &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 15303 👎 957</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is an integer array nums sorted in ascending order (with distinct values</span>\n<span class=\"token comment\">//). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Prior to being passed to your function, nums is possibly rotated at an unknow</span>\n<span class=\"token comment\">//n pivot index k (1 &lt;= k &lt; nums.length) such that the resulting array is [nums[k]</span>\n<span class=\"token comment\">//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For </span>\n<span class=\"token comment\">//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0</span>\n<span class=\"token comment\">//,1,2]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the array nums after the possible rotation and an integer target, retur</span>\n<span class=\"token comment\">//n the index of target if it is in nums, or -1 if it is not in nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 0</span>\n<span class=\"token comment\">//Output: 4</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 3</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1], target = 0</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5000 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// All values of nums are unique. </span>\n<span class=\"token comment\">// nums is an ascending array that is possibly rotated. </span>\n<span class=\"token comment\">// -104 &lt;= target &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 15303 👎 957</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"lc-34","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-01T03:30:07.000Z","_content":"\n```java\n//Given an array of integers nums sorted in non-decreasing order, find the start\n//ing and ending position of a given target value. \n//\n// If target is not found in the array, return [-1, -1]. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [5,7,7,8,8,10], target = 8\n//Output: [3,4]\n// Example 2: \n// Input: nums = [5,7,7,8,8,10], target = 6\n//Output: [-1,-1]\n// Example 3: \n// Input: nums = [], target = 0\n//Output: [-1,-1]\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 105 \n// -109 <= nums[i] <= 109 \n// nums is a non-decreasing array. \n// -109 <= target <= 109 \n// \n// Related Topics Array Binary Search \n// 👍 11383 👎 306\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] result = new int[2];\n        result[0] = searchRangeFunc(nums, target, true);\n        result[1] = searchRangeFunc(nums, target, false);\n        return result;\n    }\n\n    private int searchRangeFunc(int[] nums, int target, boolean left) {\n        int from = 0, end = nums.length - 1;\n\n        while (from <= end) {\n            if (from == end) {\n                if (nums[from] == target) {\n                    return from;\n                } else {\n                    return -1;\n                }\n            }\n\n            if (from + 1 == end) {\n                if (nums[from] == target && nums[end] == target) {\n                    if (left) {\n                        return from;\n                    } else {\n                        return end;\n                    }\n                }\n\n                if (nums[from] == target) {\n                    return from;\n                } else if (nums[end] == target) {\n                    return end;\n                } else {\n                    return -1;\n                }\n            }\n\n            int mid = from + (end - from) / 2;\n\n            if (nums[mid] < target) {\n                from = mid;\n            } else if (nums[mid] > target) {\n                end = mid;\n            } else {\n                if (left) {\n                    end = mid;\n                } else {\n                    from = mid;\n                }\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-34.md","raw":"---\ntitle: lc-34\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-01 11:30:07\n---\n\n```java\n//Given an array of integers nums sorted in non-decreasing order, find the start\n//ing and ending position of a given target value. \n//\n// If target is not found in the array, return [-1, -1]. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [5,7,7,8,8,10], target = 8\n//Output: [3,4]\n// Example 2: \n// Input: nums = [5,7,7,8,8,10], target = 6\n//Output: [-1,-1]\n// Example 3: \n// Input: nums = [], target = 0\n//Output: [-1,-1]\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 105 \n// -109 <= nums[i] <= 109 \n// nums is a non-decreasing array. \n// -109 <= target <= 109 \n// \n// Related Topics Array Binary Search \n// 👍 11383 👎 306\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] result = new int[2];\n        result[0] = searchRangeFunc(nums, target, true);\n        result[1] = searchRangeFunc(nums, target, false);\n        return result;\n    }\n\n    private int searchRangeFunc(int[] nums, int target, boolean left) {\n        int from = 0, end = nums.length - 1;\n\n        while (from <= end) {\n            if (from == end) {\n                if (nums[from] == target) {\n                    return from;\n                } else {\n                    return -1;\n                }\n            }\n\n            if (from + 1 == end) {\n                if (nums[from] == target && nums[end] == target) {\n                    if (left) {\n                        return from;\n                    } else {\n                        return end;\n                    }\n                }\n\n                if (nums[from] == target) {\n                    return from;\n                } else if (nums[end] == target) {\n                    return end;\n                } else {\n                    return -1;\n                }\n            }\n\n            int mid = from + (end - from) / 2;\n\n            if (nums[mid] < target) {\n                from = mid;\n            } else if (nums[mid] > target) {\n                end = mid;\n            } else {\n                if (left) {\n                    end = mid;\n                } else {\n                    from = mid;\n                }\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-34","published":1,"updated":"2022-07-01T08:01:21.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5262nk70000t0uufinwdwfd","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of integers nums sorted in non-decreasing order, find the start</span>\n<span class=\"token comment\">//ing and ending position of a given target value. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If target is not found in the array, return [-1, -1]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 8</span>\n<span class=\"token comment\">//Output: [3,4]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 6</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [], target = 0</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -109 &lt;= nums[i] &lt;= 109 </span>\n<span class=\"token comment\">// nums is a non-decreasing array. </span>\n<span class=\"token comment\">// -109 &lt;= target &lt;= 109 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 11383 👎 306</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">searchRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> from <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of integers nums sorted in non-decreasing order, find the start</span>\n<span class=\"token comment\">//ing and ending position of a given target value. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If target is not found in the array, return [-1, -1]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 8</span>\n<span class=\"token comment\">//Output: [3,4]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 6</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [], target = 0</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -109 &lt;= nums[i] &lt;= 109 </span>\n<span class=\"token comment\">// nums is a non-decreasing array. </span>\n<span class=\"token comment\">// -109 &lt;= target &lt;= 109 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 11383 👎 306</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">searchRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> from <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-36","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-04T02:54:59.000Z","_content":"\n```java\n//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v\n//alidated according to the following rules: \n//\n// \n// Each row must contain the digits 1-9 without repetition. \n// Each column must contain the digits 1-9 without repetition. \n// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with\n//out repetition. \n// \n//\n// Note: \n//\n// \n// A Sudoku board (partially filled) could be valid but is not necessarily solva\n//ble. \n// Only the filled cells need to be validated according to the mentioned rules. \n//\n// \n//\n// \n// Example 1: \n//\n// \n//Input: board = \n//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: board = \n//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: false\n//Explanation: Same as Example 1, except with the 5 in the top left corner being\n// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval\n//id.\n// \n//\n// \n// Constraints: \n//\n// \n// board.length == 9 \n// board[i].length == 9 \n// board[i][j] is a digit 1-9 or '.'. \n// \n// Related Topics Array Hash Table Matrix \n// 👍 5534 👎 753\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValidSudoku(char[][] board) {\n        for (int i = 0; i < 9; i++) {\n            if (!isValid(board, i, 0) || !isValid(board, i, 1) || !isValid(board, i, 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private boolean isValid(char[][] board, int index, int mode) {\n        boolean[] isOccupied = new boolean[9];\n\n        for (int i = 0; i < 9; i++) {\n            char ch = 0;\n\n            if (mode == 0) {\n                ch = board[index][i];\n            } else if (mode == 1) {\n                ch = board[i][index];\n            } else {\n                ch = board[index/3*3 + i / 3][index % 3 * 3 + i % 3];\n            }\n\n            if (ch == '.') {\n                continue;\n            } else {\n                int chIn = ch - '1';\n\n                if (chIn < 0 || chIn > 8) {\n                    return false;\n                } else if (isOccupied[chIn]) {\n                    return false;\n                } else {\n                    isOccupied[chIn] = true;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-36.md","raw":"---\ntitle: lc-36\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-04 10:54:59\n---\n\n```java\n//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v\n//alidated according to the following rules: \n//\n// \n// Each row must contain the digits 1-9 without repetition. \n// Each column must contain the digits 1-9 without repetition. \n// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with\n//out repetition. \n// \n//\n// Note: \n//\n// \n// A Sudoku board (partially filled) could be valid but is not necessarily solva\n//ble. \n// Only the filled cells need to be validated according to the mentioned rules. \n//\n// \n//\n// \n// Example 1: \n//\n// \n//Input: board = \n//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: board = \n//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: false\n//Explanation: Same as Example 1, except with the 5 in the top left corner being\n// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval\n//id.\n// \n//\n// \n// Constraints: \n//\n// \n// board.length == 9 \n// board[i].length == 9 \n// board[i][j] is a digit 1-9 or '.'. \n// \n// Related Topics Array Hash Table Matrix \n// 👍 5534 👎 753\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValidSudoku(char[][] board) {\n        for (int i = 0; i < 9; i++) {\n            if (!isValid(board, i, 0) || !isValid(board, i, 1) || !isValid(board, i, 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private boolean isValid(char[][] board, int index, int mode) {\n        boolean[] isOccupied = new boolean[9];\n\n        for (int i = 0; i < 9; i++) {\n            char ch = 0;\n\n            if (mode == 0) {\n                ch = board[index][i];\n            } else if (mode == 1) {\n                ch = board[i][index];\n            } else {\n                ch = board[index/3*3 + i / 3][index % 3 * 3 + i % 3];\n            }\n\n            if (ch == '.') {\n                continue;\n            } else {\n                int chIn = ch - '1';\n\n                if (chIn < 0 || chIn > 8) {\n                    return false;\n                } else if (isOccupied[chIn]) {\n                    return false;\n                } else {\n                    isOccupied[chIn] = true;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-36","published":1,"updated":"2022-07-04T06:36:58.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl56ddo8v00004suugteb1lzy","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v</span>\n<span class=\"token comment\">//alidated according to the following rules: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Each row must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each column must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with</span>\n<span class=\"token comment\">//out repetition. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A Sudoku board (partially filled) could be valid but is not necessarily solva</span>\n<span class=\"token comment\">//ble. </span>\n<span class=\"token comment\">// Only the filled cells need to be validated according to the mentioned rules. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: Same as Example 1, except with the 5 in the top left corner being</span>\n<span class=\"token comment\">// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval</span>\n<span class=\"token comment\">//id.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// board.length == 9 </span>\n<span class=\"token comment\">// board[i].length == 9 </span>\n<span class=\"token comment\">// board[i][j] is a digit 1-9 or '.'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 5534 👎 753</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isOccupied <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> chIn <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chIn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> chIn <span class=\"token operator\">&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v</span>\n<span class=\"token comment\">//alidated according to the following rules: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Each row must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each column must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with</span>\n<span class=\"token comment\">//out repetition. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A Sudoku board (partially filled) could be valid but is not necessarily solva</span>\n<span class=\"token comment\">//ble. </span>\n<span class=\"token comment\">// Only the filled cells need to be validated according to the mentioned rules. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: Same as Example 1, except with the 5 in the top left corner being</span>\n<span class=\"token comment\">// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval</span>\n<span class=\"token comment\">//id.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// board.length == 9 </span>\n<span class=\"token comment\">// board[i].length == 9 </span>\n<span class=\"token comment\">// board[i][j] is a digit 1-9 or '.'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 5534 👎 753</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isOccupied <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> chIn <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chIn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> chIn <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-38","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-05T02:46:51.000Z","_content":"\n```java\n//The count-and-say sequence is a sequence of digit strings defined by the recur\n//sive formula: \n//\n// \n// countAndSay(1) = \"1\" \n// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n\n//-1), which is then converted into a different digit string. \n// \n//\n// To determine how you \"say\" a digit string, split it into the minimal number o\n//f substrings such that each substring contains exactly one unique digit. Then fo\n//r each substring, say the number of digits, then say the digit. Finally, concate\n//nate every said digit. \n//\n// For example, the saying and conversion for digit string \"3322251\": \n//\n// Given a positive integer n, return the nth term of the count-and-say sequence\n//. \n//\n// \n// Example 1: \n//\n// \n//Input: n = 1\n//Output: \"1\"\n//Explanation: This is the base case.\n// \n//\n// Example 2: \n//\n// \n//Input: n = 4\n//Output: \"1211\"\n//Explanation:\n//countAndSay(1) = \"1\"\n//countAndSay(2) = say \"1\" = one 1 = \"11\"\n//countAndSay(3) = say \"11\" = two 1's = \"21\"\n//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 30 \n// \n// Related Topics String \n// 👍 1661 👎 3967\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String countAndSay(int n) {\n        String cur = \"1\";\n\n        for (int i = 1; i < n; i++) {\n            cur = getNext(cur);\n        }\n\n        return cur;\n    }\n\n    String getNext(String last) {\n        char lastCh = 0;\n        StringBuilder sb = new StringBuilder();\n        int curNumber = 0;\n\n        for (char ch : last.toCharArray()) {\n            if (lastCh != 0 && ch != lastCh) {\n                sb.append(curNumber);\n                sb.append(lastCh);\n                curNumber = 0;\n            }\n            lastCh = ch;\n            curNumber++;\n        }\n\n        sb.append(curNumber);\n        sb.append(lastCh);\n\n        return sb.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-38.md","raw":"---\ntitle: lc-38\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-05 10:46:51\n---\n\n```java\n//The count-and-say sequence is a sequence of digit strings defined by the recur\n//sive formula: \n//\n// \n// countAndSay(1) = \"1\" \n// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n\n//-1), which is then converted into a different digit string. \n// \n//\n// To determine how you \"say\" a digit string, split it into the minimal number o\n//f substrings such that each substring contains exactly one unique digit. Then fo\n//r each substring, say the number of digits, then say the digit. Finally, concate\n//nate every said digit. \n//\n// For example, the saying and conversion for digit string \"3322251\": \n//\n// Given a positive integer n, return the nth term of the count-and-say sequence\n//. \n//\n// \n// Example 1: \n//\n// \n//Input: n = 1\n//Output: \"1\"\n//Explanation: This is the base case.\n// \n//\n// Example 2: \n//\n// \n//Input: n = 4\n//Output: \"1211\"\n//Explanation:\n//countAndSay(1) = \"1\"\n//countAndSay(2) = say \"1\" = one 1 = \"11\"\n//countAndSay(3) = say \"11\" = two 1's = \"21\"\n//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 30 \n// \n// Related Topics String \n// 👍 1661 👎 3967\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String countAndSay(int n) {\n        String cur = \"1\";\n\n        for (int i = 1; i < n; i++) {\n            cur = getNext(cur);\n        }\n\n        return cur;\n    }\n\n    String getNext(String last) {\n        char lastCh = 0;\n        StringBuilder sb = new StringBuilder();\n        int curNumber = 0;\n\n        for (char ch : last.toCharArray()) {\n            if (lastCh != 0 && ch != lastCh) {\n                sb.append(curNumber);\n                sb.append(lastCh);\n                curNumber = 0;\n            }\n            lastCh = ch;\n            curNumber++;\n        }\n\n        sb.append(curNumber);\n        sb.append(lastCh);\n\n        return sb.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-38","published":1,"updated":"2022-07-06T02:55:04.660Z","_id":"cl58auuby0000wguugn4u7sha","comments":1,"layout":"post","photos":[],"link":"","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//The count-and-say sequence is a sequence of digit strings defined by the recur</span>\n<span class=\"token comment\">//sive formula: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// countAndSay(1) = \"1\" </span>\n<span class=\"token comment\">// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n</span>\n<span class=\"token comment\">//-1), which is then converted into a different digit string. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// To determine how you \"say\" a digit string, split it into the minimal number o</span>\n<span class=\"token comment\">//f substrings such that each substring contains exactly one unique digit. Then fo</span>\n<span class=\"token comment\">//r each substring, say the number of digits, then say the digit. Finally, concate</span>\n<span class=\"token comment\">//nate every said digit. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For example, the saying and conversion for digit string \"3322251\": </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given a positive integer n, return the nth term of the count-and-say sequence</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 1</span>\n<span class=\"token comment\">//Output: \"1\"</span>\n<span class=\"token comment\">//Explanation: This is the base case.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 4</span>\n<span class=\"token comment\">//Output: \"1211\"</span>\n<span class=\"token comment\">//Explanation:</span>\n<span class=\"token comment\">//countAndSay(1) = \"1\"</span>\n<span class=\"token comment\">//countAndSay(2) = say \"1\" = one 1 = \"11\"</span>\n<span class=\"token comment\">//countAndSay(3) = say \"11\" = two 1's = \"21\"</span>\n<span class=\"token comment\">//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 30 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String </span>\n<span class=\"token comment\">// 👍 1661 👎 3967</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">countAndSay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> cur <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cur <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> lastCh <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> last<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastCh <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> lastCh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            lastCh <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n            curNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//The count-and-say sequence is a sequence of digit strings defined by the recur</span>\n<span class=\"token comment\">//sive formula: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// countAndSay(1) = \"1\" </span>\n<span class=\"token comment\">// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n</span>\n<span class=\"token comment\">//-1), which is then converted into a different digit string. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// To determine how you \"say\" a digit string, split it into the minimal number o</span>\n<span class=\"token comment\">//f substrings such that each substring contains exactly one unique digit. Then fo</span>\n<span class=\"token comment\">//r each substring, say the number of digits, then say the digit. Finally, concate</span>\n<span class=\"token comment\">//nate every said digit. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For example, the saying and conversion for digit string \"3322251\": </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given a positive integer n, return the nth term of the count-and-say sequence</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 1</span>\n<span class=\"token comment\">//Output: \"1\"</span>\n<span class=\"token comment\">//Explanation: This is the base case.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 4</span>\n<span class=\"token comment\">//Output: \"1211\"</span>\n<span class=\"token comment\">//Explanation:</span>\n<span class=\"token comment\">//countAndSay(1) = \"1\"</span>\n<span class=\"token comment\">//countAndSay(2) = say \"1\" = one 1 = \"11\"</span>\n<span class=\"token comment\">//countAndSay(3) = say \"11\" = two 1's = \"21\"</span>\n<span class=\"token comment\">//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 30 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String </span>\n<span class=\"token comment\">// 👍 1661 👎 3967</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">countAndSay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> cur <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cur <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> lastCh <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> last<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastCh <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> lastCh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            lastCh <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n            curNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-41","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-06T02:54:20.000Z","_content":"\n```java\n//Given an unsorted integer array nums, return the smallest missing positive int\n//eger. \n//\n// You must implement an algorithm that runs in O(n) time and uses constant extr\n//a space. \n//\n// \n// Example 1: \n// Input: nums = [1,2,0]\n//Output: 3\n// Example 2: \n// Input: nums = [3,4,-1,1]\n//Output: 2\n// Example 3: \n// Input: nums = [7,8,9,11,12]\n//Output: 1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5 * 105 \n// -231 <= nums[i] <= 231 - 1 \n// \n// Related Topics Array Hash Table \n// 👍 10299 👎 1387\n\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int firstMissingPositive(int[] nums) {\n        Set<Integer> treeSet = new TreeSet<>();\n        for (int num : nums) {\n            if (num > 0) {\n                treeSet.add(num);\n            }\n        }\n\n        int last = 0;\n\n        for (Integer value : treeSet) {\n            if (value - last > 1) {\n                return last + 1;\n            }\n            last = value;\n        }\n\n        return last + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-41.md","raw":"---\ntitle: lc-41\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-06 10:54:20\n---\n\n```java\n//Given an unsorted integer array nums, return the smallest missing positive int\n//eger. \n//\n// You must implement an algorithm that runs in O(n) time and uses constant extr\n//a space. \n//\n// \n// Example 1: \n// Input: nums = [1,2,0]\n//Output: 3\n// Example 2: \n// Input: nums = [3,4,-1,1]\n//Output: 2\n// Example 3: \n// Input: nums = [7,8,9,11,12]\n//Output: 1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5 * 105 \n// -231 <= nums[i] <= 231 - 1 \n// \n// Related Topics Array Hash Table \n// 👍 10299 👎 1387\n\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int firstMissingPositive(int[] nums) {\n        Set<Integer> treeSet = new TreeSet<>();\n        for (int num : nums) {\n            if (num > 0) {\n                treeSet.add(num);\n            }\n        }\n\n        int last = 0;\n\n        for (Integer value : treeSet) {\n            if (value - last > 1) {\n                return last + 1;\n            }\n            last = value;\n        }\n\n        return last + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-41","published":1,"updated":"2022-07-07T06:15:58.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5amy9jl0000uwuu72t1bx22","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an unsorted integer array nums, return the smallest missing positive int</span>\n<span class=\"token comment\">//eger. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must implement an algorithm that runs in O(n) time and uses constant extr</span>\n<span class=\"token comment\">//a space. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,0]</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [3,4,-1,1]</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [7,8,9,11,12]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5 * 105 </span>\n<span class=\"token comment\">// -231 &lt;= nums[i] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table </span>\n<span class=\"token comment\">// 👍 10299 👎 1387</span>\n\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> treeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                treeSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> value <span class=\"token operator\">:</span> treeSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> last <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            last <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an unsorted integer array nums, return the smallest missing positive int</span>\n<span class=\"token comment\">//eger. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must implement an algorithm that runs in O(n) time and uses constant extr</span>\n<span class=\"token comment\">//a space. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,0]</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [3,4,-1,1]</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [7,8,9,11,12]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5 * 105 </span>\n<span class=\"token comment\">// -231 &lt;= nums[i] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table </span>\n<span class=\"token comment\">// 👍 10299 👎 1387</span>\n\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> treeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                treeSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> value <span class=\"token operator\">:</span> treeSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> last <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            last <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-42","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-08T03:27:17.000Z","_content":"\n```java\n//Given n non-negative integers representing an elevation map where the width of\n// each bar is 1, compute how much water it can trap after raining. \n//\n// \n// Example 1: \n//\n// \n//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n//Output: 6\n//Explanation: The above elevation map (black section) is represented by array [\n//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are\n// being trapped.\n// \n//\n// Example 2: \n//\n// \n//Input: height = [4,2,0,3,2,5]\n//Output: 9\n// \n//\n// \n// Constraints: \n//\n// \n// n == height.length \n// 1 <= n <= 2 * 104 \n// 0 <= height[i] <= 105 \n// \n// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack \n// 👍 19838 👎 279\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int trap(int[] height) {\n        if (height == null || height.length == 0) {\n            return 0;\n        }\n        int[] leftMax = new int[height.length];\n        int[] rightMax = new int[height.length];\n\n        for (int i = 1; i < height.length; i++) {\n            if (height[i - 1] > leftMax[i - 1]) {\n                leftMax[i] = height[i - 1];\n            } else {\n                leftMax[i] = leftMax[i - 1];\n            }\n        }\n\n        for (int i = height.length - 2; i >= 0; i--) {\n            if (height[i + 1] > rightMax[i + 1]) {\n                rightMax[i] = height[i + 1];\n            } else {\n                rightMax[i] = rightMax[i + 1];\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < height.length; i++) {\n            int lower = Math.min(leftMax[i], rightMax[i]);\n\n            if (height[i] < lower) {\n                result += (lower - height[i]);\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-42.md","raw":"---\ntitle: lc-42\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-08 11:27:17\n---\n\n```java\n//Given n non-negative integers representing an elevation map where the width of\n// each bar is 1, compute how much water it can trap after raining. \n//\n// \n// Example 1: \n//\n// \n//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n//Output: 6\n//Explanation: The above elevation map (black section) is represented by array [\n//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are\n// being trapped.\n// \n//\n// Example 2: \n//\n// \n//Input: height = [4,2,0,3,2,5]\n//Output: 9\n// \n//\n// \n// Constraints: \n//\n// \n// n == height.length \n// 1 <= n <= 2 * 104 \n// 0 <= height[i] <= 105 \n// \n// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack \n// 👍 19838 👎 279\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int trap(int[] height) {\n        if (height == null || height.length == 0) {\n            return 0;\n        }\n        int[] leftMax = new int[height.length];\n        int[] rightMax = new int[height.length];\n\n        for (int i = 1; i < height.length; i++) {\n            if (height[i - 1] > leftMax[i - 1]) {\n                leftMax[i] = height[i - 1];\n            } else {\n                leftMax[i] = leftMax[i - 1];\n            }\n        }\n\n        for (int i = height.length - 2; i >= 0; i--) {\n            if (height[i + 1] > rightMax[i + 1]) {\n                rightMax[i] = height[i + 1];\n            } else {\n                rightMax[i] = rightMax[i + 1];\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < height.length; i++) {\n            int lower = Math.min(leftMax[i], rightMax[i]);\n\n            if (height[i] < lower) {\n                result += (lower - height[i]);\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-42","published":1,"updated":"2022-07-08T05:50:43.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5c1hluq0000zcuu10zh58ak","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n non-negative integers representing an elevation map where the width of</span>\n<span class=\"token comment\">// each bar is 1, compute how much water it can trap after raining. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: The above elevation map (black section) is represented by array [</span>\n<span class=\"token comment\">//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are</span>\n<span class=\"token comment\">// being trapped.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [4,2,0,3,2,5]</span>\n<span class=\"token comment\">//Output: 9</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == height.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 2 * 104 </span>\n<span class=\"token comment\">// 0 &lt;= height[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack </span>\n<span class=\"token comment\">// 👍 19838 👎 279</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> leftMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rightMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> lower <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> lower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>lower <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n non-negative integers representing an elevation map where the width of</span>\n<span class=\"token comment\">// each bar is 1, compute how much water it can trap after raining. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: The above elevation map (black section) is represented by array [</span>\n<span class=\"token comment\">//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are</span>\n<span class=\"token comment\">// being trapped.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [4,2,0,3,2,5]</span>\n<span class=\"token comment\">//Output: 9</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == height.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 2 * 104 </span>\n<span class=\"token comment\">// 0 &lt;= height[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack </span>\n<span class=\"token comment\">// 👍 19838 👎 279</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> leftMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rightMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> lower <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> lower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>lower <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-44","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-11T03:42:50.000Z","_content":"\n```java\n//Given an input string (s) and a pattern (p), implement wildcard pattern matchi\n//ng with support for '?' and '*' where: \n//\n// \n// '?' Matches any single character. \n// '*' Matches any sequence of characters (including the empty sequence). \n// \n//\n// The matching should cover the entire input string (not partial). \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"aa\", p = \"a\"\n//Output: false\n//Explanation: \"a\" does not match the entire string \"aa\".\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"aa\", p = \"*\"\n//Output: true\n//Explanation: '*' matches any sequence.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"cb\", p = \"?a\"\n//Output: false\n//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat\n//ch 'b'.\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= s.length, p.length <= 2000 \n// s contains only lowercase English letters. \n// p contains only lowercase English letters, '?' or '*'. \n// \n// Related Topics String Dynamic Programming Greedy Recursion \n// 👍 5102 👎 226\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        //dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况\n        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];\n        dp[0][0] = true;\n        for(int i = 1; i <= p.length(); i++){\n            if(p.charAt(i - 1) != '*'){\n                break;\n            }\n            dp[0][i] = dp[0][i - 1];\n        }\n\n        for(int sidx = 1; sidx <= s.length(); ++sidx){\n            for(int pidx = 1; pidx <= p.length(); ++pidx){\n                //若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]\n                if(p.charAt(pidx - 1) == s.charAt(sidx - 1) || p.charAt(pidx - 1) == '?'){\n                    dp[sidx][pidx] = dp[sidx - 1][pidx - 1];\n                }\n                //若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;\n                else if(p.charAt(pidx - 1) == '*'){\n                    dp[sidx][pidx] = dp[sidx][pidx - 1] || dp[sidx - 1][pidx];\n                }\n            }\n        }\n        return dp[s.length()][p.length()];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-44.md","raw":"---\ntitle: lc-44\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: 默认\ntags:\n  - 其他\ndate: 2022-07-11 11:42:50\n---\n\n```java\n//Given an input string (s) and a pattern (p), implement wildcard pattern matchi\n//ng with support for '?' and '*' where: \n//\n// \n// '?' Matches any single character. \n// '*' Matches any sequence of characters (including the empty sequence). \n// \n//\n// The matching should cover the entire input string (not partial). \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"aa\", p = \"a\"\n//Output: false\n//Explanation: \"a\" does not match the entire string \"aa\".\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"aa\", p = \"*\"\n//Output: true\n//Explanation: '*' matches any sequence.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"cb\", p = \"?a\"\n//Output: false\n//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat\n//ch 'b'.\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= s.length, p.length <= 2000 \n// s contains only lowercase English letters. \n// p contains only lowercase English letters, '?' or '*'. \n// \n// Related Topics String Dynamic Programming Greedy Recursion \n// 👍 5102 👎 226\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        //dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况\n        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];\n        dp[0][0] = true;\n        for(int i = 1; i <= p.length(); i++){\n            if(p.charAt(i - 1) != '*'){\n                break;\n            }\n            dp[0][i] = dp[0][i - 1];\n        }\n\n        for(int sidx = 1; sidx <= s.length(); ++sidx){\n            for(int pidx = 1; pidx <= p.length(); ++pidx){\n                //若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]\n                if(p.charAt(pidx - 1) == s.charAt(sidx - 1) || p.charAt(pidx - 1) == '?'){\n                    dp[sidx][pidx] = dp[sidx - 1][pidx - 1];\n                }\n                //若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;\n                else if(p.charAt(pidx - 1) == '*'){\n                    dp[sidx][pidx] = dp[sidx][pidx - 1] || dp[sidx - 1][pidx];\n                }\n            }\n        }\n        return dp[s.length()][p.length()];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-44","published":1,"updated":"2022-07-11T12:15:21.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5gpjvcx000038uuhfoaadr9","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an input string (s) and a pattern (p), implement wildcard pattern matchi</span>\n<span class=\"token comment\">//ng with support for '?' and '*' where: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// '?' Matches any single character. </span>\n<span class=\"token comment\">// '*' Matches any sequence of characters (including the empty sequence). </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The matching should cover the entire input string (not partial). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: \"a\" does not match the entire string \"aa\".</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"*\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: '*' matches any sequence.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"cb\", p = \"?a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat</span>\n<span class=\"token comment\">//ch 'b'.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= s.length, p.length &lt;= 2000 </span>\n<span class=\"token comment\">// s contains only lowercase English letters. </span>\n<span class=\"token comment\">// p contains only lowercase English letters, '?' or '*'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Greedy Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 226</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> sidx <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>sidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pidx <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an input string (s) and a pattern (p), implement wildcard pattern matchi</span>\n<span class=\"token comment\">//ng with support for '?' and '*' where: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// '?' Matches any single character. </span>\n<span class=\"token comment\">// '*' Matches any sequence of characters (including the empty sequence). </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The matching should cover the entire input string (not partial). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: \"a\" does not match the entire string \"aa\".</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"*\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: '*' matches any sequence.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"cb\", p = \"?a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat</span>\n<span class=\"token comment\">//ch 'b'.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= s.length, p.length &lt;= 2000 </span>\n<span class=\"token comment\">// s contains only lowercase English letters. </span>\n<span class=\"token comment\">// p contains only lowercase English letters, '?' or '*'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Greedy Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 226</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> sidx <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>sidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pidx <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-46","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-12T02:30:28.000Z","_content":"\n```java\n//Given an array nums of distinct integers, return all the possible permutations\n//. You can return the answer in any order. \n//\n// \n// Example 1: \n// Input: nums = [1,2,3]\n//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n// Example 2: \n// Input: nums = [0,1]\n//Output: [[0,1],[1,0]]\n// Example 3: \n// Input: nums = [1]\n//Output: [[1]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 6 \n// -10 <= nums[i] <= 10 \n// All the integers of nums are unique. \n// \n// Related Topics Array Backtracking \n// 👍 11542 👎 205\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> results = new ArrayList<>();\n        List<Integer> curResult = new ArrayList<>();\n        getNext(results, curResult, new boolean[nums.length], nums);\n        return results;\n    }\n\n    private void getNext(List<List<Integer>> results, List<Integer> curResult, boolean[] visited, int[] nums) {\n        if (curResult.size() == nums.length) {\n            List<Integer> oneR = new ArrayList<>(curResult);\n            results.add(oneR);\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            if (!visited[i]) {\n                curResult.add(nums[i]);\n                visited[i] = true;\n                getNext(results, curResult, visited, nums);\n                curResult.remove(curResult.size() - 1);\n                visited[i] = false;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-46.md","raw":"---\ntitle: lc-46\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-12 10:30:28\n---\n\n```java\n//Given an array nums of distinct integers, return all the possible permutations\n//. You can return the answer in any order. \n//\n// \n// Example 1: \n// Input: nums = [1,2,3]\n//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n// Example 2: \n// Input: nums = [0,1]\n//Output: [[0,1],[1,0]]\n// Example 3: \n// Input: nums = [1]\n//Output: [[1]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 6 \n// -10 <= nums[i] <= 10 \n// All the integers of nums are unique. \n// \n// Related Topics Array Backtracking \n// 👍 11542 👎 205\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> results = new ArrayList<>();\n        List<Integer> curResult = new ArrayList<>();\n        getNext(results, curResult, new boolean[nums.length], nums);\n        return results;\n    }\n\n    private void getNext(List<List<Integer>> results, List<Integer> curResult, boolean[] visited, int[] nums) {\n        if (curResult.size() == nums.length) {\n            List<Integer> oneR = new ArrayList<>(curResult);\n            results.add(oneR);\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            if (!visited[i]) {\n                curResult.add(nums[i]);\n                visited[i] = true;\n                getNext(results, curResult, visited, nums);\n                curResult.remove(curResult.size() - 1);\n                visited[i] = false;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-46","published":1,"updated":"2022-07-12T02:51:17.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hku85n0000k0uu4vy14tx5","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums of distinct integers, return all the possible permutations</span>\n<span class=\"token comment\">//. You can return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [0,1]</span>\n<span class=\"token comment\">//Output: [[0,1],[1,0]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1]</span>\n<span class=\"token comment\">//Output: [[1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 6 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the integers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking </span>\n<span class=\"token comment\">// 👍 11542 👎 205</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> results<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums of distinct integers, return all the possible permutations</span>\n<span class=\"token comment\">//. You can return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [0,1]</span>\n<span class=\"token comment\">//Output: [[0,1],[1,0]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1]</span>\n<span class=\"token comment\">//Output: [[1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 6 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the integers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking </span>\n<span class=\"token comment\">// 👍 11542 👎 205</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> results<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-48","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-13T03:20:28.000Z","_content":"\n```java\n//You are given an n x n 2D matrix representing an image, rotate the image by 90\n// degrees (clockwise). \n//\n// You have to rotate the image in-place, which means you have to modify the inp\n//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [[7,4,1],[8,5,2],[9,6,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n// \n//\n// \n// Constraints: \n//\n// \n// n == matrix.length == matrix[i].length \n// 1 <= n <= 20 \n// -1000 <= matrix[i][j] <= 1000 \n// \n// Related Topics Array Math Matrix \n// 👍 10162 👎 521\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void rotate(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return;\n        }\n\n        int i = 0, j = matrix.length - 1;\n\n        while (i < j) {\n            for (int k = 0; k < matrix[0].length; k++) {\n                int temp = matrix[i][k];\n                matrix[i][k] = matrix[j][k];\n                matrix[j][k] = temp;\n            }\n            i++;\n            j--;\n        }\n\n        for (i = 1; i < matrix.length; i++) {\n            for (j = 0; j < i; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-48.md","raw":"---\ntitle: lc-48\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-13 11:20:28\n---\n\n```java\n//You are given an n x n 2D matrix representing an image, rotate the image by 90\n// degrees (clockwise). \n//\n// You have to rotate the image in-place, which means you have to modify the inp\n//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [[7,4,1],[8,5,2],[9,6,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n// \n//\n// \n// Constraints: \n//\n// \n// n == matrix.length == matrix[i].length \n// 1 <= n <= 20 \n// -1000 <= matrix[i][j] <= 1000 \n// \n// Related Topics Array Math Matrix \n// 👍 10162 👎 521\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void rotate(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return;\n        }\n\n        int i = 0, j = matrix.length - 1;\n\n        while (i < j) {\n            for (int k = 0; k < matrix[0].length; k++) {\n                int temp = matrix[i][k];\n                matrix[i][k] = matrix[j][k];\n                matrix[j][k] = temp;\n            }\n            i++;\n            j--;\n        }\n\n        for (i = 1; i < matrix.length; i++) {\n            for (j = 0; j < i; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-48","published":1,"updated":"2022-07-13T08:17:51.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5jby6vz00000cuu9v4r1t1i","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an n x n 2D matrix representing an image, rotate the image by 90</span>\n<span class=\"token comment\">// degrees (clockwise). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You have to rotate the image in-place, which means you have to modify the inp</span>\n<span class=\"token comment\">//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [[7,4,1],[8,5,2],[9,6,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span>\n<span class=\"token comment\">//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == matrix.length == matrix[i].length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 20 </span>\n<span class=\"token comment\">// -1000 &lt;= matrix[i][j] &lt;= 1000 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math Matrix </span>\n<span class=\"token comment\">// 👍 10162 👎 521</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an n x n 2D matrix representing an image, rotate the image by 90</span>\n<span class=\"token comment\">// degrees (clockwise). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You have to rotate the image in-place, which means you have to modify the inp</span>\n<span class=\"token comment\">//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [[7,4,1],[8,5,2],[9,6,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span>\n<span class=\"token comment\">//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == matrix.length == matrix[i].length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 20 </span>\n<span class=\"token comment\">// -1000 &lt;= matrix[i][j] &lt;= 1000 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math Matrix </span>\n<span class=\"token comment\">// 👍 10162 👎 521</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-49","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-18T11:53:03.000Z","_content":"\n```java\n//Given an array of strings strs, group the anagrams together. You can return th\n//e answer in any order. \n//\n// An Anagram is a word or phrase formed by rearranging the letters of a differe\n//nt word or phrase, typically using all the original letters exactly once. \n//\n// \n// Example 1: \n// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n// Example 2: \n// Input: strs = [\"\"]\n//Output: [[\"\"]]\n// Example 3: \n// Input: strs = [\"a\"]\n//Output: [[\"a\"]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= strs.length <= 104 \n// 0 <= strs[i].length <= 100 \n// strs[i] consists of lowercase English letters. \n// \n// Related Topics Array Hash Table String Sorting \n// 👍 10416 👎 338\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> resultMap = new HashMap<>();\n\n        for (String str : strs) {\n            String key = generateKey(str);\n            resultMap.putIfAbsent(key, new ArrayList<>());\n            resultMap.get(key).add(str);\n        }\n\n        return new ArrayList<>(resultMap.values());\n    }\n\n    private String generateKey(String str) {\n        int[] nums = new int[26];\n\n        for (char ch : str.toCharArray()) {\n            nums[ch - 'a']++;\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < 26; i++) {\n            stringBuilder.append('a' + i).append(nums[i]);\n        }\n\n        return stringBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-49.md","raw":"---\ntitle: lc-49\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-18 19:53:03\n---\n\n```java\n//Given an array of strings strs, group the anagrams together. You can return th\n//e answer in any order. \n//\n// An Anagram is a word or phrase formed by rearranging the letters of a differe\n//nt word or phrase, typically using all the original letters exactly once. \n//\n// \n// Example 1: \n// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n// Example 2: \n// Input: strs = [\"\"]\n//Output: [[\"\"]]\n// Example 3: \n// Input: strs = [\"a\"]\n//Output: [[\"a\"]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= strs.length <= 104 \n// 0 <= strs[i].length <= 100 \n// strs[i] consists of lowercase English letters. \n// \n// Related Topics Array Hash Table String Sorting \n// 👍 10416 👎 338\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> resultMap = new HashMap<>();\n\n        for (String str : strs) {\n            String key = generateKey(str);\n            resultMap.putIfAbsent(key, new ArrayList<>());\n            resultMap.get(key).add(str);\n        }\n\n        return new ArrayList<>(resultMap.values());\n    }\n\n    private String generateKey(String str) {\n        int[] nums = new int[26];\n\n        for (char ch : str.toCharArray()) {\n            nums[ch - 'a']++;\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < 26; i++) {\n            stringBuilder.append('a' + i).append(nums[i]);\n        }\n\n        return stringBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-49","published":1,"updated":"2022-07-18T12:12:06.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5qpikpq00001cuu8ikjdiyt","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of strings strs, group the anagrams together. You can return th</span>\n<span class=\"token comment\">//e answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An Anagram is a word or phrase formed by rearranging the letters of a differe</span>\n<span class=\"token comment\">//nt word or phrase, typically using all the original letters exactly once. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]</span>\n<span class=\"token comment\">//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: strs = [\"\"]</span>\n<span class=\"token comment\">//Output: [[\"\"]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: strs = [\"a\"]</span>\n<span class=\"token comment\">//Output: [[\"a\"]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= strs.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= strs[i].length &lt;= 100 </span>\n<span class=\"token comment\">// strs[i] consists of lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table String Sorting </span>\n<span class=\"token comment\">// 👍 10416 👎 338</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of strings strs, group the anagrams together. You can return th</span>\n<span class=\"token comment\">//e answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An Anagram is a word or phrase formed by rearranging the letters of a differe</span>\n<span class=\"token comment\">//nt word or phrase, typically using all the original letters exactly once. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]</span>\n<span class=\"token comment\">//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: strs = [\"\"]</span>\n<span class=\"token comment\">//Output: [[\"\"]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: strs = [\"a\"]</span>\n<span class=\"token comment\">//Output: [[\"a\"]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= strs.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= strs[i].length &lt;= 100 </span>\n<span class=\"token comment\">// strs[i] consists of lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table String Sorting </span>\n<span class=\"token comment\">// 👍 10416 👎 338</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-50","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-19T02:34:30.000Z","_content":"\n```java\n//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). \n//\n// \n// Example 1: \n//\n// \n//Input: x = 2.00000, n = 10\n//Output: 1024.00000\n// \n//\n// Example 2: \n//\n// \n//Input: x = 2.10000, n = 3\n//Output: 9.26100\n// \n//\n// Example 3: \n//\n// \n//Input: x = 2.00000, n = -2\n//Output: 0.25000\n//Explanation: 2-2 = 1/22 = 1/4 = 0.25\n// \n//\n// \n// Constraints: \n//\n// \n// -100.0 < x < 100.0 \n// -231 <= n <= 231-1 \n// -104 <= xn <= 104 \n// \n// Related Topics Math Recursion \n// 👍 5102 👎 5875\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double myPow(double x, int n) {\n        if (n == 0 || x == 1.0) {\n            return 1.0;\n        }\n\n        if (n == Integer.MIN_VALUE) {\n            if (x == -1.0) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        }\n\n        boolean isMinus = n < 0;\n\n        if (isMinus) {\n            n = -n;\n        }\n\n        double result = 1.0;\n\n        while (n > 0) {\n            int i = n & 0x01;\n\n            if (i == 1) {\n                result *= x;\n            }\n\n            x = x * x;\n            n = n >> 1;\n        }\n\n        if (isMinus) {\n            result = 1.0 / result;\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-50.md","raw":"---\ntitle: lc-50\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-19 10:34:30\n---\n\n```java\n//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). \n//\n// \n// Example 1: \n//\n// \n//Input: x = 2.00000, n = 10\n//Output: 1024.00000\n// \n//\n// Example 2: \n//\n// \n//Input: x = 2.10000, n = 3\n//Output: 9.26100\n// \n//\n// Example 3: \n//\n// \n//Input: x = 2.00000, n = -2\n//Output: 0.25000\n//Explanation: 2-2 = 1/22 = 1/4 = 0.25\n// \n//\n// \n// Constraints: \n//\n// \n// -100.0 < x < 100.0 \n// -231 <= n <= 231-1 \n// -104 <= xn <= 104 \n// \n// Related Topics Math Recursion \n// 👍 5102 👎 5875\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double myPow(double x, int n) {\n        if (n == 0 || x == 1.0) {\n            return 1.0;\n        }\n\n        if (n == Integer.MIN_VALUE) {\n            if (x == -1.0) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        }\n\n        boolean isMinus = n < 0;\n\n        if (isMinus) {\n            n = -n;\n        }\n\n        double result = 1.0;\n\n        while (n > 0) {\n            int i = n & 0x01;\n\n            if (i == 1) {\n                result *= x;\n            }\n\n            x = x * x;\n            n = n >> 1;\n        }\n\n        if (isMinus) {\n            result = 1.0 / result;\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-50","published":1,"updated":"2022-07-19T06:10:58.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5rs28dj0000gsuu55xmdapd","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = 10</span>\n<span class=\"token comment\">//Output: 1024.00000</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.10000, n = 3</span>\n<span class=\"token comment\">//Output: 9.26100</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = -2</span>\n<span class=\"token comment\">//Output: 0.25000</span>\n<span class=\"token comment\">//Explanation: 2-2 = 1/22 = 1/4 = 0.25</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -100.0 &lt; x &lt; 100.0 </span>\n<span class=\"token comment\">// -231 &lt;= n &lt;= 231-1 </span>\n<span class=\"token comment\">// -104 &lt;= xn &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 5875</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">myPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span> isMinus <span class=\"token operator\">=</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">*=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = 10</span>\n<span class=\"token comment\">//Output: 1024.00000</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.10000, n = 3</span>\n<span class=\"token comment\">//Output: 9.26100</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = -2</span>\n<span class=\"token comment\">//Output: 0.25000</span>\n<span class=\"token comment\">//Explanation: 2-2 = 1/22 = 1/4 = 0.25</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -100.0 &lt; x &lt; 100.0 </span>\n<span class=\"token comment\">// -231 &lt;= n &lt;= 231-1 </span>\n<span class=\"token comment\">// -104 &lt;= xn &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 5875</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">myPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span> isMinus <span class=\"token operator\">=</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">*=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-53","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-20T05:05:26.000Z","_content":"\n```java\n//Given an integer array nums, find the contiguous subarray (containing at least\n// one number) which has the largest sum and return its sum. \n//\n// A subarray is a contiguous part of an array. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n//Output: 6\n//Explanation: [4,-1,2,1] has the largest sum = 6.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [1]\n//Output: 1\n// \n//\n// Example 3: \n//\n// \n//Input: nums = [5,4,-1,7,8]\n//Output: 23\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 105 \n// -104 <= nums[i] <= 104 \n// \n//\n// \n// Follow up: If you have figured out the O(n) solution, try coding another solu\n//tion using the divide and conquer approach, which is more subtle. \n// Related Topics Array Divide and Conquer Dynamic Programming \n// 👍 22902 👎 1114\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        int result = Integer.MIN_VALUE;\n        int curSum = 0;\n\n        for (int num : nums) {\n            curSum += num;\n\n            if (curSum > result) {\n                result = curSum;\n            }\n\n            if (curSum < 0) {\n                curSum = 0;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-53.md","raw":"---\ntitle: lc-53\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-20 13:05:26\n---\n\n```java\n//Given an integer array nums, find the contiguous subarray (containing at least\n// one number) which has the largest sum and return its sum. \n//\n// A subarray is a contiguous part of an array. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n//Output: 6\n//Explanation: [4,-1,2,1] has the largest sum = 6.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [1]\n//Output: 1\n// \n//\n// Example 3: \n//\n// \n//Input: nums = [5,4,-1,7,8]\n//Output: 23\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 105 \n// -104 <= nums[i] <= 104 \n// \n//\n// \n// Follow up: If you have figured out the O(n) solution, try coding another solu\n//tion using the divide and conquer approach, which is more subtle. \n// Related Topics Array Divide and Conquer Dynamic Programming \n// 👍 22902 👎 1114\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        int result = Integer.MIN_VALUE;\n        int curSum = 0;\n\n        for (int num : nums) {\n            curSum += num;\n\n            if (curSum > result) {\n                result = curSum;\n            }\n\n            if (curSum < 0) {\n                curSum = 0;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-53","published":1,"updated":"2022-07-20T07:33:00.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5tbvntu0000d0uucznt6uj1","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, find the contiguous subarray (containing at least</span>\n<span class=\"token comment\">// one number) which has the largest sum and return its sum. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A subarray is a contiguous part of an array. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: [4,-1,2,1] has the largest sum = 6.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [5,4,-1,7,8]</span>\n<span class=\"token comment\">//Output: 23</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: If you have figured out the O(n) solution, try coding another solu</span>\n<span class=\"token comment\">//tion using the divide and conquer approach, which is more subtle. </span>\n<span class=\"token comment\">// Related Topics Array Divide and Conquer Dynamic Programming </span>\n<span class=\"token comment\">// 👍 22902 👎 1114</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            curSum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> curSum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, find the contiguous subarray (containing at least</span>\n<span class=\"token comment\">// one number) which has the largest sum and return its sum. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A subarray is a contiguous part of an array. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: [4,-1,2,1] has the largest sum = 6.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [5,4,-1,7,8]</span>\n<span class=\"token comment\">//Output: 23</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: If you have figured out the O(n) solution, try coding another solu</span>\n<span class=\"token comment\">//tion using the divide and conquer approach, which is more subtle. </span>\n<span class=\"token comment\">// Related Topics Array Divide and Conquer Dynamic Programming </span>\n<span class=\"token comment\">// 👍 22902 👎 1114</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            curSum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">=</span> curSum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-54","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-21T02:05:40.000Z","_content":"\n```java\n//Given an m x n matrix, return all elements of the matrix in spiral order.\n//\n//\n// Example 1:\n//\n//\n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [1,2,3,6,9,8,7,4,5]\n//\n//\n// Example 2:\n//\n//\n//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n//Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n//\n//\n//\n// Constraints:\n//\n//\n// m == matrix.length\n// n == matrix[i].length\n// 1 <= m, n <= 10\n// -100 <= matrix[i][j] <= 100\n//\n// Related Topics Array Matrix Simulation\n// 👍 7991 👎 873\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        int[][] dirs = {{0,1}, {1,0}, {0, -1}, {-1, 0}};\n        if (matrix == null || matrix[0] == null || matrix.length == 0 || matrix[0].length == 0) {\n            return null;\n        }\n\n        boolean[][] visited = new boolean[matrix.length][matrix[0].length];\n        int curDirIndex = 0;\n\n        int i = 0, j = 0;\n        List<Integer> result = new ArrayList<>();\n\n        while (i >= 0 && i < matrix.length && j >= 0 && j < matrix[0].length && !visited[i][j]) {\n            result.add(matrix[i][j]);\n            visited[i][j] = true;\n            curDirIndex = getNextDirIndex(curDirIndex, i, j, matrix, visited);\n            i = i + dirs[curDirIndex][0];\n            j = j + dirs[curDirIndex][1];\n        }\n        return result;\n    }\n\n    private int getNextDirIndex(int curDirIndex, int i, int j, int[][] matrix, boolean[][] visited) {\n        if (curDirIndex == 0 && (j == matrix[0].length - 1 || visited[i][j + 1])) {\n            return 1;\n        } else if (curDirIndex == 1 && (i == matrix.length - 1 || visited[i + 1][j])) {\n            return 2;\n        } else if (curDirIndex == 2 && (j == 0 || visited[i][j - 1])) {\n            return 3;\n        } else if (curDirIndex == 3 && (i == 0 || visited[i - 1][j])) {\n            return 0;\n        } else {\n            return curDirIndex;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-54.md","raw":"---\ntitle: lc-54\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-21 10:05:40\n---\n\n```java\n//Given an m x n matrix, return all elements of the matrix in spiral order.\n//\n//\n// Example 1:\n//\n//\n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [1,2,3,6,9,8,7,4,5]\n//\n//\n// Example 2:\n//\n//\n//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n//Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n//\n//\n//\n// Constraints:\n//\n//\n// m == matrix.length\n// n == matrix[i].length\n// 1 <= m, n <= 10\n// -100 <= matrix[i][j] <= 100\n//\n// Related Topics Array Matrix Simulation\n// 👍 7991 👎 873\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        int[][] dirs = {{0,1}, {1,0}, {0, -1}, {-1, 0}};\n        if (matrix == null || matrix[0] == null || matrix.length == 0 || matrix[0].length == 0) {\n            return null;\n        }\n\n        boolean[][] visited = new boolean[matrix.length][matrix[0].length];\n        int curDirIndex = 0;\n\n        int i = 0, j = 0;\n        List<Integer> result = new ArrayList<>();\n\n        while (i >= 0 && i < matrix.length && j >= 0 && j < matrix[0].length && !visited[i][j]) {\n            result.add(matrix[i][j]);\n            visited[i][j] = true;\n            curDirIndex = getNextDirIndex(curDirIndex, i, j, matrix, visited);\n            i = i + dirs[curDirIndex][0];\n            j = j + dirs[curDirIndex][1];\n        }\n        return result;\n    }\n\n    private int getNextDirIndex(int curDirIndex, int i, int j, int[][] matrix, boolean[][] visited) {\n        if (curDirIndex == 0 && (j == matrix[0].length - 1 || visited[i][j + 1])) {\n            return 1;\n        } else if (curDirIndex == 1 && (i == matrix.length - 1 || visited[i + 1][j])) {\n            return 2;\n        } else if (curDirIndex == 2 && (j == 0 || visited[i][j - 1])) {\n            return 3;\n        } else if (curDirIndex == 3 && (i == 0 || visited[i - 1][j])) {\n            return 0;\n        } else {\n            return curDirIndex;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-54","published":1,"updated":"2022-07-21T05:55:46.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5umejki0000qcuufs2f8g5x","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n matrix, return all elements of the matrix in spiral order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [1,2,3,6,9,8,7,4,5]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span>\n<span class=\"token comment\">//Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// m == matrix.length</span>\n<span class=\"token comment\">// n == matrix[i].length</span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 10</span>\n<span class=\"token comment\">// -100 &lt;= matrix[i][j] &lt;= 100</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Matrix Simulation</span>\n<span class=\"token comment\">// 👍 7991 👎 873</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curDirIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            curDirIndex <span class=\"token operator\">=</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span>curDirIndex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            j <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curDirIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> curDirIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n matrix, return all elements of the matrix in spiral order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [1,2,3,6,9,8,7,4,5]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span>\n<span class=\"token comment\">//Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// m == matrix.length</span>\n<span class=\"token comment\">// n == matrix[i].length</span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 10</span>\n<span class=\"token comment\">// -100 &lt;= matrix[i][j] &lt;= 100</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Matrix Simulation</span>\n<span class=\"token comment\">// 👍 7991 👎 873</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curDirIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            curDirIndex <span class=\"token operator\">=</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span>curDirIndex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            j <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curDirIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> curDirIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-55","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-22T02:38:46.000Z","_content":"\n```java\n//You are given an integer array nums. You are initially positioned at the array\n//'s first index, and each element in the array represents your maximum jump lengt\n//h at that position. \n//\n// Return true if you can reach the last index, or false otherwise. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,3,1,1,4]\n//Output: true\n//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [3,2,1,0,4]\n//Output: false\n//Explanation: You will always arrive at index 3 no matter what. Its maximum jum\n//p length is 0, which makes it impossible to reach the last index.\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 104 \n// 0 <= nums[i] <= 105 \n// \n// Related Topics Array Dynamic Programming Greedy \n// 👍 12064 👎 656\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean canJump(int[] nums) {\n        if (nums == null) {\n            return false;\n        }\n\n        if (nums.length == 0) {\n            return true;\n        }\n\n        int[] maxJump = new int[nums.length];\n\n        for (int i = 0; i < nums.length; i++) {\n            maxJump[i] = i + nums[i];\n        }\n\n        Boolean[] canJumpBool = new Boolean[nums.length];\n\n        return canJumpInner(maxJump, canJumpBool, nums.length - 1);\n    }\n\n\n    private boolean canJumpInner(int[] maxJump, Boolean[] canJumpBool, int index) {\n        if (canJumpBool[index] != null) {\n            return canJumpBool[index];\n        }\n\n        if (index == 0) {\n            canJumpBool[index] = true;\n            return true;\n        }\n\n        for (int i = 0; i < index; i++) {\n            if (maxJump[i] >= index && canJumpInner(maxJump, canJumpBool, i)) {\n                canJumpBool[index] = true;\n                return true;\n            }\n        }\n\n        canJumpBool[index] = false;\n        return false;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-55.md","raw":"---\ntitle: lc-55\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-22 10:38:46\n---\n\n```java\n//You are given an integer array nums. You are initially positioned at the array\n//'s first index, and each element in the array represents your maximum jump lengt\n//h at that position. \n//\n// Return true if you can reach the last index, or false otherwise. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,3,1,1,4]\n//Output: true\n//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [3,2,1,0,4]\n//Output: false\n//Explanation: You will always arrive at index 3 no matter what. Its maximum jum\n//p length is 0, which makes it impossible to reach the last index.\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 104 \n// 0 <= nums[i] <= 105 \n// \n// Related Topics Array Dynamic Programming Greedy \n// 👍 12064 👎 656\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean canJump(int[] nums) {\n        if (nums == null) {\n            return false;\n        }\n\n        if (nums.length == 0) {\n            return true;\n        }\n\n        int[] maxJump = new int[nums.length];\n\n        for (int i = 0; i < nums.length; i++) {\n            maxJump[i] = i + nums[i];\n        }\n\n        Boolean[] canJumpBool = new Boolean[nums.length];\n\n        return canJumpInner(maxJump, canJumpBool, nums.length - 1);\n    }\n\n\n    private boolean canJumpInner(int[] maxJump, Boolean[] canJumpBool, int index) {\n        if (canJumpBool[index] != null) {\n            return canJumpBool[index];\n        }\n\n        if (index == 0) {\n            canJumpBool[index] = true;\n            return true;\n        }\n\n        for (int i = 0; i < index; i++) {\n            if (maxJump[i] >= index && canJumpInner(maxJump, canJumpBool, i)) {\n                canJumpBool[index] = true;\n                return true;\n            }\n        }\n\n        canJumpBool[index] = false;\n        return false;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-55","published":1,"updated":"2022-07-26T03:21:26.571Z","_id":"cl607qp000000ckuue2yne6on","comments":1,"layout":"post","photos":[],"link":"","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an integer array nums. You are initially positioned at the array</span>\n<span class=\"token comment\">//'s first index, and each element in the array represents your maximum jump lengt</span>\n<span class=\"token comment\">//h at that position. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return true if you can reach the last index, or false otherwise. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,3,1,1,4]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [3,2,1,0,4]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: You will always arrive at index 3 no matter what. Its maximum jum</span>\n<span class=\"token comment\">//p length is 0, which makes it impossible to reach the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Dynamic Programming Greedy </span>\n<span class=\"token comment\">// 👍 12064 👎 656</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> index <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an integer array nums. You are initially positioned at the array</span>\n<span class=\"token comment\">//'s first index, and each element in the array represents your maximum jump lengt</span>\n<span class=\"token comment\">//h at that position. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return true if you can reach the last index, or false otherwise. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,3,1,1,4]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [3,2,1,0,4]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: You will always arrive at index 3 no matter what. Its maximum jum</span>\n<span class=\"token comment\">//p length is 0, which makes it impossible to reach the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Dynamic Programming Greedy </span>\n<span class=\"token comment\">// 👍 12064 👎 656</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> index <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-56","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-26T03:20:51.000Z","_content":"\n```java\n//Given an array of intervals where intervals[i] = [starti, endi], merge all ove\n//rlapping intervals, and return an array of the non-overlapping intervals that co\n//ver all the intervals in the input.\n//\n//\n// Example 1:\n//\n//\n//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n//Output: [[1,6],[8,10],[15,18]]\n//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n//\n//\n// Example 2:\n//\n//\n//Input: intervals = [[1,4],[4,5]]\n//Output: [[1,5]]\n//Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n//\n//\n//\n// Constraints:\n//\n//\n// 1 <= intervals.length <= 104\n// intervals[i].length == 2\n// 0 <= starti <= endi <= 104\n//\n// Related Topics Array Sorting\n// 👍 14993 👎 549\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals == null || intervals.length <= 1) {\n            return intervals;\n        }\n\n        Arrays.sort(intervals, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] arr1, int[] arr2) {\n                if (arr1[0] < arr2[0]) {\n                    return -1;\n                } else if (arr1[0] > arr2[0]) {\n                    return 1;\n                } else {\n                    return arr1[1] - arr2[1];\n                }\n            }\n        });\n\n        List<int[]> resultList = new ArrayList<>();\n        int[] curMergedInterval = null;\n\n        for (int[] interval : intervals) {\n            if (curMergedInterval == null) {\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n                continue;\n            }\n\n            if (interval[0] <= curMergedInterval[1]) {\n                if (interval[1] > curMergedInterval[1]) {\n                    curMergedInterval[1] = interval[1];\n                }\n            } else {\n                resultList.add(curMergedInterval);\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n            }\n        }\n\n        resultList.add(curMergedInterval);\n        return resultList.toArray(new int[resultList.size()][]);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-56.md","raw":"---\ntitle: lc-56\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-26 11:20:51\n---\n\n```java\n//Given an array of intervals where intervals[i] = [starti, endi], merge all ove\n//rlapping intervals, and return an array of the non-overlapping intervals that co\n//ver all the intervals in the input.\n//\n//\n// Example 1:\n//\n//\n//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n//Output: [[1,6],[8,10],[15,18]]\n//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n//\n//\n// Example 2:\n//\n//\n//Input: intervals = [[1,4],[4,5]]\n//Output: [[1,5]]\n//Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n//\n//\n//\n// Constraints:\n//\n//\n// 1 <= intervals.length <= 104\n// intervals[i].length == 2\n// 0 <= starti <= endi <= 104\n//\n// Related Topics Array Sorting\n// 👍 14993 👎 549\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals == null || intervals.length <= 1) {\n            return intervals;\n        }\n\n        Arrays.sort(intervals, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] arr1, int[] arr2) {\n                if (arr1[0] < arr2[0]) {\n                    return -1;\n                } else if (arr1[0] > arr2[0]) {\n                    return 1;\n                } else {\n                    return arr1[1] - arr2[1];\n                }\n            }\n        });\n\n        List<int[]> resultList = new ArrayList<>();\n        int[] curMergedInterval = null;\n\n        for (int[] interval : intervals) {\n            if (curMergedInterval == null) {\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n                continue;\n            }\n\n            if (interval[0] <= curMergedInterval[1]) {\n                if (interval[1] > curMergedInterval[1]) {\n                    curMergedInterval[1] = interval[1];\n                }\n            } else {\n                resultList.add(curMergedInterval);\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n            }\n        }\n\n        resultList.add(curMergedInterval);\n        return resultList.toArray(new int[resultList.size()][]);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-56","published":1,"updated":"2022-07-26T13:15:26.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl627avnw000048uu1p4q6m19","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of intervals where intervals[i] = [starti, endi], merge all ove</span>\n<span class=\"token comment\">//rlapping intervals, and return an array of the non-overlapping intervals that co</span>\n<span class=\"token comment\">//ver all the intervals in the input.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Output: [[1,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,4],[4,5]]</span>\n<span class=\"token comment\">//Output: [[1,5]]</span>\n<span class=\"token comment\">//Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 1 &lt;= intervals.length &lt;= 104</span>\n<span class=\"token comment\">// intervals[i].length == 2</span>\n<span class=\"token comment\">// 0 &lt;= starti &lt;= endi &lt;= 104</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Sorting</span>\n<span class=\"token comment\">// 👍 14993 👎 549</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> intervals<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interval <span class=\"token operator\">:</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMergedInterval <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of intervals where intervals[i] = [starti, endi], merge all ove</span>\n<span class=\"token comment\">//rlapping intervals, and return an array of the non-overlapping intervals that co</span>\n<span class=\"token comment\">//ver all the intervals in the input.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Output: [[1,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,4],[4,5]]</span>\n<span class=\"token comment\">//Output: [[1,5]]</span>\n<span class=\"token comment\">//Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 1 &lt;= intervals.length &lt;= 104</span>\n<span class=\"token comment\">// intervals[i].length == 2</span>\n<span class=\"token comment\">// 0 &lt;= starti &lt;= endi &lt;= 104</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Sorting</span>\n<span class=\"token comment\">// 👍 14993 👎 549</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> intervals<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interval <span class=\"token operator\">:</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMergedInterval <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-62","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-27T08:10:08.000Z","_content":"\n```java\n//There is a robot on an m x n grid. The robot is initially located at the top-l\n//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne\n//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an\n//y point in time. \n//\n// Given the two integers m and n, return the number of possible unique paths th\n//at the robot can take to reach the bottom-right corner. \n//\n// The test cases are generated so that the answer will be less than or equal to\n// 2 * 109. \n//\n// \n// Example 1: \n//\n// \n//Input: m = 3, n = 7\n//Output: 28\n// \n//\n// Example 2: \n//\n// \n//Input: m = 3, n = 2\n//Output: 3\n//Explanation: From the top-left corner, there are a total of 3 ways to reach th\n//e bottom-right corner:\n//1. Right -> Down -> Down\n//2. Down -> Down -> Right\n//3. Down -> Right -> Down\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= m, n <= 100 \n// \n// Related Topics Math Dynamic Programming Combinatorics \n// 👍 10034 👎 316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n\n    public int uniquePaths(int m, int n) {\n        if (m <= 0 || n <= 0) {\n            return 0;\n        }\n        if (m == 1 || n == 1) {\n            return 1;\n        }\n\n        int[][] f = new int[m][n];\n\n        for (int i = 0; i < m; i++) {\n            f[i][0] = 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            f[0][i] = 1;\n        }\n\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n            }\n        }\n\n        return f[m - 1][n - 1];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-62.md","raw":"---\ntitle: lc-62\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-27 16:10:08\n---\n\n```java\n//There is a robot on an m x n grid. The robot is initially located at the top-l\n//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne\n//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an\n//y point in time. \n//\n// Given the two integers m and n, return the number of possible unique paths th\n//at the robot can take to reach the bottom-right corner. \n//\n// The test cases are generated so that the answer will be less than or equal to\n// 2 * 109. \n//\n// \n// Example 1: \n//\n// \n//Input: m = 3, n = 7\n//Output: 28\n// \n//\n// Example 2: \n//\n// \n//Input: m = 3, n = 2\n//Output: 3\n//Explanation: From the top-left corner, there are a total of 3 ways to reach th\n//e bottom-right corner:\n//1. Right -> Down -> Down\n//2. Down -> Down -> Right\n//3. Down -> Right -> Down\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= m, n <= 100 \n// \n// Related Topics Math Dynamic Programming Combinatorics \n// 👍 10034 👎 316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n\n    public int uniquePaths(int m, int n) {\n        if (m <= 0 || n <= 0) {\n            return 0;\n        }\n        if (m == 1 || n == 1) {\n            return 1;\n        }\n\n        int[][] f = new int[m][n];\n\n        for (int i = 0; i < m; i++) {\n            f[i][0] = 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            f[0][i] = 1;\n        }\n\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n            }\n        }\n\n        return f[m - 1][n - 1];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-62","published":1,"updated":"2022-07-27T09:15:14.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl63e5wbx0000jguu6w285jte","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is a robot on an m x n grid. The robot is initially located at the top-l</span>\n<span class=\"token comment\">//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne</span>\n<span class=\"token comment\">//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an</span>\n<span class=\"token comment\">//y point in time. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the two integers m and n, return the number of possible unique paths th</span>\n<span class=\"token comment\">//at the robot can take to reach the bottom-right corner. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The test cases are generated so that the answer will be less than or equal to</span>\n<span class=\"token comment\">// 2 * 109. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 7</span>\n<span class=\"token comment\">//Output: 28</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 2</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: From the top-left corner, there are a total of 3 ways to reach th</span>\n<span class=\"token comment\">//e bottom-right corner:</span>\n<span class=\"token comment\">//1. Right -&gt; Down -&gt; Down</span>\n<span class=\"token comment\">//2. Down -&gt; Down -&gt; Right</span>\n<span class=\"token comment\">//3. Down -&gt; Right -&gt; Down</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Combinatorics </span>\n<span class=\"token comment\">// 👍 10034 👎 316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">uniquePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is a robot on an m x n grid. The robot is initially located at the top-l</span>\n<span class=\"token comment\">//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne</span>\n<span class=\"token comment\">//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an</span>\n<span class=\"token comment\">//y point in time. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the two integers m and n, return the number of possible unique paths th</span>\n<span class=\"token comment\">//at the robot can take to reach the bottom-right corner. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The test cases are generated so that the answer will be less than or equal to</span>\n<span class=\"token comment\">// 2 * 109. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 7</span>\n<span class=\"token comment\">//Output: 28</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 2</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: From the top-left corner, there are a total of 3 ways to reach th</span>\n<span class=\"token comment\">//e bottom-right corner:</span>\n<span class=\"token comment\">//1. Right -> Down -> Down</span>\n<span class=\"token comment\">//2. Down -> Down -> Right</span>\n<span class=\"token comment\">//3. Down -> Right -> Down</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Combinatorics </span>\n<span class=\"token comment\">// 👍 10034 👎 316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">uniquePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-66","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-28T05:47:09.000Z","_content":"\n```java\n//You are given a large integer represented as an integer array digits, where ea\n//ch digits[i] is the ith digit of the integer. The digits are ordered from most s\n//ignificant to least significant in left-to-right order. The large integer does n\n//ot contain any leading 0's. \n//\n// Increment the large integer by one and return the resulting array of digits. \n//\n//\n// \n// Example 1: \n//\n// \n//Input: digits = [1,2,3]\n//Output: [1,2,4]\n//Explanation: The array represents the integer 123.\n//Incrementing by one gives 123 + 1 = 124.\n//Thus, the result should be [1,2,4].\n// \n//\n// Example 2: \n//\n// \n//Input: digits = [4,3,2,1]\n//Output: [4,3,2,2]\n//Explanation: The array represents the integer 4321.\n//Incrementing by one gives 4321 + 1 = 4322.\n//Thus, the result should be [4,3,2,2].\n// \n//\n// Example 3: \n//\n// \n//Input: digits = [9]\n//Output: [1,0]\n//Explanation: The array represents the integer 9.\n//Incrementing by one gives 9 + 1 = 10.\n//Thus, the result should be [1,0].\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= digits.length <= 100 \n// 0 <= digits[i] <= 9 \n// digits does not contain any leading 0's. \n// \n// Related Topics Array Math \n// 👍 4783 👎 4316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        if (digits == null || digits.length == 0) {\n            return digits;\n        }\n\n        boolean all9 = true;\n\n        for (int digit : digits) {\n            if (digit != 9) {\n                all9 = false;\n                break;\n            }\n        }\n\n        if (all9) {\n            int[] result = new int[digits.length + 1];\n\n            result[0] = 1;\n\n            for (int i = 0; i < digits.length; i++) {\n                result[i + 1] = 0;\n            }\n\n            return result;\n        } else {\n            boolean carry = true;\n            int i = digits.length - 1;\n            while (carry) {\n                digits[i] = digits[i] + 1;\n\n                if (digits[i] == 10) {\n                    digits[i] = 0;\n                } else {\n                    carry = false;\n                }\n                i--;\n            }\n\n            return digits;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-66.md","raw":"---\ntitle: lc-66\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-28 13:47:09\n---\n\n```java\n//You are given a large integer represented as an integer array digits, where ea\n//ch digits[i] is the ith digit of the integer. The digits are ordered from most s\n//ignificant to least significant in left-to-right order. The large integer does n\n//ot contain any leading 0's. \n//\n// Increment the large integer by one and return the resulting array of digits. \n//\n//\n// \n// Example 1: \n//\n// \n//Input: digits = [1,2,3]\n//Output: [1,2,4]\n//Explanation: The array represents the integer 123.\n//Incrementing by one gives 123 + 1 = 124.\n//Thus, the result should be [1,2,4].\n// \n//\n// Example 2: \n//\n// \n//Input: digits = [4,3,2,1]\n//Output: [4,3,2,2]\n//Explanation: The array represents the integer 4321.\n//Incrementing by one gives 4321 + 1 = 4322.\n//Thus, the result should be [4,3,2,2].\n// \n//\n// Example 3: \n//\n// \n//Input: digits = [9]\n//Output: [1,0]\n//Explanation: The array represents the integer 9.\n//Incrementing by one gives 9 + 1 = 10.\n//Thus, the result should be [1,0].\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= digits.length <= 100 \n// 0 <= digits[i] <= 9 \n// digits does not contain any leading 0's. \n// \n// Related Topics Array Math \n// 👍 4783 👎 4316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        if (digits == null || digits.length == 0) {\n            return digits;\n        }\n\n        boolean all9 = true;\n\n        for (int digit : digits) {\n            if (digit != 9) {\n                all9 = false;\n                break;\n            }\n        }\n\n        if (all9) {\n            int[] result = new int[digits.length + 1];\n\n            result[0] = 1;\n\n            for (int i = 0; i < digits.length; i++) {\n                result[i + 1] = 0;\n            }\n\n            return result;\n        } else {\n            boolean carry = true;\n            int i = digits.length - 1;\n            while (carry) {\n                digits[i] = digits[i] + 1;\n\n                if (digits[i] == 10) {\n                    digits[i] = 0;\n                } else {\n                    carry = false;\n                }\n                i--;\n            }\n\n            return digits;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-66","published":1,"updated":"2022-07-28T07:53:37.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl64qoprp0000y0uu197v6vvi","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given a large integer represented as an integer array digits, where ea</span>\n<span class=\"token comment\">//ch digits[i] is the ith digit of the integer. The digits are ordered from most s</span>\n<span class=\"token comment\">//ignificant to least significant in left-to-right order. The large integer does n</span>\n<span class=\"token comment\">//ot contain any leading 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Increment the large integer by one and return the resulting array of digits. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [1,2,3]</span>\n<span class=\"token comment\">//Output: [1,2,4]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 123.</span>\n<span class=\"token comment\">//Incrementing by one gives 123 + 1 = 124.</span>\n<span class=\"token comment\">//Thus, the result should be [1,2,4].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [4,3,2,1]</span>\n<span class=\"token comment\">//Output: [4,3,2,2]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 4321.</span>\n<span class=\"token comment\">//Incrementing by one gives 4321 + 1 = 4322.</span>\n<span class=\"token comment\">//Thus, the result should be [4,3,2,2].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [9]</span>\n<span class=\"token comment\">//Output: [1,0]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 9.</span>\n<span class=\"token comment\">//Incrementing by one gives 9 + 1 = 10.</span>\n<span class=\"token comment\">//Thus, the result should be [1,0].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= digits.length &lt;= 100 </span>\n<span class=\"token comment\">// 0 &lt;= digits[i] &lt;= 9 </span>\n<span class=\"token comment\">// digits does not contain any leading 0's. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math </span>\n<span class=\"token comment\">// 👍 4783 👎 4316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span> all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> digit <span class=\"token operator\">:</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>all9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">boolean</span> carry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    carry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given a large integer represented as an integer array digits, where ea</span>\n<span class=\"token comment\">//ch digits[i] is the ith digit of the integer. The digits are ordered from most s</span>\n<span class=\"token comment\">//ignificant to least significant in left-to-right order. The large integer does n</span>\n<span class=\"token comment\">//ot contain any leading 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Increment the large integer by one and return the resulting array of digits. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [1,2,3]</span>\n<span class=\"token comment\">//Output: [1,2,4]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 123.</span>\n<span class=\"token comment\">//Incrementing by one gives 123 + 1 = 124.</span>\n<span class=\"token comment\">//Thus, the result should be [1,2,4].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [4,3,2,1]</span>\n<span class=\"token comment\">//Output: [4,3,2,2]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 4321.</span>\n<span class=\"token comment\">//Incrementing by one gives 4321 + 1 = 4322.</span>\n<span class=\"token comment\">//Thus, the result should be [4,3,2,2].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [9]</span>\n<span class=\"token comment\">//Output: [1,0]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 9.</span>\n<span class=\"token comment\">//Incrementing by one gives 9 + 1 = 10.</span>\n<span class=\"token comment\">//Thus, the result should be [1,0].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= digits.length &lt;= 100 </span>\n<span class=\"token comment\">// 0 &lt;= digits[i] &lt;= 9 </span>\n<span class=\"token comment\">// digits does not contain any leading 0's. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math </span>\n<span class=\"token comment\">// 👍 4783 👎 4316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span> all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> digit <span class=\"token operator\">:</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>all9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">boolean</span> carry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    carry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-69","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-29T03:42:21.000Z","_content":"\n```java\n//Given a non-negative integer x, compute and return the square root of x. \n//\n// Since the return type is an integer, the decimal digits are truncated, and on\n//ly the integer part of the result is returned. \n//\n// Note: You are not allowed to use any built-in exponent function or operator, \n//such as pow(x, 0.5) or x ** 0.5. \n//\n// \n// Example 1: \n//\n// \n//Input: x = 4\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: x = 8\n//Output: 2\n//Explanation: The square root of 8 is 2.82842..., and since the decimal part is\n// truncated, 2 is returned. \n//\n// \n// Constraints: \n//\n// \n// 0 <= x <= 231 - 1 \n// \n// Related Topics Math Binary Search \n// 👍 4388 👎 3407\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int mySqrt(int x) {\n        if (x == 0 || x == 1) {\n            return x;\n        }\n\n        if (x < 4) {\n            return 1;\n        }\n\n        long start = 2l, end = x / 2;\n\n        while (start <= end) {\n            if (start == end) {\n                return (int)start;\n            }\n\n            if (start + 1 == end) {\n                if (end * end <= x) {\n                    return (int)end;\n                } else {\n                    return (int)start;\n                }\n            }\n\n            long mid = start + (end - start) / 2;\n\n            if (mid * mid == x) {\n                return (int)mid;\n            } else if (mid * mid < x) {\n                start = mid;\n            } else {\n                end = mid;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-69.md","raw":"---\ntitle: lc-69\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-29 11:42:21\n---\n\n```java\n//Given a non-negative integer x, compute and return the square root of x. \n//\n// Since the return type is an integer, the decimal digits are truncated, and on\n//ly the integer part of the result is returned. \n//\n// Note: You are not allowed to use any built-in exponent function or operator, \n//such as pow(x, 0.5) or x ** 0.5. \n//\n// \n// Example 1: \n//\n// \n//Input: x = 4\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: x = 8\n//Output: 2\n//Explanation: The square root of 8 is 2.82842..., and since the decimal part is\n// truncated, 2 is returned. \n//\n// \n// Constraints: \n//\n// \n// 0 <= x <= 231 - 1 \n// \n// Related Topics Math Binary Search \n// 👍 4388 👎 3407\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int mySqrt(int x) {\n        if (x == 0 || x == 1) {\n            return x;\n        }\n\n        if (x < 4) {\n            return 1;\n        }\n\n        long start = 2l, end = x / 2;\n\n        while (start <= end) {\n            if (start == end) {\n                return (int)start;\n            }\n\n            if (start + 1 == end) {\n                if (end * end <= x) {\n                    return (int)end;\n                } else {\n                    return (int)start;\n                }\n            }\n\n            long mid = start + (end - start) / 2;\n\n            if (mid * mid == x) {\n                return (int)mid;\n            } else if (mid * mid < x) {\n                start = mid;\n            } else {\n                end = mid;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-69","published":1,"updated":"2022-07-29T05:47:46.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl661mqo30000yguud2us6p2c","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a non-negative integer x, compute and return the square root of x. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since the return type is an integer, the decimal digits are truncated, and on</span>\n<span class=\"token comment\">//ly the integer part of the result is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: You are not allowed to use any built-in exponent function or operator, </span>\n<span class=\"token comment\">//such as pow(x, 0.5) or x ** 0.5. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 4</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 8</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: The square root of 8 is 2.82842..., and since the decimal part is</span>\n<span class=\"token comment\">// truncated, 2 is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= x &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Binary Search </span>\n<span class=\"token comment\">// 👍 4388 👎 3407</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token number\">2l</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">*</span> end <span class=\"token operator\">&lt;=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">long</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a non-negative integer x, compute and return the square root of x. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since the return type is an integer, the decimal digits are truncated, and on</span>\n<span class=\"token comment\">//ly the integer part of the result is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: You are not allowed to use any built-in exponent function or operator, </span>\n<span class=\"token comment\">//such as pow(x, 0.5) or x ** 0.5. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 4</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 8</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: The square root of 8 is 2.82842..., and since the decimal part is</span>\n<span class=\"token comment\">// truncated, 2 is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= x &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Binary Search </span>\n<span class=\"token comment\">// 👍 4388 👎 3407</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token number\">2l</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">*</span> end <span class=\"token operator\">&lt;=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">long</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-70","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-01T02:35:30.000Z","_content":"\n```java\n//You are climbing a staircase. It takes n steps to reach the top. \n//\n// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo\n//u climb to the top? \n//\n// \n// Example 1: \n//\n// \n//Input: n = 2\n//Output: 2\n//Explanation: There are two ways to climb to the top.\n//1. 1 step + 1 step\n//2. 2 steps\n// \n//\n// Example 2: \n//\n// \n//Input: n = 3\n//Output: 3\n//Explanation: There are three ways to climb to the top.\n//1. 1 step + 1 step + 1 step\n//2. 1 step + 2 steps\n//3. 2 steps + 1 step\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 45 \n// \n// Related Topics Math Dynamic Programming Memoization \n// 👍 13325 👎 398\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int climbStairs(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (n == 1) {\n            return 1;\n        }\n\n        if (n == 2) {\n            return 2;\n        }\n        int first = 1, second = 2, third = 0;\n\n        for (int i = 3; i <= n; i++) {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n\n        return third;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-70.md","raw":"---\ntitle: lc-70\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-01 10:35:30\n---\n\n```java\n//You are climbing a staircase. It takes n steps to reach the top. \n//\n// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo\n//u climb to the top? \n//\n// \n// Example 1: \n//\n// \n//Input: n = 2\n//Output: 2\n//Explanation: There are two ways to climb to the top.\n//1. 1 step + 1 step\n//2. 2 steps\n// \n//\n// Example 2: \n//\n// \n//Input: n = 3\n//Output: 3\n//Explanation: There are three ways to climb to the top.\n//1. 1 step + 1 step + 1 step\n//2. 1 step + 2 steps\n//3. 2 steps + 1 step\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 45 \n// \n// Related Topics Math Dynamic Programming Memoization \n// 👍 13325 👎 398\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int climbStairs(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (n == 1) {\n            return 1;\n        }\n\n        if (n == 2) {\n            return 2;\n        }\n        int first = 1, second = 2, third = 0;\n\n        for (int i = 3; i <= n; i++) {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n\n        return third;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-70","published":1,"updated":"2022-08-01T07:53:26.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6agfuh70000e8uucefeek84","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are climbing a staircase. It takes n steps to reach the top. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo</span>\n<span class=\"token comment\">//u climb to the top? </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 2</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: There are two ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step</span>\n<span class=\"token comment\">//2. 2 steps</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: There are three ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step + 1 step</span>\n<span class=\"token comment\">//2. 1 step + 2 steps</span>\n<span class=\"token comment\">//3. 2 steps + 1 step</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 45 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Memoization </span>\n<span class=\"token comment\">// 👍 13325 👎 398</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> third <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            third <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> third<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> third<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are climbing a staircase. It takes n steps to reach the top. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo</span>\n<span class=\"token comment\">//u climb to the top? </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 2</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: There are two ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step</span>\n<span class=\"token comment\">//2. 2 steps</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: There are three ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step + 1 step</span>\n<span class=\"token comment\">//2. 1 step + 2 steps</span>\n<span class=\"token comment\">//3. 2 steps + 1 step</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 45 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Memoization </span>\n<span class=\"token comment\">// 👍 13325 👎 398</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> third <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            third <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> third<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> third<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-73","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-02T06:01:20.000Z","_content":"\n```java\n//Given an m x n integer matrix matrix, if an element is 0, set its entire row a\n//nd column to 0's. \n//\n// You must do it in place. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n//Output: [[1,0,1],[0,0,0],[1,0,1]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n// \n//\n// \n// Constraints: \n//\n// \n// m == matrix.length \n// n == matrix[0].length \n// 1 <= m, n <= 200 \n// -231 <= matrix[i][j] <= 231 - 1 \n// \n//\n// \n// Follow up: \n//\n// \n// A straightforward solution using O(mn) space is probably a bad idea. \n// A simple improvement uses O(m + n) space, but still not the best solution. \n// Could you devise a constant space solution? \n// \n// Related Topics Array Hash Table Matrix \n// 👍 8364 👎 526\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void setZeroes(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return;\n        }\n\n        boolean[] rowBools = new boolean[matrix.length];\n        boolean[] columnBools = new boolean[matrix[0].length];\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (matrix[i][j] == 0) {\n                    rowBools[i] = true;\n                    columnBools[j] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (rowBools[i] || columnBools[j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-73.md","raw":"---\ntitle: lc-73\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-02 14:01:20\n---\n\n```java\n//Given an m x n integer matrix matrix, if an element is 0, set its entire row a\n//nd column to 0's. \n//\n// You must do it in place. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n//Output: [[1,0,1],[0,0,0],[1,0,1]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n// \n//\n// \n// Constraints: \n//\n// \n// m == matrix.length \n// n == matrix[0].length \n// 1 <= m, n <= 200 \n// -231 <= matrix[i][j] <= 231 - 1 \n// \n//\n// \n// Follow up: \n//\n// \n// A straightforward solution using O(mn) space is probably a bad idea. \n// A simple improvement uses O(m + n) space, but still not the best solution. \n// Could you devise a constant space solution? \n// \n// Related Topics Array Hash Table Matrix \n// 👍 8364 👎 526\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void setZeroes(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return;\n        }\n\n        boolean[] rowBools = new boolean[matrix.length];\n        boolean[] columnBools = new boolean[matrix[0].length];\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (matrix[i][j] == 0) {\n                    rowBools[i] = true;\n                    columnBools[j] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (rowBools[i] || columnBools[j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-73","published":1,"updated":"2022-08-02T09:45:34.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6bzw28k0000a0uu6l6phs0u","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n integer matrix matrix, if an element is 0, set its entire row a</span>\n<span class=\"token comment\">//nd column to 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must do it in place. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]</span>\n<span class=\"token comment\">//Output: [[1,0,1],[0,0,0],[1,0,1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span>\n<span class=\"token comment\">//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == matrix.length </span>\n<span class=\"token comment\">// n == matrix[0].length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 200 </span>\n<span class=\"token comment\">// -231 &lt;= matrix[i][j] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A straightforward solution using O(mn) space is probably a bad idea. </span>\n<span class=\"token comment\">// A simple improvement uses O(m + n) space, but still not the best solution. </span>\n<span class=\"token comment\">// Could you devise a constant space solution? </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 8364 👎 526</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> columnBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n integer matrix matrix, if an element is 0, set its entire row a</span>\n<span class=\"token comment\">//nd column to 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must do it in place. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]</span>\n<span class=\"token comment\">//Output: [[1,0,1],[0,0,0],[1,0,1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span>\n<span class=\"token comment\">//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == matrix.length </span>\n<span class=\"token comment\">// n == matrix[0].length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 200 </span>\n<span class=\"token comment\">// -231 &lt;= matrix[i][j] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A straightforward solution using O(mn) space is probably a bad idea. </span>\n<span class=\"token comment\">// A simple improvement uses O(m + n) space, but still not the best solution. </span>\n<span class=\"token comment\">// Could you devise a constant space solution? </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 8364 👎 526</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> columnBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-75","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-03T02:48:58.000Z","_content":"\n```java\n//Given an array nums with n objects colored red, white, or blue, sort them in-p\n//lace so that objects of the same color are adjacent, with the colors in the orde\n//r red, white, and blue. \n//\n// We will use the integers 0, 1, and 2 to represent the color red, white, and b\n//lue, respectively. \n//\n// You must solve this problem without using the library's sort function. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,0,2,1,1,0]\n//Output: [0,0,1,1,2,2]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [2,0,1]\n//Output: [0,1,2]\n// \n//\n// \n// Constraints: \n//\n// \n// n == nums.length \n// 1 <= n <= 300 \n// nums[i] is either 0, 1, or 2. \n// \n//\n// \n// Follow up: Could you come up with a one-pass algorithm using only constant ex\n//tra space? \n// Related Topics Array Two Pointers Sorting \n// 👍 11309 👎 439\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void sortColors(int[] nums) {\n        int zero, one, two, i;\n        zero = 0;\n        one = 0;\n        two = 0;\n\n        for(i = 0; i < nums.length; i++){\n            if(nums[i] == 0){\n                zero ++;\n                continue;\n            }\n            if(nums[i] == 1){\n                one ++;\n                continue;\n            }\n            if(nums[i] == 2){\n                two ++;\n                continue;\n            }\n        }\n\n        for(i = 0; i < zero; i++){\n            nums[i] = 0;\n        }\n        for(i = 0; i < one; i++){\n            nums[i + zero] = 1;\n        }\n        for(i = 0; i < two; i++){\n            nums[i + zero + one] = 2;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-75.md","raw":"---\ntitle: lc-75\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-03 10:48:58\n---\n\n```java\n//Given an array nums with n objects colored red, white, or blue, sort them in-p\n//lace so that objects of the same color are adjacent, with the colors in the orde\n//r red, white, and blue. \n//\n// We will use the integers 0, 1, and 2 to represent the color red, white, and b\n//lue, respectively. \n//\n// You must solve this problem without using the library's sort function. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,0,2,1,1,0]\n//Output: [0,0,1,1,2,2]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [2,0,1]\n//Output: [0,1,2]\n// \n//\n// \n// Constraints: \n//\n// \n// n == nums.length \n// 1 <= n <= 300 \n// nums[i] is either 0, 1, or 2. \n// \n//\n// \n// Follow up: Could you come up with a one-pass algorithm using only constant ex\n//tra space? \n// Related Topics Array Two Pointers Sorting \n// 👍 11309 👎 439\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void sortColors(int[] nums) {\n        int zero, one, two, i;\n        zero = 0;\n        one = 0;\n        two = 0;\n\n        for(i = 0; i < nums.length; i++){\n            if(nums[i] == 0){\n                zero ++;\n                continue;\n            }\n            if(nums[i] == 1){\n                one ++;\n                continue;\n            }\n            if(nums[i] == 2){\n                two ++;\n                continue;\n            }\n        }\n\n        for(i = 0; i < zero; i++){\n            nums[i] = 0;\n        }\n        for(i = 0; i < one; i++){\n            nums[i + zero] = 1;\n        }\n        for(i = 0; i < two; i++){\n            nums[i + zero + one] = 2;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-75","published":1,"updated":"2022-08-03T09:17:02.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6deb2gl00004cuu0qd97zxm","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums with n objects colored red, white, or blue, sort them in-p</span>\n<span class=\"token comment\">//lace so that objects of the same color are adjacent, with the colors in the orde</span>\n<span class=\"token comment\">//r red, white, and blue. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// We will use the integers 0, 1, and 2 to represent the color red, white, and b</span>\n<span class=\"token comment\">//lue, respectively. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must solve this problem without using the library's sort function. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,2,1,1,0]</span>\n<span class=\"token comment\">//Output: [0,0,1,1,2,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,1]</span>\n<span class=\"token comment\">//Output: [0,1,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == nums.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 300 </span>\n<span class=\"token comment\">// nums[i] is either 0, 1, or 2. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you come up with a one-pass algorithm using only constant ex</span>\n<span class=\"token comment\">//tra space? </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 11309 👎 439</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortColors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> zero<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n        zero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        one <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        two <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                zero <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                one <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                two <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> zero<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> one<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> two<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero <span class=\"token operator\">+</span> one<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums with n objects colored red, white, or blue, sort them in-p</span>\n<span class=\"token comment\">//lace so that objects of the same color are adjacent, with the colors in the orde</span>\n<span class=\"token comment\">//r red, white, and blue. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// We will use the integers 0, 1, and 2 to represent the color red, white, and b</span>\n<span class=\"token comment\">//lue, respectively. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must solve this problem without using the library's sort function. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,2,1,1,0]</span>\n<span class=\"token comment\">//Output: [0,0,1,1,2,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,1]</span>\n<span class=\"token comment\">//Output: [0,1,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == nums.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 300 </span>\n<span class=\"token comment\">// nums[i] is either 0, 1, or 2. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you come up with a one-pass algorithm using only constant ex</span>\n<span class=\"token comment\">//tra space? </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 11309 👎 439</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortColors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> zero<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n        zero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        one <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        two <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                zero <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                one <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                two <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> zero<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> one<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> two<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero <span class=\"token operator\">+</span> one<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-76","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-04T07:08:53.000Z","_content":"\n```java\n//Given two strings s and t of lengths m and n respectively, return the minimum \n//window substring of s such that every character in t (including duplicates) is i\n//ncluded in the window. If there is no such substring, return the empty string \"\"\n//. \n//\n// The testcases will be generated such that the answer is unique. \n//\n// A substring is a contiguous sequence of characters within the string. \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n//Output: \"BANC\"\n//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr\n//om string t.\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"a\", t = \"a\"\n//Output: \"a\"\n//Explanation: The entire string s is the minimum window.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"a\", t = \"aa\"\n//Output: \"\"\n//Explanation: Both 'a's from t must be included in the window.\n//Since the largest window of s only has one 'a', return empty string.\n// \n//\n// \n// Constraints: \n//\n// \n// m == s.length \n// n == t.length \n// 1 <= m, n <= 105 \n// s and t consist of uppercase and lowercase English letters. \n// \n//\n// \n//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top\n//ics Hash Table String Sliding Window \n// 👍 11543 👎 553\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String minWindow(String s, String t) {\n        if (s == null || s.length() == 0 || t == null || t.length() == 0) {\n            return \"\";\n        }\n\n        int bestStart = 0, left = 0, right = 0, matchNum = 0, length = Integer.MAX_VALUE;\n\n        Map<Character, Integer> curMap = new HashMap<>();\n        Map<Character, Integer> neededMap = new HashMap<>();\n\n\n        for (char ch : t.toCharArray()) {\n            neededMap.putIfAbsent(ch, 0);\n            neededMap.put(ch, neededMap.get(ch) + 1);\n        }\n\n        while (right < s.length()) {\n            char ch = s.charAt(right);\n\n            if (neededMap.containsKey(ch)) {\n                curMap.putIfAbsent(ch, 0);\n                int cur = curMap.get(ch);\n                cur++;\n                curMap.put(ch, cur);\n\n                if (cur == neededMap.get(ch)) {\n                    matchNum++;\n                }\n            }\n\n            while (matchNum == neededMap.size()) {\n                if (right - left < length) {\n                    length = right - left + 1;\n                    bestStart = left;\n                }\n\n                char curCh = s.charAt(left);\n\n                if (curMap.containsKey(curCh)) {\n                    curMap.put(curCh, curMap.get(curCh) - 1);\n\n                    if (curMap.get(curCh) < neededMap.get(curCh)) {\n                        matchNum--;\n                    }\n                }\n\n                left++;\n            }\n\n            right++;\n        }\n\n        return length == Integer.MAX_VALUE ? \"\" : s.substring(bestStart, bestStart + length);\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-76.md","raw":"---\ntitle: lc-76\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-04 15:08:53\n---\n\n```java\n//Given two strings s and t of lengths m and n respectively, return the minimum \n//window substring of s such that every character in t (including duplicates) is i\n//ncluded in the window. If there is no such substring, return the empty string \"\"\n//. \n//\n// The testcases will be generated such that the answer is unique. \n//\n// A substring is a contiguous sequence of characters within the string. \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n//Output: \"BANC\"\n//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr\n//om string t.\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"a\", t = \"a\"\n//Output: \"a\"\n//Explanation: The entire string s is the minimum window.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"a\", t = \"aa\"\n//Output: \"\"\n//Explanation: Both 'a's from t must be included in the window.\n//Since the largest window of s only has one 'a', return empty string.\n// \n//\n// \n// Constraints: \n//\n// \n// m == s.length \n// n == t.length \n// 1 <= m, n <= 105 \n// s and t consist of uppercase and lowercase English letters. \n// \n//\n// \n//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top\n//ics Hash Table String Sliding Window \n// 👍 11543 👎 553\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String minWindow(String s, String t) {\n        if (s == null || s.length() == 0 || t == null || t.length() == 0) {\n            return \"\";\n        }\n\n        int bestStart = 0, left = 0, right = 0, matchNum = 0, length = Integer.MAX_VALUE;\n\n        Map<Character, Integer> curMap = new HashMap<>();\n        Map<Character, Integer> neededMap = new HashMap<>();\n\n\n        for (char ch : t.toCharArray()) {\n            neededMap.putIfAbsent(ch, 0);\n            neededMap.put(ch, neededMap.get(ch) + 1);\n        }\n\n        while (right < s.length()) {\n            char ch = s.charAt(right);\n\n            if (neededMap.containsKey(ch)) {\n                curMap.putIfAbsent(ch, 0);\n                int cur = curMap.get(ch);\n                cur++;\n                curMap.put(ch, cur);\n\n                if (cur == neededMap.get(ch)) {\n                    matchNum++;\n                }\n            }\n\n            while (matchNum == neededMap.size()) {\n                if (right - left < length) {\n                    length = right - left + 1;\n                    bestStart = left;\n                }\n\n                char curCh = s.charAt(left);\n\n                if (curMap.containsKey(curCh)) {\n                    curMap.put(curCh, curMap.get(curCh) - 1);\n\n                    if (curMap.get(curCh) < neededMap.get(curCh)) {\n                        matchNum--;\n                    }\n                }\n\n                left++;\n            }\n\n            right++;\n        }\n\n        return length == Integer.MAX_VALUE ? \"\" : s.substring(bestStart, bestStart + length);\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-76","published":1,"updated":"2022-08-04T15:53:48.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6f7x6yx0000l0uu8fpy0s8k","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two strings s and t of lengths m and n respectively, return the minimum </span>\n<span class=\"token comment\">//window substring of s such that every character in t (including duplicates) is i</span>\n<span class=\"token comment\">//ncluded in the window. If there is no such substring, return the empty string \"\"</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The testcases will be generated such that the answer is unique. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A substring is a contiguous sequence of characters within the string. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"ADOBECODEBANC\", t = \"ABC\"</span>\n<span class=\"token comment\">//Output: \"BANC\"</span>\n<span class=\"token comment\">//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr</span>\n<span class=\"token comment\">//om string t.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"a\"</span>\n<span class=\"token comment\">//Output: \"a\"</span>\n<span class=\"token comment\">//Explanation: The entire string s is the minimum window.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"aa\"</span>\n<span class=\"token comment\">//Output: \"\"</span>\n<span class=\"token comment\">//Explanation: Both 'a's from t must be included in the window.</span>\n<span class=\"token comment\">//Since the largest window of s only has one 'a', return empty string.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == s.length </span>\n<span class=\"token comment\">// n == t.length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 105 </span>\n<span class=\"token comment\">// s and t consist of uppercase and lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top</span>\n<span class=\"token comment\">//ics Hash Table String Sliding Window </span>\n<span class=\"token comment\">// 👍 11543 👎 553</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">minWindow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> bestStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> matchNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> neededMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    matchNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>matchNum <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    length <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    bestStart <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">char</span> curCh <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">,</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        matchNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> length <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>bestStart<span class=\"token punctuation\">,</span> bestStart <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two strings s and t of lengths m and n respectively, return the minimum </span>\n<span class=\"token comment\">//window substring of s such that every character in t (including duplicates) is i</span>\n<span class=\"token comment\">//ncluded in the window. If there is no such substring, return the empty string \"\"</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The testcases will be generated such that the answer is unique. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A substring is a contiguous sequence of characters within the string. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"ADOBECODEBANC\", t = \"ABC\"</span>\n<span class=\"token comment\">//Output: \"BANC\"</span>\n<span class=\"token comment\">//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr</span>\n<span class=\"token comment\">//om string t.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"a\"</span>\n<span class=\"token comment\">//Output: \"a\"</span>\n<span class=\"token comment\">//Explanation: The entire string s is the minimum window.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"aa\"</span>\n<span class=\"token comment\">//Output: \"\"</span>\n<span class=\"token comment\">//Explanation: Both 'a's from t must be included in the window.</span>\n<span class=\"token comment\">//Since the largest window of s only has one 'a', return empty string.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == s.length </span>\n<span class=\"token comment\">// n == t.length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 105 </span>\n<span class=\"token comment\">// s and t consist of uppercase and lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top</span>\n<span class=\"token comment\">//ics Hash Table String Sliding Window </span>\n<span class=\"token comment\">// 👍 11543 👎 553</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">minWindow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> bestStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> matchNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> neededMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    matchNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>matchNum <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    length <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    bestStart <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">char</span> curCh <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">,</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        matchNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> length <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>bestStart<span class=\"token punctuation\">,</span> bestStart <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-78","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-05T03:36:34.000Z","_content":"\n```java\n//Given an integer array nums of unique elements, return all possible subsets (t\n//he power set). \n//\n// The solution set must not contain duplicate subsets. Return the solution in a\n//ny order. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,2,3]\n//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0]\n//Output: [[],[0]]\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 10 \n// -10 <= nums[i] <= 10 \n// All the numbers of nums are unique. \n// \n// Related Topics Array Backtracking Bit Manipulation \n// 👍 11287 👎 167\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        if (nums == null) {\n            return null;\n        }\n\n        Set<List<Integer>> resultSet = new HashSet<>();\n\n        Arrays.sort(nums);\n        List<Integer> curList = new ArrayList<>();\n        calSubset(resultSet, curList, nums, 0);\n        return new ArrayList<>(resultSet);\n\n    }\n\n    void calSubset(Set<List<Integer>> resultSet, List<Integer> curList, int[] nums, int index) {\n        if (index == nums.length) {\n            List<Integer> copyList = new ArrayList<>(curList);\n            resultSet.add(copyList);\n            return;\n        }\n\n        curList.add(nums[index]);\n        calSubset(resultSet, curList, nums, index + 1);\n        curList.remove(curList.size() - 1);\n        calSubset(resultSet, curList, nums, index + 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-78.md","raw":"---\ntitle: lc-78\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-05 11:36:34\n---\n\n```java\n//Given an integer array nums of unique elements, return all possible subsets (t\n//he power set). \n//\n// The solution set must not contain duplicate subsets. Return the solution in a\n//ny order. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,2,3]\n//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0]\n//Output: [[],[0]]\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 10 \n// -10 <= nums[i] <= 10 \n// All the numbers of nums are unique. \n// \n// Related Topics Array Backtracking Bit Manipulation \n// 👍 11287 👎 167\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        if (nums == null) {\n            return null;\n        }\n\n        Set<List<Integer>> resultSet = new HashSet<>();\n\n        Arrays.sort(nums);\n        List<Integer> curList = new ArrayList<>();\n        calSubset(resultSet, curList, nums, 0);\n        return new ArrayList<>(resultSet);\n\n    }\n\n    void calSubset(Set<List<Integer>> resultSet, List<Integer> curList, int[] nums, int index) {\n        if (index == nums.length) {\n            List<Integer> copyList = new ArrayList<>(curList);\n            resultSet.add(copyList);\n            return;\n        }\n\n        curList.add(nums[index]);\n        calSubset(resultSet, curList, nums, index + 1);\n        curList.remove(curList.size() - 1);\n        calSubset(resultSet, curList, nums, index + 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-78","published":1,"updated":"2022-08-05T05:57:01.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6g21ke40000y0uu33p093pl","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums of unique elements, return all possible subsets (t</span>\n<span class=\"token comment\">//he power set). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The solution set must not contain duplicate subsets. Return the solution in a</span>\n<span class=\"token comment\">//ny order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0]</span>\n<span class=\"token comment\">//Output: [[],[0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 10 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the numbers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking Bit Manipulation </span>\n<span class=\"token comment\">// 👍 11287 👎 167</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> copyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>copyList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums of unique elements, return all possible subsets (t</span>\n<span class=\"token comment\">//he power set). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The solution set must not contain duplicate subsets. Return the solution in a</span>\n<span class=\"token comment\">//ny order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0]</span>\n<span class=\"token comment\">//Output: [[],[0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 10 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the numbers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking Bit Manipulation </span>\n<span class=\"token comment\">// 👍 11287 👎 167</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> copyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>copyList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl4f9809200007kuudym5699s","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4f9809o00047kuu0s12f1yb"},{"post_id":"cl4h70ez30000e8uuc8mieewq","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4h70ezl0002e8uubfpg7cix"},{"post_id":"cl4ihijdb00005suub1yw32mk","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4jgpdk80003bsuu0g5qervt"},{"post_id":"cl4jgpdk40000bsuu48j5g9w9","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4jgpdk80004bsuu0p6b2xkj"},{"post_id":"cl4mchf1f0000iguu8izkg494","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4mchf1w0002iguuevy19813"},{"post_id":"cl4nxdyi80000rouu8c96aay9","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4nxdyig0002rouu6y1hamap"},{"post_id":"cl4pirc7r000030uu3nz87nzq","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4pirc88000230uu0z6ta3dd"},{"post_id":"cl4sjn4uk0000w8uu6qwwfbns","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4sjn4ur0002w8uu25u48up9"},{"post_id":"cl4wddm2f0000houug8h60n7y","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4wddm2m0002houuhwt7fhs9"},{"post_id":"cl4yayyvc0000scuu0h8yg1tx","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl4yayyve0002scuucjq4ggxh"},{"post_id":"cl50map4o0000xguu96a1dxrh","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl50map4v0002xguu6whyffbb"},{"post_id":"cl5262nk70000t0uufinwdwfd","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5262nke0002t0uuacev18ft"},{"post_id":"cl56ddo8v00004suugteb1lzy","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl56ddo9200024suu67c62pi3"},{"post_id":"cl58auuby0000wguugn4u7sha","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl58auuce0002wguu392h96pr"},{"post_id":"cl5amy9jl0000uwuu72t1bx22","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5amy9jp0002uwuu3ncs01db"},{"post_id":"cl5c1hluq0000zcuu10zh58ak","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5c1hlva0002zcuu8gifft9i"},{"post_id":"cl5gpjvcx000038uuhfoaadr9","category_id":"cl2pnbrgc0001q4ujau72bp4d","_id":"cl5gpjvd4000238uufezg1zsy"},{"post_id":"cl5hku85n0000k0uu4vy14tx5","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5hku8650002k0uue9n881or"},{"post_id":"cl5jby6vz00000cuu9v4r1t1i","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5jby6w600020cuu53hwgtlx"},{"post_id":"cl5qpikpq00001cuu8ikjdiyt","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5qpikpx00021cuuhyxn78rv"},{"post_id":"cl5rs28dj0000gsuu55xmdapd","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5rs28e00002gsuud2zs8myc"},{"post_id":"cl5tbvntu0000d0uucznt6uj1","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5tbvnu30002d0uugfrle9gr"},{"post_id":"cl5umejki0000qcuufs2f8g5x","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl5umejkr0002qcuu5vhthb9x"},{"post_id":"cl607qp000000ckuue2yne6on","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl607qp070002ckuualdce7a9"},{"post_id":"cl627avnw000048uu1p4q6m19","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl627avny000248uuffrv0wjj"},{"post_id":"cl63e5wbx0000jguu6w285jte","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl63e5wc40002jguu9hcxf4qq"},{"post_id":"cl64qoprp0000y0uu197v6vvi","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl64qoprw0002y0uud386cpbl"},{"post_id":"cl661mqo30000yguud2us6p2c","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl661mqob0002yguu9gova3se"},{"post_id":"cl6agfuh70000e8uucefeek84","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl6agfuhi0002e8uu98uy1byj"},{"post_id":"cl6bzw28k0000a0uu6l6phs0u","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl6bzw28r0002a0uu83qjhvqb"},{"post_id":"cl6deb2gl00004cuu0qd97zxm","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl6deb2gt00024cuuc4kb56i3"},{"post_id":"cl6f7x6yx0000l0uu8fpy0s8k","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl6f7x6z40002l0uu7zv1fw2w"},{"post_id":"cl6g21ke40000y0uu33p093pl","category_id":"cl4f9809k00017kuu6pxe6w91","_id":"cl6g21kee0002y0uuehsw540e"}],"PostTag":[{"post_id":"cl4f9809200007kuudym5699s","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4f9809n00037kuu67yn8u0z"},{"post_id":"cl4h70ez30000e8uuc8mieewq","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4h70ezl0001e8uufjh3aads"},{"post_id":"cl4ihijdb00005suub1yw32mk","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4jgpdk70001bsuu2axpas8b"},{"post_id":"cl4jgpdk40000bsuu48j5g9w9","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4jgpdk70002bsuu0ouge65u"},{"post_id":"cl4mchf1f0000iguu8izkg494","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4mchf1w0001iguu2xkjcb9v"},{"post_id":"cl4nxdyi80000rouu8c96aay9","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4nxdyig0001rouu37oc1avc"},{"post_id":"cl4pirc7r000030uu3nz87nzq","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4pirc87000130uugyyf7g2c"},{"post_id":"cl4sjn4uk0000w8uu6qwwfbns","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4sjn4ur0001w8uu5sd7492z"},{"post_id":"cl4wddm2f0000houug8h60n7y","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4wddm2m0001houuasqgcqdn"},{"post_id":"cl4yayyvc0000scuu0h8yg1tx","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl4yayyve0001scuu44b628ca"},{"post_id":"cl50map4o0000xguu96a1dxrh","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl50map4v0001xguuegpl0jif"},{"post_id":"cl5262nk70000t0uufinwdwfd","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5262nkd0001t0uu3pob3fxy"},{"post_id":"cl56ddo8v00004suugteb1lzy","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl56ddo9200014suu0x8eeny8"},{"post_id":"cl58auuby0000wguugn4u7sha","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl58auuce0001wguu40sgbhqj"},{"post_id":"cl5amy9jl0000uwuu72t1bx22","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5amy9jp0001uwuuggl76u7w"},{"post_id":"cl5c1hluq0000zcuu10zh58ak","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5c1hlv90001zcuu5rp61nay"},{"post_id":"cl5gpjvcx000038uuhfoaadr9","tag_id":"cl2pnbrge0002q4uj3os53mh9","_id":"cl5gpjvd4000138uubhf5dysr"},{"post_id":"cl5hku85n0000k0uu4vy14tx5","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5hku8650001k0uu9ijkdef3"},{"post_id":"cl5jby6vz00000cuu9v4r1t1i","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5jby6w600010cuu67hc3img"},{"post_id":"cl5qpikpq00001cuu8ikjdiyt","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5qpikpw00011cuu4xih1abd"},{"post_id":"cl5rs28dj0000gsuu55xmdapd","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5rs28e00001gsuu7p6xfiyf"},{"post_id":"cl5tbvntu0000d0uucznt6uj1","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5tbvnu30001d0uu2668aar8"},{"post_id":"cl5umejki0000qcuufs2f8g5x","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl5umejkq0001qcuufkqud4x1"},{"post_id":"cl607qp000000ckuue2yne6on","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl607qp070001ckuu0j8q02k7"},{"post_id":"cl627avnw000048uu1p4q6m19","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl627avny000148uudjjvbess"},{"post_id":"cl63e5wbx0000jguu6w285jte","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl63e5wc30001jguu8jlw1d5y"},{"post_id":"cl64qoprp0000y0uu197v6vvi","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl64qoprw0001y0uu1jhq0rej"},{"post_id":"cl661mqo30000yguud2us6p2c","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl661mqoa0001yguu38ks4t8z"},{"post_id":"cl6agfuh70000e8uucefeek84","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl6agfuhi0001e8uucwhr52bi"},{"post_id":"cl6bzw28k0000a0uu6l6phs0u","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl6bzw28r0001a0uuba8z8rdv"},{"post_id":"cl6deb2gl00004cuu0qd97zxm","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl6deb2gt00014cuueoi4dpgg"},{"post_id":"cl6f7x6yx0000l0uu8fpy0s8k","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl6f7x6z30001l0uueou7h4ep"},{"post_id":"cl6g21ke40000y0uu33p093pl","tag_id":"cl4f9809m00027kuuezx0hzqj","_id":"cl6g21kee0001y0uu9z101qqh"}],"Tag":[{"name":"其他","_id":"cl2pnbrge0002q4uj3os53mh9"},{"name":"leetcode","_id":"cl4f9809m00027kuuezx0hzqj"}]}}