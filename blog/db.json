{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/images/kylin_logo.png","path":"images/kylin_logo.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","path":"medias/reward/alipay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"4ed6c95040b433dac7dddc6e0c83a6f6743c77fa","modified":1651504003887},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1651389158541},{"_id":"source/_posts/lc-101.md","hash":"769a445da70bed144420812c3a369b74d446c9fd","modified":1660662081889},{"_id":"source/_posts/lc-102.md","hash":"b6404352a7efa3a26ada94a0d2abff45ef379e48","modified":1660750480873},{"_id":"source/404/index.md","hash":"a7782d417fb5c1bcfb9cfb65aa9bc8c31e4cddc2","modified":1675154691790},{"_id":"source/_posts/kylin-5-debug.md","hash":"8646fc6601649f17656ce7a123fea477df4be29b","modified":1675914453107},{"_id":"source/_posts/lc-104.md","hash":"d93057495c1c0e8bd6be6aae06014724054394c2","modified":1660889244783},{"_id":"source/_posts/lc-121.md","hash":"f1e7ec2ed1e4cd5ea552bb99b8d7a837160ddf4e","modified":1661334533856},{"_id":"source/_posts/lc-114.md","hash":"420fbeec28af6ac0205ad2d103f88ace468ce7dd","modified":1661224670115},{"_id":"source/_posts/lc-124.md","hash":"5e4068bd0d45354d8a4e13f5b5749186b9567fc1","modified":1661415754857},{"_id":"source/_posts/lc-128.md","hash":"6f1a4de7d625c870b1d5964026d849bfd392be89","modified":1661499077805},{"_id":"source/_posts/lc-139.md","hash":"2b32b531128ed3c04fe3e3cec939555e674a46f8","modified":1661831189137},{"_id":"source/_posts/lc-140.md","hash":"c2f1335211a5a984457a0b8c836e3415c725c8cc","modified":1668430480629},{"_id":"source/_posts/lc-141.md","hash":"fd2a123ce20ea966d3fbe2a1fbf764b313d9b4e6","modified":1661936675206},{"_id":"source/_posts/lc-146.md","hash":"a85c2b7864b0420f654bae59969717e6edee9a58","modified":1662347676102},{"_id":"source/_posts/lc-142.md","hash":"9e21c2f8cb4595b20a482814c4002b078e8f67b6","modified":1662002936001},{"_id":"source/_posts/lc-148.md","hash":"2b87120c1e6382a1db53489d7cb30c75672822f1","modified":1662360557211},{"_id":"source/_posts/lc-149.md","hash":"b1efa8f2c4d64b41b4dc4fa295531110c8d321dc","modified":1668484412015},{"_id":"source/_posts/lc-155.md","hash":"1a0714c101bfa5b8da26ad906f4247ddd287da3a","modified":1662531174369},{"_id":"source/_posts/lc-15.md","hash":"f37d3557a801e38ef2db677e40220991d3743b92","modified":1675257588467},{"_id":"source/_posts/lc-169.md","hash":"c2d1e76572060d5b518beffaf3c11cda216499b1","modified":1662703599547},{"_id":"source/_posts/lc-152.md","hash":"792528941a7d3da6d85fb77f59eb236080f2ea2d","modified":1662451635974},{"_id":"source/_posts/lc-198.md","hash":"807c0d5a63f820eaa0cb711e26f0f2103117b600","modified":1663052967943},{"_id":"source/_posts/lc-17.md","hash":"5498e26dbb45a024f7e242b03442a79936081730","modified":1675257590776},{"_id":"source/_posts/lc-202.md","hash":"5478ce7cc13df477dd996872c875f86762f5cf58","modified":1668773058670},{"_id":"source/_posts/lc-200.md","hash":"ee11bc53c62c587e7af27126b15c0d5906121ba0","modified":1663156542032},{"_id":"source/_posts/lc-136.md","hash":"b3a1bb630b67fcef2c5f2f55e2859ff5d6e92907","modified":1661741331537},{"_id":"source/_posts/lc-204.md","hash":"c51337f55b5d636c90de0becedfd5f0b7f3587fd","modified":1669032699643},{"_id":"source/_posts/lc-207.md","hash":"7fc905cb3d0cf22c66b541ef50757ace401b9460","modified":1663471250325},{"_id":"source/_posts/lc-208.md","hash":"3352382b9b26a3d308452e4eaf9b34f48bb8c1eb","modified":1663480191366},{"_id":"source/_posts/lc-206.md","hash":"0fc0c399da1c0c8cdbd624f04d7756825f5a439c","modified":1663220439878},{"_id":"source/_posts/lc-21.md","hash":"733ccbe18708f7be4ad93f85d1621bf180c25fe4","modified":1675257598886},{"_id":"source/_posts/lc-160.md","hash":"d1582f71353c6d22e9d94bc9de68a2ee64e26742","modified":1662609290743},{"_id":"source/_posts/lc-19.md","hash":"59e3160b3adc44ea8cbeea9f25d60b145bbc0e5f","modified":1675257592985},{"_id":"source/_posts/lc-217.md","hash":"d9986acf4ab9a2fd01510adb0892263bea42ea28","modified":1668685717746},{"_id":"source/_posts/lc-221.md","hash":"b002d2a0febca5379aeab174300c0a0f340f924b","modified":1663676080009},{"_id":"source/_posts/lc-20.md","hash":"bdc8e409bbd8471ed31885f10b7c60dae5c095b0","modified":1675257595874},{"_id":"source/_posts/lc-226.md","hash":"f03a507fa7cac153d73729dc975607d530db3146","modified":1663740262416},{"_id":"source/_posts/lc-234.md","hash":"1da672b72ce79f4f75285cb0ca648f91ed3e4ba9","modified":1663854679106},{"_id":"source/_posts/lc-239.md","hash":"eb83c029e6a5122f23c65864749f4a3e59d60692","modified":1664203825318},{"_id":"source/_posts/lc-236.md","hash":"8d0214e1aba365ceca7f42f85827d46097aa9b10","modified":1664075062018},{"_id":"source/_posts/lc-238.md","hash":"6c318fbda1a59b6ca7e85fc53133be9f9c17e468","modified":1669117320299},{"_id":"source/_posts/lc-22.md","hash":"0a471c7c889f1802422e6df8adde08116552657b","modified":1675257601697},{"_id":"source/_posts/lc-240.md","hash":"f68b114e682c55e68283d032b922c857ff7ff81b","modified":1664250223647},{"_id":"source/_posts/lc-279.md","hash":"03e94d876f0500c6c56926b585c09a9509c66243","modified":1664373668972},{"_id":"source/_posts/lc-283.md","hash":"4ccfa476c707c6773dc51af3e8cbb99e98a09374","modified":1669117336488},{"_id":"source/_posts/lc-28.md","hash":"f8dba6aeacbcee897830a0b9df8bb6170d56da52","modified":1675257625757},{"_id":"source/_posts/lc-215.md","hash":"35aac25331a0359e695a74281adf305e2add4332","modified":1663570157642},{"_id":"source/_posts/lc-297.md","hash":"46326b902c67d8d71429047de4f17ca350caa632","modified":1665040873570},{"_id":"source/_posts/lc-287.md","hash":"00d2e419140d13090cac723a7a6ccb3f2610083e","modified":1664528263739},{"_id":"source/_posts/lc-301.md","hash":"23e7a3a17f4bcb4b9285106619dc381ec3d0b399","modified":1665230778604},{"_id":"source/_posts/lc-23.md","hash":"e7c3e7eb9c8f55682b35292fe622ce9f8ea55dc6","modified":1675257604789},{"_id":"source/_posts/lc-34.md","hash":"19851006611dfe94e1e2321ef92967c9832462ae","modified":1675257633295},{"_id":"source/_posts/lc-38.md","hash":"194ce943b60609a670a0ce36c012e939c8bf6cfa","modified":1657076104660},{"_id":"source/_posts/lc-33.md","hash":"2e78942b5ddc12aa0747bd09dcaf25867843a26b","modified":1675257630895},{"_id":"source/_posts/lc-41.md","hash":"cc8981ff42580dd68dc6eb925d734bd21e6a1e13","modified":1675257638313},{"_id":"source/_posts/lc-26.md","hash":"386166ba102e9f7b102089a3b412642eb86bd425","modified":1675257609195},{"_id":"source/_posts/lc-416.md","hash":"4a76730f9172043bbcbcebd03f05c5bbed5a657f","modified":1666754364280},{"_id":"source/_posts/lc-44.md","hash":"0ac6655597dae306fbb59e6398d1cc99f09d01cd","modified":1669117958384},{"_id":"source/_posts/lc-448.md","hash":"17763c0206a8ba45e2c60a014fcf9f0d68b74167","modified":1666756627773},{"_id":"source/_posts/lc-46.md","hash":"398ac5a168c88984271d4de68420fac43eb5852c","modified":1657594277334},{"_id":"source/_posts/lc-48.md","hash":"6ffac1183e0b5d8d2f022f007341046055e829fd","modified":1657700271450},{"_id":"source/_posts/lc-36.md","hash":"cdbb0e02cbd9b4fbb0c6bfb6de2423ecb14a608e","modified":1675257635796},{"_id":"source/_posts/lc-53.md","hash":"2660425880a10c692205b38a82781de6ae5dbd30","modified":1658302380722},{"_id":"source/_posts/lc-49.md","hash":"e3254d848cfa32c188888dd22b5a9b1683b8e801","modified":1658146326942},{"_id":"source/_posts/lc-538.md","hash":"d488f3b6483943327cc13a55b49eadbeb9e9d4c6","modified":1669117297293},{"_id":"source/_posts/lc-50.md","hash":"d69fd453ea737ae5a862cce16460f457912c0c2a","modified":1658211058726},{"_id":"source/_posts/lc-29.md","hash":"e3fb2d0fd4840aff07694cbbfab697a390490b05","modified":1675257628537},{"_id":"source/_posts/lc-105.md","hash":"ebff13ded28b3470a9c41ea7d79646e162cf2b4c","modified":1669117942868},{"_id":"source/_posts/lc-54.md","hash":"61e199614490d082762b4ffff93d1f99eff0b39e","modified":1658382946284},{"_id":"source/_posts/lc-543.md","hash":"9bf5d9c903eb589a9e3b4e04b3a69fdfc0078fcd","modified":1666950524952},{"_id":"source/_posts/lc-42.md","hash":"3bd9bacaaf5df778c51a6d85179db17c96dc0ef6","modified":1657259443185},{"_id":"source/_posts/lc-56.md","hash":"ce706efe1099cedea7989a372b55335daa057ffd","modified":1658841326565},{"_id":"source/_posts/lc-62.md","hash":"f5dda8a6b249328e020eb7289ce771a0ce970803","modified":1658913314145},{"_id":"source/_posts/lc-617.md","hash":"23b6c3bb24c04b5bafbd4909212bd1149a99ddf8","modified":1667444013098},{"_id":"source/_posts/lc-560.md","hash":"9cb943d167e0c15abaee1f2123c2ccfc04d9e4c3","modified":1667219675024},{"_id":"source/_posts/lc-581.md","hash":"fc4fb107ccd89ff81600f4bd3a4f06c09b7828dd","modified":1667316452502},{"_id":"source/_posts/lc-70.md","hash":"9fcd2ee7c2602515bc12637fa4455a0e171fef81","modified":1659340406312},{"_id":"source/_posts/lc-621.md","hash":"71da8bba620ecbf75df8e74efb210f24b4add075","modified":1667828190123},{"_id":"source/_posts/lc-73.md","hash":"fc4aef2fc3d3c1599d3965dc95a71edf052a2063","modified":1659433534647},{"_id":"source/_posts/lc-69.md","hash":"eb9fd41809fcd28d17bf79b5d1ff71d0994ce10b","modified":1659073666661},{"_id":"source/_posts/lc-55.md","hash":"c5f13e9cd5b75b4ad112670e3719391d2c051470","modified":1658805686571},{"_id":"source/_posts/lc-647.md","hash":"3184119e4a05056dba40f09055c2bbae090bff64","modified":1668013958303},{"_id":"source/_posts/lc-76.md","hash":"779cbcd9f0483814ba494a71b201750f627a7662","modified":1659628428937},{"_id":"source/_posts/lc-66.md","hash":"f5d5a364f5e3af22ce0f5a5703e840fc01bcd35e","modified":1658994817545},{"_id":"source/_posts/lc-79.md","hash":"7ceb3f38eee29f604dc1e58973c32cb157bb8e5b","modified":1659938851554},{"_id":"source/_posts/lc-84.md","hash":"00e5c4830b7dbed6af0a2e6bbb91db9fec12d74d","modified":1660029242274},{"_id":"source/_posts/lc-75.md","hash":"6b21124589880413746b08cb0958d3e50d77bd4c","modified":1659518222711},{"_id":"source/_posts/lc-78.md","hash":"6abdf2f1a3be2a2ed2df2b055292aa52f59b06dd","modified":1659679021583},{"_id":"source/_posts/lc-88.md","hash":"2763d3b875eb0d236abe8ab3fd6fc1a9445c3e84","modified":1660204389938},{"_id":"source/_posts/lc-91.md","hash":"3cb716f2097c396590f320485c9092b17b1c5da9","modified":1660206353580},{"_id":"source/_posts/lc-94.md","hash":"901916fb8d4555b4c0b8c09375aeb47b82ca7a16","modified":1660285478903},{"_id":"source/_posts/lc-98.md","hash":"4a6ade24508791d6d9cd9f3d2776da3394a40651","modified":1660543854680},{"_id":"source/_posts/offer-03.md","hash":"e53033c097b1cad9f5bea3313c99a58b199d6466","modified":1669650047805},{"_id":"source/_posts/offer-04.md","hash":"ee3045743c5ec04f2b153ef20955f62ebe52234a","modified":1669780485028},{"_id":"source/_posts/offer-06.md","hash":"2230d84bc38198ed601709213eb01abd483fb7e5","modified":1669964073605},{"_id":"source/_posts/offer-05.md","hash":"08695e51d611d7a7a530a372705ddb959b11de35","modified":1669875643539},{"_id":"source/_posts/offer-10-1.md","hash":"fe4484b42d5a877c6a5d2374eeed359dd058d8ad","modified":1670395537866},{"_id":"source/_posts/offer-11.md","hash":"46d1a1a0505c4e49fe262777bb3eaf253b0968ee","modified":1670589436664},{"_id":"source/_posts/offer-07.md","hash":"2fcd3facce6122a9d9bef06e60fed60330e41f73","modified":1670228654587},{"_id":"source/_posts/lc-739.md","hash":"4430ecfb7e7e6934deb80c85e6c4a5bd91b57a98","modified":1668168629381},{"_id":"source/_posts/offer-09.md","hash":"ee729de0e3e4e864975f3239250588fd322ba5fd","modified":1670383776973},{"_id":"source/_posts/offer-10-2.md","hash":"0fb2c3b10457ae14a4e218f6874eecc3b99a9959","modified":1670470436979},{"_id":"source/_posts/offer-12.md","hash":"da322b7feb0058b1763586716d2a26d7981392b3","modified":1670739980262},{"_id":"source/_posts/offer-14.md","hash":"bc0dc838f0b95b330018834ddf33789161f76b78","modified":1671522248744},{"_id":"source/_posts/offer-17.md","hash":"96c173006fc3eb482f4a2a08847de558281c8a88","modified":1671714210104},{"_id":"source/_posts/offer-16.md","hash":"63501f5914310acc8f3f570f9a93a98314ea59c2","modified":1671600085182},{"_id":"source/_posts/offer-18.md","hash":"90d0c56b2f1bf54916b8af7813f9876a16258c83","modified":1671785712482},{"_id":"source/_posts/offer-19.md","hash":"886b5e9d7b608bfda5a82b3fbb1b8129698d47c4","modified":1672047338959},{"_id":"source/_posts/offer-22.md","hash":"6e6abbfdc81ae6d933c6f108b2e1be137aa69c54","modified":1672284315215},{"_id":"source/_posts/offer-20.md","hash":"390eb156dee40f9b71f0d98f6fc3f8a4e3353c5a","modified":1672120019037},{"_id":"source/_posts/offer-21.md","hash":"9866880781543188866aaa847d807838ce6c9987","modified":1672212552171},{"_id":"source/_posts/offer-27.md","hash":"70be9559e731408e556f8664b1e473afbf4458e0","modified":1672902814065},{"_id":"source/_posts/offer-30.md","hash":"3795717aedc20d343ba3882e196c983d37f754a3","modified":1673336830731},{"_id":"source/_posts/offer-28.md","hash":"3dcb4a6cf11fa68169a73276b762947fef32dc3e","modified":1672977110321},{"_id":"source/_posts/offer-26.md","hash":"c77ac839b51da732e1c41920f291e30436e52582","modified":1672815708182},{"_id":"source/_posts/offer-32-2.md","hash":"92857a156064cc1c56ebf6f78f1d2ede71b2e9dc","modified":1673582074435},{"_id":"source/_posts/offer-24.md","hash":"52ad1d720f79551686ebd154f2af9e6b4de5dc1d","modified":1672380497919},{"_id":"source/_posts/offer-33.md","hash":"037672e5d4f687973f7983d8f0eaa37ba62be340","modified":1673946935467},{"_id":"source/_posts/offer-36.md","hash":"058c64a8a2568b910fe7dfa81a378160835bc127","modified":1674185303978},{"_id":"source/_posts/offer-35.md","hash":"6b29d625513c54c9f92ab3bf15a4d1ac43e0f7d9","modified":1674013746051},{"_id":"source/_posts/offer-29.md","hash":"22993ff02376c80e5ecfe995e063e0c3f35354c4","modified":1673257056882},{"_id":"source/_posts/offer-41.md","hash":"8c759bfa179f9c63e288515b22bd45d53a64a449","modified":1675090437900},{"_id":"source/_posts/offer-25.md","hash":"1efdbd7a5e598c884dd83dc58d0484341ceaaeed","modified":1672756894733},{"_id":"source/_posts/offer-42.md","hash":"04ac1013bde7c04c9da6ff913dc112344490d448","modified":1675143852372},{"_id":"source/_posts/offer-34.md","hash":"84a21036b732523238126aa6cd15ffdfd27f2ea5","modified":1674012308144},{"_id":"source/_posts/offer-32.md","hash":"f9f6d394f7686e9d447a7f597b252db6822189eb","modified":1673504283731},{"_id":"source/_posts/offer-39.md","hash":"fb7a9a9d5f44348ce7e4f8862578b8f09b7ebc43","modified":1674897261900},{"_id":"source/_posts/offer-43.md","hash":"39e8e355aa962e42d40acff72e906b022fe3cbc8","modified":1675257504343},{"_id":"source/about/index.md","hash":"8fda9957260fbff661c2b106d664e25fa2087687","modified":1651504064612},{"_id":"source/_posts/offer-46.md","hash":"1ecae8c9917365cfd53598a6cf66a64554baef4a","modified":1675406554840},{"_id":"source/friends/index.md","hash":"e0f61963e6de2c2246701ad7e1c1ad903f1190aa","modified":1651504265093},{"_id":"source/contact/index.md","hash":"b95431c5b3ef5be7ea558021d29f87620f08e82f","modified":1651504091709},{"_id":"source/_posts/offer-31.md","hash":"98ec36927dd29f18c9e32ca21918466875bf46a4","modified":1673448661984},{"_id":"source/_posts/offer-40.md","hash":"d80807ad05ba6d5e05028532112318ffbf0a16bf","modified":1674970797577},{"_id":"source/_posts/offer-44.md","hash":"2c999340096e03d35d5bd6ef3bec1f54e2f612a7","modified":1675331465132},{"_id":"source/_posts/offer-37.md","hash":"71401601fa10ae87ffe99cdb6f5a7d8c41f76b53","modified":1674202528736},{"_id":"source/tags/index.md","hash":"8aa6920172756c86def31d5641618065eba7067b","modified":1651504031038},{"_id":"source/_posts/offer-32-3.md","hash":"e8bc07436dd6d31076e850ffa707bb039f04ef66","modified":1673761705708},{"_id":"source/images/kylin_logo.png","hash":"8f4432f81be9a8258b74ad64a4aaabd6c9efcc4f","modified":1675154725427},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"b5a67d4fdd5128fee6690d84c5635dabd8cf8ca5","modified":1675395546480},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","hash":"e294d9d3f5aff0aefd2b3ce8a65b41af85838e11","modified":1651549233886},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"c3142092e1988c1371ae5b8f5513dca4eb59e47b","modified":1651549273699},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"public/atom.xml","hash":"a710321e906221a3a7b9fb07186883d107f70d00","modified":1679208438915},{"_id":"public/search.xml","hash":"55d808937621037d01aef565686aea9892befc96","modified":1679208438915},{"_id":"public/categories/index.html","hash":"911eb13ca48d65bbd0af8e8498dce982794a5df6","modified":1679208438915},{"_id":"public/404/index.html","hash":"8c8b6b23f1b616b5bda878a90c821e52f4f24a11","modified":1678860678702},{"_id":"public/about/index.html","hash":"f08fa6e88eeecf330652d1df1c34aa0015652691","modified":1679208438915},{"_id":"public/contact/index.html","hash":"9b557086c39ec9fff780cd72c6bb2056cb30249a","modified":1678860678702},{"_id":"public/friends/index.html","hash":"9d23fc163a0862e817e28714f58d3008dbf7fcfd","modified":1678860678702},{"_id":"public/tags/index.html","hash":"f1892d7766ea2957673e3e0bc0b54b7fa0cd3ed9","modified":1679208438915},{"_id":"public/2023/02/02/offer-44/index.html","hash":"633458be20a633f29004b24f9742c0f5da11869a","modified":1678860678702},{"_id":"public/2023/02/03/offer-46/index.html","hash":"cbaa608dca2f27ca110a838cbf61f4303c1a3af7","modified":1678860678702},{"_id":"public/2023/02/01/offer-43/index.html","hash":"054efd31a004b842589deff9235db048e19b8629","modified":1678860678702},{"_id":"public/2023/01/31/kylin-5-debug/index.html","hash":"5147da8e1c1917ec18bd0db6b592969f15fc554f","modified":1678860678702},{"_id":"public/2023/01/31/offer-42/index.html","hash":"a743cf507c6210ec5755acffa0b4d04001f37b3e","modified":1678860678702},{"_id":"public/2023/01/30/offer-41/index.html","hash":"c2420d8497df587e23106fddc7886c0c349a87d5","modified":1678860678702},{"_id":"public/2023/01/29/offer-40/index.html","hash":"e0b05923c3a1c9b67bc50ad00d3f2cc93275394f","modified":1678860678702},{"_id":"public/2023/01/28/offer-39/index.html","hash":"a3e5eeda029dae02267bf61fa85d619768d5858b","modified":1678860678702},{"_id":"public/2023/01/20/offer-37/index.html","hash":"111eef85507b37f85feffd86c330b54ab820a9fa","modified":1678860678702},{"_id":"public/2023/01/19/offer-36/index.html","hash":"c5baea1dbb8482348a334b99f564a093d701fe0f","modified":1678860678702},{"_id":"public/2023/01/18/offer-35/index.html","hash":"b82ce950f906964720912901c4201e3b7e004313","modified":1678860678702},{"_id":"public/2023/01/17/offer-34/index.html","hash":"73cca0889adba8b2be321a55419be671867a6664","modified":1678860678702},{"_id":"public/2023/01/16/offer-33/index.html","hash":"ff1d5c292911f0055c6fbcf9a1605d0cab58efc1","modified":1678860678702},{"_id":"public/2023/01/15/offer-32-3/index.html","hash":"a743adc537f4e03703c18237be013d5aafd2e25a","modified":1678860678702},{"_id":"public/2023/01/13/offer-32-2/index.html","hash":"b14ad51644a76fdacbaba5bb2d127022bcdaee9b","modified":1678860678702},{"_id":"public/2023/01/12/offer-32/index.html","hash":"a55a15e5de2c065bb66cd05145577e024326c585","modified":1678860678702},{"_id":"public/2023/01/11/offer-31/index.html","hash":"6398593346c479e411b148af0b66fa13efb96669","modified":1678860678702},{"_id":"public/2023/01/10/offer-30/index.html","hash":"c6f26e54088604798bf94945702a1b31119bface","modified":1678860678702},{"_id":"public/2023/01/09/offer-29/index.html","hash":"454a3141e6100cc1256ef160bc0443f44d57dc1f","modified":1678860678702},{"_id":"public/2023/01/06/offer-28/index.html","hash":"bc23891d4d57a02697c33aa99da55c2047c32b05","modified":1678860678702},{"_id":"public/2023/01/05/offer-27/index.html","hash":"3fba8461a4c115fde0f6264bcf6617abe7e1a1f2","modified":1678860678702},{"_id":"public/2023/01/04/offer-26/index.html","hash":"62015d56aa0429d3644ecd0a80a233b55105a1b8","modified":1678860678702},{"_id":"public/2023/01/03/offer-25/index.html","hash":"69de66198442d8607c4fee10ecba8fee46a17c27","modified":1678860678702},{"_id":"public/2022/12/30/offer-24/index.html","hash":"6e389ee4bd68ddf7236d79c145328e5a0aaa438b","modified":1678860678702},{"_id":"public/2022/12/29/offer-22/index.html","hash":"f3c91e54d92c887ae2ad4b75b99fe44ca7a65da2","modified":1678860678702},{"_id":"public/2022/12/28/offer-21/index.html","hash":"e7487c3ed946f3226cdaa6ff74f13ab883a1e9bd","modified":1678860678702},{"_id":"public/2022/12/27/offer-20/index.html","hash":"6e8163db55b25bf5e83b23371396bfa771a5236f","modified":1678860678702},{"_id":"public/2022/12/26/offer-19/index.html","hash":"9058dcbe26f40d06ce32a37a071b7a88f45ac8e9","modified":1678860678702},{"_id":"public/2022/12/23/offer-18/index.html","hash":"68dc77cce82fb2be3826bc48baa3a0afaa9e271e","modified":1678860678702},{"_id":"public/2022/12/22/offer-17/index.html","hash":"8a3eea4d72262200ccba593773e3bafc35f5daa8","modified":1678860678702},{"_id":"public/2022/12/21/offer-16/index.html","hash":"79d4c44910770e470a46d3036918bad969da2507","modified":1678860678702},{"_id":"public/2022/12/19/offer-14/index.html","hash":"78099097e7b6095fe3f97d861d251192feb682ed","modified":1678860678702},{"_id":"public/2022/12/19/hello-world/index.html","hash":"83a0e73bcce02392b93f62bfa3dd72d75e4ba76f","modified":1678860678702},{"_id":"public/2022/12/11/offer-12/index.html","hash":"39505a50825d5c516ff0fda81cc90b00a696b698","modified":1678860678702},{"_id":"public/2022/12/09/offer-11/index.html","hash":"f207cb13ac3a866a5a14651577badd96bd35d9b4","modified":1678860678702},{"_id":"public/2022/12/08/offer-10-2/index.html","hash":"c43c4aa5e0021b0c0b5bbb8e86dc1963e4777464","modified":1678860678702},{"_id":"public/2022/12/07/offer-10-1/index.html","hash":"590fc80c7c1c77f045c97ef9b6f60a5c9683b11b","modified":1678860678702},{"_id":"public/2022/12/06/offer-09/index.html","hash":"f0058f1d889c3a075d2005d902abb97c30f1f6a5","modified":1678860678702},{"_id":"public/2022/12/05/offer-07/index.html","hash":"9d0a669f60c82fb34d2527415ddbdd88b535b61f","modified":1678860678702},{"_id":"public/2022/12/02/offer-06/index.html","hash":"d9d0f0435f3a60ac0ff1aa01852b5817f5176999","modified":1678860678702},{"_id":"public/2022/12/01/offer-05/index.html","hash":"9a67f0a3696672e7dc78ed12df4f38eed5cda216","modified":1678860678702},{"_id":"public/2022/11/29/offer-04/index.html","hash":"33219e4bf87f97401edd458a52f7e5d3c4a19f06","modified":1678860678702},{"_id":"public/2022/11/24/offer-03/index.html","hash":"01ff4ba2ed705a9492c3fa54bbe242cac70cfcd1","modified":1678860678702},{"_id":"public/2022/11/21/lc-204/index.html","hash":"e8d3deee34d6b70ca9c9e3876449aa919ca7d4c4","modified":1678860678702},{"_id":"public/2022/11/18/lc-202/index.html","hash":"3ef2e4ce998b35d1326c90016bf5f94f409e3d08","modified":1678860678702},{"_id":"public/2022/11/17/lc-217/index.html","hash":"b0e01c2bf8e5e4a536f103093589474f5b4c08ce","modified":1678860678702},{"_id":"public/2022/11/15/lc-149/index.html","hash":"0f1511b4c4f04e0d385262f3325c27b041997a75","modified":1678860678702},{"_id":"public/2022/11/14/lc-140/index.html","hash":"91aa7b8038074d1a533f9ea09037c1017f90d23f","modified":1678860678702},{"_id":"public/2022/11/10/lc-739/index.html","hash":"6e4359607799b1c75dff60c55d0c23002d79b280","modified":1678860678702},{"_id":"public/2022/11/10/lc-647/index.html","hash":"8f5630f4f5d5a5ad16bd426d72c79c1b7608fc0f","modified":1678860678702},{"_id":"public/2022/11/04/lc-621/index.html","hash":"b657fdfad9c7cc74f3b77d313ab67c9e604914cf","modified":1678860678702},{"_id":"public/2022/11/02/lc-617/index.html","hash":"b6f06f431328788a7b5776f99c89be9f560ceeec","modified":1678860678702},{"_id":"public/2022/10/31/lc-560/index.html","hash":"177121f08ab88fae8fc2641c7fea42918682a1ec","modified":1678860678702},{"_id":"public/2022/11/01/lc-581/index.html","hash":"220a67fa56c3726375b60d90d9fc37d2eb3f1de7","modified":1678860678702},{"_id":"public/2022/10/28/lc-543/index.html","hash":"e90c1a9c1e4b86b4674fcf3219a6fda7c726b997","modified":1678860678702},{"_id":"public/2022/10/27/lc-538/index.html","hash":"11a30fcfd3cd9cca8985fe443d429bc190edabaa","modified":1678860678702},{"_id":"public/2022/10/26/lc-448/index.html","hash":"c1248cf1de20eec8278409e2cf0162236e373018","modified":1678860678702},{"_id":"public/2022/10/24/lc-416/index.html","hash":"8d2c8aa4dd62f3c86ee07af6174ba2962de24c93","modified":1678860678702},{"_id":"public/2022/10/08/lc-301/index.html","hash":"a0e323cebf829d969a3389f7c28d5816945e3016","modified":1678860678702},{"_id":"public/2022/10/07/lc-283/index.html","hash":"4ae3f57a4047f201638158dcb81bc0dd1dc11ae6","modified":1678860678702},{"_id":"public/2022/10/06/lc-297/index.html","hash":"d5948a034c098c286cba230d4ec74f00a28d160c","modified":1678860678702},{"_id":"public/2022/09/29/lc-287/index.html","hash":"26238a40885c5a30aa97e7dd02ad2887b57aeb9b","modified":1678860678702},{"_id":"public/2022/09/28/lc-279/index.html","hash":"6edf798037f01c346f70388dd921affde8cd0000","modified":1678860678702},{"_id":"public/2022/09/27/lc-240/index.html","hash":"b8f8898590cc638b946fecead15d0d8a362aed6f","modified":1678860678702},{"_id":"public/2022/09/26/lc-239/index.html","hash":"31c1e2373a4663fba65f22db69f2fd391d7f1968","modified":1678860678702},{"_id":"public/2022/09/25/lc-238/index.html","hash":"35caef4c267e3429f4803ade6fba378d6c77465d","modified":1678860678702},{"_id":"public/2022/09/23/lc-236/index.html","hash":"7816ea9180ed22c50d64277e712c43e0c137a17a","modified":1678860678702},{"_id":"public/2022/09/22/lc-234/index.html","hash":"fb55e8772347914783dc26cdd5fa4448b3d4d264","modified":1678860678702},{"_id":"public/2022/09/21/lc-226/index.html","hash":"f8f3b52bc9ca10d076b9ba3f9047adb8d49aa4bb","modified":1678860678702},{"_id":"public/2022/09/20/lc-221/index.html","hash":"786a45038c7274041b697b3d9bf00b9c38faae9f","modified":1678860678702},{"_id":"public/2022/09/19/lc-215/index.html","hash":"2b89202cccdb3becc994df3f9b637fa982485eaa","modified":1678860678702},{"_id":"public/2022/09/18/lc-208/index.html","hash":"c69e14fac9f107c6dd88e71aae70b03f313ca10e","modified":1678860678702},{"_id":"public/2022/09/16/lc-207/index.html","hash":"af2476e1123ddb98f3a7499ed9f06b7fa494d54d","modified":1678860678702},{"_id":"public/2022/09/15/lc-206/index.html","hash":"669bfff6ce4f9df695b673db01300f9be0fd1211","modified":1678860678702},{"_id":"public/2022/09/14/lc-200/index.html","hash":"54ecbf43bf248d94dfc1d7c5647f0cbb775849ad","modified":1678860678702},{"_id":"public/2022/09/13/lc-198/index.html","hash":"9ed87c04dd11f21cd1f0355037bca31e8bb6bdf8","modified":1678860678702},{"_id":"public/2022/09/09/lc-169/index.html","hash":"493f1924fb90e71ec3380656010a894bd5aa1d00","modified":1678860678702},{"_id":"public/2022/09/07/lc-155/index.html","hash":"53abce35129ecfdc82826ed53752b9a9be89de35","modified":1678860678702},{"_id":"public/2022/09/08/lc-160/index.html","hash":"4cb032a372d9d18b4eec50ea9ea21de88f4bb943","modified":1678860678702},{"_id":"public/2022/09/06/lc-152/index.html","hash":"7d6a8215f8d0c50020ef9d9720fd8bcb62439192","modified":1678860678702},{"_id":"public/2022/09/05/lc-148/index.html","hash":"4e8df8f79a80545e188566d3f598e07c1920d68e","modified":1678860678702},{"_id":"public/2022/09/05/lc-146/index.html","hash":"851de3ee0657554349637d8d46e6475fb4b49c11","modified":1678860678702},{"_id":"public/2022/09/01/lc-142/index.html","hash":"dd8986d55dd679fb91a1997b5f5c4bb6a9a04b2a","modified":1678860678702},{"_id":"public/2022/08/31/lc-141/index.html","hash":"c29c7ea47b0fc3e8d9e50cb72631308991be2903","modified":1678860678702},{"_id":"public/2022/08/30/lc-139/index.html","hash":"c4db4d14a7936b53a865ffac80ec2d184d371a15","modified":1678860678702},{"_id":"public/2022/08/29/lc-136/index.html","hash":"e4f4b9918527794a6f17e820a2804ea25a6e1cd8","modified":1678860678702},{"_id":"public/2022/08/26/lc-128/index.html","hash":"d05e6145728847587bd603c83ae01e79abd41029","modified":1678860678702},{"_id":"public/2022/08/25/lc-124/index.html","hash":"932ca22b186e12fbfc52938df112ac72298348c6","modified":1678860678702},{"_id":"public/2022/08/24/lc-121/index.html","hash":"98a187e5b02966eeb9e76dba15fde5c5e332ea11","modified":1678860678702},{"_id":"public/2022/08/23/lc-114/index.html","hash":"3b8f805cf4efc6b43a6e2473269d2d6793c543ac","modified":1678860678702},{"_id":"public/2022/08/22/lc-105/index.html","hash":"8f711750f29827b221547772e2ffeaa706823243","modified":1678860678702},{"_id":"public/2022/08/18/lc-104/index.html","hash":"77544f1ee3560adf9fbf04f58cbeea1487935e70","modified":1678860678702},{"_id":"public/2022/08/16/lc-101/index.html","hash":"cf69cce48c22f816c260979bd957ac1531cd0d2d","modified":1678860678702},{"_id":"public/2022/08/17/lc-102/index.html","hash":"dea2271ebadfe993621297817515edab3216f122","modified":1678860678702},{"_id":"public/2022/08/15/lc-98/index.html","hash":"9cf0e45376be6302ed0b1e980e642323a26a49b5","modified":1678860678702},{"_id":"public/2022/08/12/lc-94/index.html","hash":"6db15cdf4a57cc65206aabda2d2e61fe0edb7bdc","modified":1678860678702},{"_id":"public/2022/08/11/lc-91/index.html","hash":"82657228e319e28e7bc4d47d5377424935dfc887","modified":1678860678702},{"_id":"public/2022/08/10/lc-88/index.html","hash":"ae58bb688a89a4a11a2c8054d52e547ce382022d","modified":1678860678702},{"_id":"public/2022/08/09/lc-84/index.html","hash":"144a8c04c381d10eabad94f20ecced780a3b6a91","modified":1678860678702},{"_id":"public/2022/08/08/lc-79/index.html","hash":"cdc6f106176e167c9d48b1fdae1e7b1c8c85491a","modified":1678860678702},{"_id":"public/2022/08/05/lc-78/index.html","hash":"fc5de14c503b11575abb3aef4f8a1e370619dd5b","modified":1678860678702},{"_id":"public/2022/08/04/lc-76/index.html","hash":"6f74030ea168272b06ee0f3b4178b723cbfff9eb","modified":1678860678702},{"_id":"public/2022/08/03/lc-75/index.html","hash":"fe4c5398cb81eca9d07edc8d3089868294b7dac3","modified":1678860678702},{"_id":"public/2022/08/02/lc-73/index.html","hash":"eb00cb07a6c775a56a7f7b16048683ee37fbb9a8","modified":1678860678702},{"_id":"public/2022/08/01/lc-70/index.html","hash":"3afaa2c8c0b237d4c80204c53c088e47e592b7ac","modified":1678860678702},{"_id":"public/2022/07/29/lc-69/index.html","hash":"4a9f6261d4704efa8914aff786b7271a59088ca8","modified":1678860678702},{"_id":"public/2022/07/28/lc-66/index.html","hash":"1747899e8061908227cae2fe7459a53d72ffd55a","modified":1678860678702},{"_id":"public/2022/07/27/lc-62/index.html","hash":"b69b7c2c88de0536f3c4d42ce7565d0672297445","modified":1678860678702},{"_id":"public/2022/07/26/lc-56/index.html","hash":"e057e4ed902e64583c851fad10342aacf97ce135","modified":1678860678702},{"_id":"public/2022/07/22/lc-55/index.html","hash":"4edba19d500ef6e2c85595c0617309f2e4dca992","modified":1678860678702},{"_id":"public/2022/07/21/lc-54/index.html","hash":"15c254f4ae09e7de8950e1da658a9d13e6440aeb","modified":1678860678702},{"_id":"public/2022/07/20/lc-53/index.html","hash":"d274831a82af8ff47e1a229da632254b0a7bb47c","modified":1678860678702},{"_id":"public/2022/07/19/lc-50/index.html","hash":"ea895594270b1479e2e71cec50904d25b5eabbd6","modified":1678860678702},{"_id":"public/2022/07/18/lc-49/index.html","hash":"f46981d2aaad8f767288ab3ef3c297d973b3e962","modified":1678860678702},{"_id":"public/2022/07/13/lc-48/index.html","hash":"67796996df5e53fc47c5d958b6b04837b1db1992","modified":1678860678702},{"_id":"public/2022/07/12/lc-46/index.html","hash":"f4df0e462bbb7ec3265638d294ec8c252017c6b2","modified":1678860678702},{"_id":"public/2022/07/11/lc-44/index.html","hash":"baa05342c1bd974897341df5a9a0a484dd4a26fb","modified":1678860678702},{"_id":"public/2022/07/08/lc-42/index.html","hash":"04f65756b28164e38d54a947f1eb6128ac621785","modified":1678860678702},{"_id":"public/2022/07/06/lc-41/index.html","hash":"d7291dec375cf839fee03950c9a3b54ffd03f67e","modified":1678860678702},{"_id":"public/2022/07/05/lc-38/index.html","hash":"c2c7eb4048afcc64b1642c85df4b08c65ae97550","modified":1678860678702},{"_id":"public/2022/07/04/lc-36/index.html","hash":"696be2385f007bc246786d595ff0b3f4bcd1c935","modified":1678860678702},{"_id":"public/2022/07/01/lc-34/index.html","hash":"1893bdb66ead263352b299dd9b4d36cbb565f4a5","modified":1678860678702},{"_id":"public/2022/06/29/lc-33/index.html","hash":"cc1b8e4d48902ec956b1c3ae29490402fbc48ebb","modified":1678860678702},{"_id":"public/2022/06/28/lc-29/index.html","hash":"43fe758ae41e0fc500fcf0643c0213662714b05f","modified":1678860678702},{"_id":"public/2022/06/27/lc-28/index.html","hash":"3fd09f86f5c608d5801d2df0dc6e90c36944d6eb","modified":1678860678702},{"_id":"public/2022/06/24/lc-26/index.html","hash":"af3fca6270434a3f2721ddd6da91c2829f1ba06b","modified":1678860678702},{"_id":"public/2022/06/22/lc-23/index.html","hash":"b9e48ce9779af95d7304b17a1c41492fad3f84e1","modified":1678860678702},{"_id":"public/2022/06/21/lc-22/index.html","hash":"4a7296412a6243f42d31be2701f404e9585f649d","modified":1678860678702},{"_id":"public/2022/06/20/lc-21/index.html","hash":"0af024538df251066b9f178fe9dbd434a3fe830b","modified":1678860678702},{"_id":"public/2022/06/18/lc-20/index.html","hash":"b7504c0d011cc88f5cbce14b23653716cb9e2100","modified":1678860678702},{"_id":"public/2022/06/17/lc-19/index.html","hash":"cbbebb074c08dc6080dbb5a38cb60c5aa3a3535a","modified":1678860678702},{"_id":"public/2022/06/16/lc-17/index.html","hash":"d26890b96bd98e478925086f76bb80c3a46b51aa","modified":1678860678702},{"_id":"public/2022/06/15/lc-15/index.html","hash":"90373d5b766f7114d3d0aade7511db5a327c0b9f","modified":1678860678702},{"_id":"public/categories/leetcode/index.html","hash":"1e55544db6007a3f3051332ee0c067e1ceae2ac6","modified":1679208438915},{"_id":"public/categories/leetcode/page/2/index.html","hash":"3b48c5ee6cd2b5881dc2ce48d65dddb54c3c5438","modified":1679208438915},{"_id":"public/categories/leetcode/page/3/index.html","hash":"0b91a1c995b5d1d00c0d30ae770d41c10cd4977b","modified":1679208438915},{"_id":"public/categories/leetcode/page/4/index.html","hash":"3a1c9d84b1f565b1c7e53561647978c37d75db5b","modified":1679208438915},{"_id":"public/categories/leetcode/page/5/index.html","hash":"73f6ae407a9d4fb03c9918b583efc75c1db25c87","modified":1679208438915},{"_id":"public/categories/leetcode/page/6/index.html","hash":"73942a07f0ec62d35b6ce2d27d4f9504982a07d1","modified":1679208438915},{"_id":"public/categories/leetcode/page/7/index.html","hash":"c722fbdc5e9680d8d845056a59624beeb561ec94","modified":1679208438915},{"_id":"public/categories/leetcode/page/8/index.html","hash":"d237bdbb1e2c2365c21e07e62f32fb5c7fe1bdaa","modified":1679208438915},{"_id":"public/categories/leetcode/page/9/index.html","hash":"dc436d34864def0a6d7c7093c77c542160aaeabd","modified":1679208438915},{"_id":"public/categories/leetcode/page/10/index.html","hash":"e0334f57bd7a4c47f338994bbb4fb66515a36471","modified":1679208438915},{"_id":"public/categories/leetcode/page/11/index.html","hash":"287a86aa682ee77f149c075c50896fad65488bb2","modified":1679208438915},{"_id":"public/categories/bigdata/index.html","hash":"305af4d50183c361c0113035b89d10fb4d297793","modified":1679208438915},{"_id":"public/categories/默认/index.html","hash":"beab0c3d7992c0361790eb7214eefc8e82ef48ec","modified":1679208438915},{"_id":"public/archives/index.html","hash":"4b06ae52bdc1d87a0fc3a7e744eaab9a9789bc13","modified":1679208438915},{"_id":"public/archives/page/2/index.html","hash":"a31a787ce75c445652c583d4c09cce77f50862aa","modified":1679208438915},{"_id":"public/archives/page/3/index.html","hash":"8e3e316eca5e97f8cb77d4bc8aa2a61147725e35","modified":1679208438915},{"_id":"public/archives/page/4/index.html","hash":"33f3503750e691a624da204a6b32ebdd6194d3ad","modified":1679208438915},{"_id":"public/archives/page/5/index.html","hash":"017530efd521b492c96c6471b663a3227259faa1","modified":1679208438915},{"_id":"public/archives/page/6/index.html","hash":"a6f8f38f6f6b3f90d048e6d423c62a03bf4459d1","modified":1679208438915},{"_id":"public/archives/page/7/index.html","hash":"32a6cde974406adc08e5571e7b8d3c0fce1e5cff","modified":1679208438915},{"_id":"public/archives/page/8/index.html","hash":"ca450e3cd7dd6660588e020841e50a9a5bc7a2f1","modified":1679208438915},{"_id":"public/archives/page/9/index.html","hash":"91fdf9890145321651bb0c55178902e5ccc64842","modified":1679208438915},{"_id":"public/archives/page/10/index.html","hash":"7c242d6373040852f5b3028d72e1edf15c223b40","modified":1679208438915},{"_id":"public/archives/page/11/index.html","hash":"b3b6e76af5db2ac1a96225ab6e18f8a677784b87","modified":1679208438915},{"_id":"public/archives/2022/index.html","hash":"7cc2ebbd5fc1af26ed6ce4bea0d120acad45af0c","modified":1679208438915},{"_id":"public/archives/page/12/index.html","hash":"5bd6929ffcb082c61c5510581bb881c4ee22b198","modified":1679208438915},{"_id":"public/archives/2022/page/2/index.html","hash":"7bafc53df895e25676a367cc14e29fad74105de9","modified":1679208438915},{"_id":"public/archives/2022/page/3/index.html","hash":"4d9f1943d10a003cbd497fc9996288b038f4092e","modified":1679208438915},{"_id":"public/archives/2022/page/4/index.html","hash":"9ba3da1ca33f7e9eb0c6f58d7b20fcdf7e2fda59","modified":1679208438915},{"_id":"public/archives/2022/page/5/index.html","hash":"b223e4b6afb281bfb971f41fde3e527ac042c340","modified":1679208438915},{"_id":"public/archives/2022/page/6/index.html","hash":"644c3b82e3102231625505c7e00b7111e4177790","modified":1679208438915},{"_id":"public/archives/2022/page/7/index.html","hash":"a95a6cf4947d01e67b87f217c0c3fb2c1b7df26b","modified":1679208438915},{"_id":"public/archives/2022/page/8/index.html","hash":"34dc3b6585e2ea45417e731a7bbf988a6d82d0c6","modified":1679208438915},{"_id":"public/archives/2022/page/9/index.html","hash":"47491eea2dd01946fc11f84309ffb62d5ff5fd61","modified":1679208438915},{"_id":"public/archives/2022/page/10/index.html","hash":"f00e3507418db5dfc76d2657936f6ed7bbf40d6a","modified":1679208438915},{"_id":"public/archives/2022/06/index.html","hash":"5e922fcee8f33fe82a85acdd8bab5f5ab010e517","modified":1679208438915},{"_id":"public/archives/2022/07/index.html","hash":"29c9b600062c1f8793ae41cca061bef5fe819193","modified":1679208438915},{"_id":"public/archives/2022/07/page/2/index.html","hash":"aecb897371205ddd75c0618f4b46fda1f42bdf2a","modified":1679208438915},{"_id":"public/archives/2022/08/index.html","hash":"126cda72eaee90ede2b0044088eda4baaa7a6041","modified":1679208438915},{"_id":"public/archives/2022/08/page/2/index.html","hash":"5fe205b9031ae2acf11d6e4ff9d8a50862fd7c68","modified":1679208438915},{"_id":"public/archives/2022/09/index.html","hash":"66ce868435d38df029cee35f1374df315d3f208e","modified":1679208438915},{"_id":"public/archives/2022/09/page/2/index.html","hash":"9046e6b36f84073f7584002b0f4834ddb2b4d00b","modified":1679208438915},{"_id":"public/archives/2022/10/index.html","hash":"0ade88cba2c467074371c4c2ae92d78eabc04b6c","modified":1679208438915},{"_id":"public/archives/2022/11/index.html","hash":"904721e67add4e218b48e364fb8073ffd427e70b","modified":1679208438915},{"_id":"public/archives/2022/12/index.html","hash":"9e38ca591274f9c3ab7658a17119138685a82dd4","modified":1679208438915},{"_id":"public/archives/2022/12/page/2/index.html","hash":"33fc64e5aee74da5df911afbc02de5e8df0461a9","modified":1679208438915},{"_id":"public/archives/2023/index.html","hash":"c8da9fb8bbf55570d29191389b6643c73c63e6fe","modified":1679208438915},{"_id":"public/archives/2023/page/2/index.html","hash":"eea34a58d05751cf3148462b25a4764fd21e6c30","modified":1679208438915},{"_id":"public/archives/2023/01/index.html","hash":"0e0ca37e3978d5bbcd3328c39bf566abd62b978c","modified":1679208438915},{"_id":"public/archives/2023/01/page/2/index.html","hash":"a30bb5d300f2753598df8cd2ea924e8ef16fee26","modified":1679208438915},{"_id":"public/archives/2023/02/index.html","hash":"be67bfbb55fa8048bc902913b4cf89190263fe97","modified":1679208438915},{"_id":"public/index.html","hash":"f6d4de763d59b65a9f029726b285fc329199fdec","modified":1679208438915},{"_id":"public/page/2/index.html","hash":"9a06050ffa93782da1fb30da42ed704f2adad5fc","modified":1679208438915},{"_id":"public/page/3/index.html","hash":"f8c95e38641fc74f9a004207c651cb3c951404d8","modified":1679208438915},{"_id":"public/page/4/index.html","hash":"61d7e801e6fa46ebbaca676480145ede5825f55d","modified":1679208438915},{"_id":"public/page/5/index.html","hash":"552e3551c97f3ea2feff620a08bc6336a23bcbf5","modified":1679208438915},{"_id":"public/page/6/index.html","hash":"d5d2a9ab45138c4dac94a6b6e07c1576e72fd4cb","modified":1679208438915},{"_id":"public/page/7/index.html","hash":"d6f9729ce9ca3e66688a14877c7e466c76646b78","modified":1679208438915},{"_id":"public/page/8/index.html","hash":"84aea89d5c7f513bcb0a7c11a359da1223db3a1a","modified":1679208438915},{"_id":"public/page/9/index.html","hash":"f013ec9fcefd117e412aef38bc5459e1ecc5e85b","modified":1679208438915},{"_id":"public/page/10/index.html","hash":"c6467bfe32464a1d2ab648fcf5afac40ec7bc695","modified":1679208438915},{"_id":"public/page/12/index.html","hash":"6f19bf133c4169f41ba05966b49d12ffa37188a0","modified":1679208438915},{"_id":"public/page/13/index.html","hash":"0e94982618785a7536af477002a8c2805b6aff21","modified":1679208438915},{"_id":"public/page/14/index.html","hash":"8e5d4ebe953e7ae96856d5ab3c8233103a36417b","modified":1679208438915},{"_id":"public/page/11/index.html","hash":"873ae072709b108c25c34ef023169abdabb55405","modified":1679208438915},{"_id":"public/tags/leetcode/index.html","hash":"9f267122d00a0c2a8bbeb80e3a030b1b029a832a","modified":1679208438915},{"_id":"public/tags/leetcode/page/2/index.html","hash":"778461e8477adc47945de72873ae4f7e980d703c","modified":1679208438915},{"_id":"public/tags/leetcode/page/3/index.html","hash":"f196a04339eecb99a53d791020bc19ae890c54c7","modified":1679208438915},{"_id":"public/tags/leetcode/page/4/index.html","hash":"178e10fc31da3266c0bce65df95abf51bd32bcb8","modified":1679208438915},{"_id":"public/tags/leetcode/page/5/index.html","hash":"1aacafdd2ad8ad1c5d6253866b737689cae77ea3","modified":1679208438915},{"_id":"public/tags/leetcode/page/6/index.html","hash":"3afb63c9ec3251f94b2738ded1631ab91fa8741c","modified":1679208438915},{"_id":"public/tags/leetcode/page/7/index.html","hash":"46b52463550e2deed7719f932d8016bbb7091cf0","modified":1679208438915},{"_id":"public/tags/leetcode/page/8/index.html","hash":"2e52341a1c9db4dbcb19a22029a71c8ac796b9d5","modified":1679208438915},{"_id":"public/tags/leetcode/page/9/index.html","hash":"874cdab2621d781bca3845f99eb240f0e9b22875","modified":1679208438915},{"_id":"public/tags/leetcode/page/10/index.html","hash":"aff298eecde24745e6e6b24a253c3453b5e9a69e","modified":1679208438915},{"_id":"public/tags/leetcode/page/11/index.html","hash":"1950cfdc07b8c471b99298853dd999046877a166","modified":1679208438915},{"_id":"public/tags/kylin/index.html","hash":"b08620b05b0f0331baebf30fe3a6e00b0c87accc","modified":1679208438915},{"_id":"public/tags/其他/index.html","hash":"5673b9d24ba97ced0c4d83c07ba28c227ea77ad2","modified":1679208438915},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1675406570052},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1675406570052},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1675406570052},{"_id":"public/images/kylin_logo.png","hash":"8f4432f81be9a8258b74ad64a4aaabd6c9efcc4f","modified":1675406570052},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1675406570052},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1675406570052},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1675406570052},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1675406570052},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1675406570052},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1675406570052},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1675406570052},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1675406570052},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1675406570052},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1675406570052},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1675406570052},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1675406570052},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1675406570052},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1675406570052},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1675406570052},{"_id":"public/medias/reward/alipay.png","hash":"e294d9d3f5aff0aefd2b3ce8a65b41af85838e11","modified":1675406570052},{"_id":"public/medias/reward/wechat.png","hash":"c3142092e1988c1371ae5b8f5513dca4eb59e47b","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1675406570052},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1675406570052},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1675406570052},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1675406570052},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1675406570052},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1675406570052},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1675406570052},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1675406570052},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1675406570052},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1675406570052},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1675406570052},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1675406570052},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1675406570052},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1675406570052},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1675406570052},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1675406570052},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1675406570052},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1675406570052},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1675406570052},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1675406570052},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1675406570052},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1675406570052},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1675406570052},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1675406570052},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1675406570052},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1675406570052},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1675406570052},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1675406570052},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1675406570052},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1675406570052},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1675406570052},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1675406570052},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1675406570052},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1675406570052},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1675406570052},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1675406570052},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1675406570052},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1675406570052},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1675406570052},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1675406570052},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1675406570052},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1675406570052},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1675406570052},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1675406570052},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1675406570052},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1675406570052},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1675406570052},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1675406570052},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1675406570052},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1675406570052},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1675406570052},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1675406570052},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1675406570052},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1675406570052},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1675406570052},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1675406570052},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1675406570052},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1675406570052},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1675406570052},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1675406570052},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1675406570052},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1675406570052},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1675406570052},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1675406570052},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1675406570052},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1675406570052},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1675406570052},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1675406570052},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1675406570052},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1675406570052},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1675406570052},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1675406570052},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1675406570052},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1675406570052},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1675406570052},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1675406570052},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1675406570052},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1675406570052},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1675406570052},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1675406570052},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1675406570052},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1675406570052},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1675406570052},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1675406570052},{"_id":"source/_posts/offer-47.md","hash":"08572ca9a805a6583e5488535ec3fc503ffea22b","modified":1675577251901},{"_id":"public/2023/02/05/offer-47/index.html","hash":"f553e8ac5f5017be76d143990819f008e40ec429","modified":1678860678702},{"_id":"source/_posts/offer-48.md","hash":"28fe248bfbbebc3175f965e5efdfb190fe4a5ee7","modified":1675673728650},{"_id":"public/2023/02/06/offer-48/index.html","hash":"f5ac289731f4664883fb1e34ffdbbcb560260385","modified":1678860678702},{"_id":"public/archives/2023/page/3/index.html","hash":"3aca2272ee4eb7cce88743473c67524e4f9d1ece","modified":1679208438915},{"_id":"source/_posts/offer-49.md","hash":"49cacb88df1a8d1a9304eceb4dc0799cd85a243d","modified":1675750312518},{"_id":"public/2023/02/07/offer-49/index.html","hash":"bb0a0c9428e672ff7614d5d05c6d539ba75d5619","modified":1678860678702},{"_id":"public/categories/leetcode/page/12/index.html","hash":"5658bbdb058c8f4cccd538f8f9ed3d94fb44788a","modified":1679208438915},{"_id":"public/tags/leetcode/page/12/index.html","hash":"6ee95e8f536736ffa2159cb80f0993ab17a79fc6","modified":1679208438915},{"_id":"source/_posts/offer-50.md","hash":"6432cdf5770454877b12d588819bede8b2940d02","modified":1675826687341},{"_id":"public/2023/02/08/offer-50/index.html","hash":"cfb00420f397a5d02959858d24d42e080958ea1c","modified":1678860678702},{"_id":"source/_posts/offer-51.md","hash":"85cb38dc881e8c1e80a2e4a2974325d5ffb6d840","modified":1675921564604},{"_id":"public/2023/02/09/offer-51/index.html","hash":"d9b38ec37e80b31cb696d3b4589e4e46e22e055d","modified":1678860678702},{"_id":"source/_posts/offer-53.md","hash":"dd781aa782bcb428a63445b1b5161343a65ad421","modified":1675999495374},{"_id":"public/2023/02/10/offer-53/index.html","hash":"c8482f9976d4e7a1ee4008bbb6e2c780bd9f641b","modified":1678860678702},{"_id":"source/_posts/offer-54.md","hash":"d21155501e2080f61c6ca8e2cc2d49c2a0d62497","modified":1676181221880},{"_id":"public/2023/02/12/offer-54/index.html","hash":"fcaed0587b80af8c85d4c9fef83b3dc84f3eea53","modified":1678860678702},{"_id":"source/_posts/offer-55-1.md","hash":"acc0c5bf4a0e3fdb4e3d1c9f5c633250dd053eef","modified":1676258601726},{"_id":"public/2023/02/13/offer-55-1/index.html","hash":"1bc7c3c7f8341771bcb3fee4f83124894db7e475","modified":1678860678702},{"_id":"public/page/15/index.html","hash":"edae944e0eb50cd0e1e8280f53d002fa42f43362","modified":1679208438915},{"_id":"source/_posts/offer-55-2.md","hash":"daa58fdc0c13a23b64f7507d003579da13e548ca","modified":1676375520569},{"_id":"public/2023/02/14/offer-55-2/index.html","hash":"9bc839be9734746fb1747f6e65d3ce74519a34e8","modified":1678860678702},{"_id":"source/_posts/offer-56-1.md","hash":"e2c80cca8d6fc947672ab7a7137671d0e7e8490f","modified":1676438537443},{"_id":"public/2023/02/15/offer-56-1/index.html","hash":"1bf958a2d469728042d6282bb1b2ebe9045e3442","modified":1678860678702},{"_id":"public/archives/2023/02/page/2/index.html","hash":"010d468078532d664c8853dec92ba2ab83414b83","modified":1679208438915},{"_id":"source/_posts/offer-56-2.md","hash":"1ef40e95e5da9a57106fffa2410458dad7a552b9","modified":1676519372865},{"_id":"public/2023/02/16/offer-56-2/index.html","hash":"f9a5efbb909d5071fd676315a2be7070bab7b59d","modified":1678860678702},{"_id":"source/_posts/offer-57.md","hash":"4c9f7a764e631f4037094ca6bf7fe58cc1bffade","modified":1676604885394},{"_id":"public/2023/02/17/offer-57/index.html","hash":"d072f57c5d898aea4d1fd6aab82de88df32de791","modified":1678860678702},{"_id":"public/archives/page/13/index.html","hash":"31a0f6e0f3151330dd8bff97cda15827f600a997","modified":1679208438915},{"_id":"source/_posts/offer-57-2.md","hash":"d35f10d9821c8124d67d6ba6f51a6f8cad527f12","modified":1676817346650},{"_id":"public/2023/02/19/offer-57-2/index.html","hash":"2357152bd2756bec508dfbd0cedd147c22fe0bfe","modified":1678860678702},{"_id":"source/_posts/offer-58-1.md","hash":"03e6a551d1c471fb7769cca07e7a895b03cd628e","modified":1676864956697},{"_id":"public/2023/02/20/offer-58-1/index.html","hash":"ee6a7e9d0630cb5092dae6b89781eb8495d0040a","modified":1678860678702},{"_id":"public/archives/2023/page/4/index.html","hash":"f69492c70199ab5e699e4d82d9030a3a7f780818","modified":1679208438915},{"_id":"source/_posts/offer-58-2.md","hash":"943be17b39ac2fedac5ba35ae7228190fc868438","modified":1676958195596},{"_id":"public/2023/02/21/offer-58-2/index.html","hash":"6e4f7a4b2bfa1f19a71bbd824f7c8cd0788f90ce","modified":1678860678702},{"_id":"public/categories/leetcode/page/13/index.html","hash":"ad8a6718360c2ca685bb7485a382bc39c6519ae8","modified":1679208438915},{"_id":"public/tags/leetcode/page/13/index.html","hash":"3636cacb4d4c30371d3e3766c5e9df288a9b62e6","modified":1679208438915},{"_id":"source/_posts/offer-59-1.md","hash":"57df79d5e3e53ec72684084290f0c231f098919a","modified":1677079207969},{"_id":"public/2023/02/22/offer-59-1/index.html","hash":"08ab3db8b6efe3aec6bce7ddaf1e0551f817fd00","modified":1678860678702},{"_id":"source/_posts/offer-60.md","hash":"93f645901c7af25d8ea4e09b1416269a9991e8e2","modified":1677154172031},{"_id":"public/2023/02/23/offer-60/index.html","hash":"9d8a31d70be63c98fe847d834d1740a64387dd73","modified":1678860678702},{"_id":"source/_posts/offer-62.md","hash":"8b7e3bb39cb19355a9b0e768d5db85126c6c0f07","modified":1677222915177},{"_id":"public/2023/02/24/offer-62/index.html","hash":"6d398eb55b159d004fe34eed59dc50498c5209ef","modified":1678860678702},{"_id":"public/page/16/index.html","hash":"5dadb4a1cad7717171bc9d39df3eeba135163733","modified":1679208438915},{"_id":"source/_posts/offer-63.md","hash":"afb450408155a5a8afc313f44a746eb388f6a2d9","modified":1677394736104},{"_id":"public/2023/02/26/offer-63/index.html","hash":"6b558fdfe99ed0c1fffabc31f9e0a3cc941648ea","modified":1678860678702},{"_id":"source/_posts/offer-64.md","hash":"29efb19007e8694f2bd71f1836f35ee40c31a436","modified":1677483375302},{"_id":"public/2023/02/27/offer-64/index.html","hash":"a432f656539ca16ddd3f05d065663571e9bd0fe8","modified":1678860678702},{"_id":"source/_posts/offer-65.md","hash":"00811d36aa0b1372524fce545f340b1832e5ad35","modified":1677565320923},{"_id":"public/2023/02/28/offer-65/index.html","hash":"c06bc27a0bb57456d723dcbf5a5955a579628180","modified":1678860678702},{"_id":"source/_posts/offer-66.md","hash":"38d21be2989648a4a8434ddcf44722d219625918","modified":1677673538236},{"_id":"public/2023/03/01/offer-66/index.html","hash":"59a94b14b6ee253a92f5125ea069909cac97d51d","modified":1678860678702},{"_id":"public/archives/2023/03/index.html","hash":"4db4f969f9f8213d6b78f455c34e3fd53d0fde75","modified":1679208438915},{"_id":"source/_posts/offer-68-1.md","hash":"d0871e00a27b693c4a6bd7350f7a6bd76fcd5eff","modified":1677728912271},{"_id":"public/2023/03/02/offer-68-1/index.html","hash":"6d206a8a9fb366ae567fee322574cf6f05a4e02c","modified":1678860678702},{"_id":"source/_posts/offer-68-2.md","hash":"ea662ebee8828f1e512abb5d582d0c69eefefddd","modified":1677823340539},{"_id":"public/2023/03/03/offer-68-2/index.html","hash":"3383d39c4d3e0e847a7ed3af452e066c7f6a5f9a","modified":1678860678702},{"_id":"public/archives/page/14/index.html","hash":"00c580b96c23db62114f0d916d8af215fe59ae09","modified":1679208438915},{"_id":"source/_posts/offer2-1.md","hash":"74a38f4dd0b4d9af945801c2f2e8e3d506800378","modified":1678007368713},{"_id":"public/2023/03/05/offer2-1/index.html","hash":"3ba9f794bb81c96f3c19d0a301b1d01006eebf03","modified":1678860678702},{"_id":"source/_posts/offer2-2.md","hash":"d121c7e267423f717f8b6df43a6232c71a449776","modified":1678083256845},{"_id":"public/2023/03/06/offer2-2/index.html","hash":"0b870527d2e393b94778db4f7d6c40c3884b8587","modified":1678860678702},{"_id":"public/archives/2023/page/5/index.html","hash":"f02067b956d5b4b4171ed38842699acc01b0b937","modified":1679208438915},{"_id":"source/_posts/offer2-3.md","hash":"51e12019d043beba524804363e07cfbb7def1923","modified":1678160790730},{"_id":"public/2023/03/07/offer2-3/index.html","hash":"b434738a0fc600554f06159d9e5966e2b11035ea","modified":1678860678702},{"_id":"public/categories/leetcode/page/14/index.html","hash":"c126136fc0e799f1e41a0b9535b4d69c7944b420","modified":1679208438915},{"_id":"public/tags/leetcode/page/14/index.html","hash":"122b8db6fdced428c84f00552d7f19a801345f27","modified":1679208438915},{"_id":"source/_posts/offer2-4.md","hash":"cf16c9ac5ea9ab36c55252181cf3697313c660e2","modified":1678259625108},{"_id":"public/2023/03/08/offer2-4/index.html","hash":"85815b65dffef3fc213b9cf65bbb9870900f6a9e","modified":1678860678702},{"_id":"public/page/17/index.html","hash":"b66322e7d7738cd0c489240e3eea7d69461618de","modified":1679208438915},{"_id":"source/_posts/offer2-5.md","hash":"df128a83673503e18d5be5e785e4f9a76d555a23","modified":1678429776536},{"_id":"public/2023/03/09/offer2-5/index.html","hash":"75e0e621ebb1cbff278811945ea42d6fef234226","modified":1678860678702},{"_id":"source/_posts/offer2-6.md","hash":"e81d2e8f5b47b6e7a19f853e85ed904b751295ce","modified":1678633363710},{"_id":"public/2023/03/12/offer2-6/index.html","hash":"f54c438d442a596d1878c923c4de0250ded22a4e","modified":1678860678702},{"_id":"source/_posts/offer2-7.md","hash":"83677f3934debf7ff6bab6e96afe157b447433f1","modified":1678697041201},{"_id":"public/2023/03/13/offer2-7/index.html","hash":"2ddcd5c8890529296de664bb6a0168b8907cb011","modified":1678860678702},{"_id":"source/_posts/offer2-8.md","hash":"262db498ac64bc1adbc285ebe04f2a484cd10527","modified":1678774588374},{"_id":"public/2023/03/14/offer2-8/index.html","hash":"590c2b0d7c8c4a24b8da2533433dc5408e6d7abc","modified":1678860678702},{"_id":"source/_posts/offer2-9.md","hash":"9325222a8a4849f9282426dccf830ce2b7b773ab","modified":1678860658876},{"_id":"public/2023/03/15/offer2-9/index.html","hash":"0e0613b691ce235323a94e2d5acdcad6cfe19898","modified":1678950688944},{"_id":"source/_posts/offer2-10.md","hash":"62746337be41f2872aa30b608f7f15921b9bc7c2","modified":1678950680839},{"_id":"public/2023/03/16/offer2-10/index.html","hash":"1ea076097f42224573645cb6b0bf8078b9fcecac","modified":1679031586149},{"_id":"public/archives/2023/03/page/2/index.html","hash":"de476201547c3f57b42f2c3ae69ad56fa7ac932e","modified":1679208438915},{"_id":"source/_posts/offer2-11.md","hash":"da3c0fb45869aa9cfbda3a2bed5f6091edc89df3","modified":1679031521478},{"_id":"public/2023/03/17/offer2-11/index.html","hash":"55dca168b0580af2f68c5048063456add0dda96b","modified":1679208438915},{"_id":"source/_posts/offer2-12.md","hash":"13ca3cbdb5ccfe21aad5f99d753e133556ff2d70","modified":1679208431764},{"_id":"public/2023/03/19/offer2-12/index.html","hash":"c266fefa4226d99ad5cc0fda7bea52f49d41aa4a","modified":1679208438915},{"_id":"public/archives/page/15/index.html","hash":"b0c25d62355cb5b07012b731f2a1881038d77767","modified":1679208438915}],"Category":[{"name":"leetcode","_id":"cldo5tby400063suu0wvm10cy"},{"name":"bigdata","_id":"cldo5tbyd000l3suu07m417h4"},{"name":"默认","_id":"cldo5tc0g008b3suu05wg8hho"}],"Data":[],"Page":[{"title":"categories","date":"2022-05-02T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-02 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2022-05-02T15:06:43.887Z","path":"categories/index.html","comments":1,"_id":"cldo5tbxt00003suuemlzhjug","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2022-05-02T15:10:57.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2022-05-02 23:10:57\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2023-01-31T08:44:51.790Z","path":"404/index.html","comments":1,"_id":"cldo5tby100023suu8k234tty","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-05-02T15:07:08.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-05-02 23:07:08\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-05-02T15:07:44.612Z","path":"about/index.html","comments":1,"_id":"cldo5tby300043suud60w4a81","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2022-05-02T15:07:32.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-05-02 23:07:32\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2022-05-02T15:08:11.709Z","path":"contact/index.html","comments":1,"_id":"cldo5tby600083suubkwh83ho","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2022-05-02T15:08:05.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-05-02 23:08:05\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-05-02T15:11:05.093Z","path":"friends/index.html","comments":1,"_id":"cldo5tby7000a3suug14l0xpd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-05-02T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-02 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2022-05-02T15:07:11.038Z","path":"tags/index.html","comments":1,"_id":"cldo5tby9000c3suu6e96gz7u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-12-19T03:51:54.484Z","updated":"2022-05-01T07:12:38.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbxw00013suu5ghz11p9","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"lc-101","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-16T07:52:04.000Z","_content":"\n```java\n//Given the root of a binary tree, check whether it is a mirror of itself (i.e.,\n// symmetric around its center). \n//\n// \n// Example 1: \n// \n// \n//Input: root = [1,2,2,3,4,4,3]\n//Output: true\n// \n//\n// Example 2: \n// \n// \n//Input: root = [1,2,2,null,3,null,3]\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the tree is in the range [1, 1000]. \n// -100 <= Node.val <= 100 \n// \n//\n// \n//Follow up: Could you solve it both recursively and iteratively?\n//\n// Related Topics Tree Depth-First Search Breadth-First Search Binary Tree 👍 10\n//559 👎 248\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private boolean isSymmetricFunc(TreeNode leftNode, TreeNode rightNode) {\n        if (leftNode == null && rightNode == null) {\n            return true;\n        }\n\n        if (leftNode == null || rightNode == null || leftNode.val != rightNode.val) {\n            return false;\n        }\n\n        return isSymmetricFunc(leftNode.left, rightNode.right) && isSymmetricFunc(leftNode.right, rightNode.left);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-101.md","raw":"---\ntitle: lc-101\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-16 15:52:04\n---\n\n```java\n//Given the root of a binary tree, check whether it is a mirror of itself (i.e.,\n// symmetric around its center). \n//\n// \n// Example 1: \n// \n// \n//Input: root = [1,2,2,3,4,4,3]\n//Output: true\n// \n//\n// Example 2: \n// \n// \n//Input: root = [1,2,2,null,3,null,3]\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the tree is in the range [1, 1000]. \n// -100 <= Node.val <= 100 \n// \n//\n// \n//Follow up: Could you solve it both recursively and iteratively?\n//\n// Related Topics Tree Depth-First Search Breadth-First Search Binary Tree 👍 10\n//559 👎 248\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private boolean isSymmetricFunc(TreeNode leftNode, TreeNode rightNode) {\n        if (leftNode == null && rightNode == null) {\n            return true;\n        }\n\n        if (leftNode == null || rightNode == null || leftNode.val != rightNode.val) {\n            return false;\n        }\n\n        return isSymmetricFunc(leftNode.left, rightNode.right) && isSymmetricFunc(leftNode.right, rightNode.left);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-101","published":1,"updated":"2022-08-16T15:01:21.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tby100033suu5ciufeli","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the root of a binary tree, check whether it is a mirror of itself (i.e.,</span>\n<span class=\"token comment\">// symmetric around its center). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1,2,2,3,4,4,3]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1,2,2,null,3,null,3]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the tree is in the range [1, 1000]. </span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Could you solve it both recursively and iteratively?</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Tree Depth-First Search Breadth-First Search Binary Tree 👍 10</span>\n<span class=\"token comment\">//559 👎 248</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetricFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> leftNode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> rightNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> rightNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> rightNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> leftNode<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> rightNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isSymmetricFunc</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rightNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSymmetricFunc</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the root of a binary tree, check whether it is a mirror of itself (i.e.,</span>\n<span class=\"token comment\">// symmetric around its center). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1,2,2,3,4,4,3]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1,2,2,null,3,null,3]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the tree is in the range [1, 1000]. </span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Could you solve it both recursively and iteratively?</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Tree Depth-First Search Breadth-First Search Binary Tree 👍 10</span>\n<span class=\"token comment\">//559 👎 248</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetricFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> leftNode<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> rightNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> rightNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> rightNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> leftNode<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> rightNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isSymmetricFunc</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> rightNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSymmetricFunc</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> rightNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-102","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-17T03:52:39.000Z","_content":"\nGiven the `root` of a binary tree, return *the level order traversal of its nodes' values*. (i.e., from left to right, level by level).\n\n \n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n\n```\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n```\n\n**Example 2:**\n\n```\nInput: root = [1]\nOutput: [[1]]\n```\n\n**Example 3:**\n\n```\nInput: root = []\nOutput: []\n```\n\n \n\n**Constraints:**\n\n- The number of nodes in the tree is in the range `[0, 2000]`.\n- `-1000 <= Node.val <= 1000\n\n\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        Queue<TreeNode> myQueue = new LinkedList<>();\n        List<List<Integer>> result = new ArrayList<>();\n\n        if (root == null) {\n            return result;\n        }\n        myQueue.add(root);\n\n        while (!myQueue.isEmpty()) {\n            List<Integer> layerResult = new ArrayList<>();\n            Queue<TreeNode> nextQueue = new LinkedList<>();\n\n            while (!myQueue.isEmpty()) {\n                TreeNode node = myQueue.poll();\n\n                layerResult.add(node.val);\n\n                if (node.left != null) {\n                    nextQueue.add(node.left);\n                }\n                if (node.right != null) {\n                    nextQueue.add(node.right);\n                }\n            }\n            result.add(layerResult);\n            myQueue = nextQueue;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-102.md","raw":"---\ntitle: lc-102\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-17 11:52:39\n---\n\nGiven the `root` of a binary tree, return *the level order traversal of its nodes' values*. (i.e., from left to right, level by level).\n\n \n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n\n```\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n```\n\n**Example 2:**\n\n```\nInput: root = [1]\nOutput: [[1]]\n```\n\n**Example 3:**\n\n```\nInput: root = []\nOutput: []\n```\n\n \n\n**Constraints:**\n\n- The number of nodes in the tree is in the range `[0, 2000]`.\n- `-1000 <= Node.val <= 1000\n\n\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        Queue<TreeNode> myQueue = new LinkedList<>();\n        List<List<Integer>> result = new ArrayList<>();\n\n        if (root == null) {\n            return result;\n        }\n        myQueue.add(root);\n\n        while (!myQueue.isEmpty()) {\n            List<Integer> layerResult = new ArrayList<>();\n            Queue<TreeNode> nextQueue = new LinkedList<>();\n\n            while (!myQueue.isEmpty()) {\n                TreeNode node = myQueue.poll();\n\n                layerResult.add(node.val);\n\n                if (node.left != null) {\n                    nextQueue.add(node.left);\n                }\n                if (node.right != null) {\n                    nextQueue.add(node.right);\n                }\n            }\n            result.add(layerResult);\n            myQueue = nextQueue;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-102","published":1,"updated":"2022-08-17T15:34:40.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tby400053suu0l8ca3r0","content":"<p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes’ values</em>. (i.e., from left to right, level by level).</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Example 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root = [1]\nOutput: [[1]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Example 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root = []\nOutput: []<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n<li>`-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> myQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> layerResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nextQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                layerResult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nextQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nextQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>layerResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            myQueue <span class=\"token operator\">=</span> nextQueue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes’ values</em>. (i.e., from left to right, level by level).</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root &#x3D; [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Example 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root &#x3D; [1]\nOutput: [[1]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Example 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root &#x3D; []\nOutput: []<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n<li>`-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> myQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> layerResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nextQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> myQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                layerResult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nextQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nextQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>layerResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            myQueue <span class=\"token operator\">=</span> nextQueue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"How to setup debugging environment for Kylin5 locally","author":"倪春恩","img":"/source/images/kylin_logo.png","top":false,"hide":false,"cover":true,"coverImg":"/images/kylin_logo.png","toc":false,"date":"2023-01-31T08:44:33.000Z","_content":"\n### 1. Check Software Requirement\n\n| Software     | Comment                                     | Version                                  | Download Link                                                |\n| ------------ | ------------------------------------------- | ---------------------------------------- | ------------------------------------------------------------ |\n| Git          | Fetch branch name and hash of latest commit | latest                                   | https://git-scm.com/book/en/v2/Getting-Started-Installing-Git |\n| Apache Maven | Build Java and Scala source code            | 3.8.2 or latest                          | https://maven.apache.org/download.cgi                        |\n| Node.js      | Build front end                             | 12.14.0 is recommended ( or 12.x ~ 14.x) | [How to switch to older node.js](https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node) |\n| JDK          | Java Compiler and Development Tools         | JDK 1.8.x                                | https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html |\n\nAfter installing the above software, please verify **software requirements** by following commands:\n\n```shell\n$ java -version\n$ mvn -v\n$ node -v\n$ git version\n```\n\n**Options for Packaging Script**\n\n| Option        | Comment                                                      |\n| ------------- | ------------------------------------------------------------ |\n| -official     | If adding this option, the package name won't contain the timestamp |\n| -noThirdParty | If adding this option, third-party binary won't be packaged into binary, current they are influxdb,grafana and PostgreSQL |\n| -noSpark      | If adding this option, spark won't be packaged into the Kylin binary |\n| -noHive1      | By default Kylin 5.0 will support Hive 1.2, if add this option, this binary will support Hive 2.3+ |\n| -skipFront    | If add this option, the front-end won't be built and packaged |\n| -skipCompile  | Add this option will assume java source code no need to be compiled again |\n\n**Other Options for Packaging Script**\n\n| Option     | Comment                                                      |\n| ---------- | ------------------------------------------------------------ |\n| -P hadoop3 | Packaging a Kylin 5.0 software package for running on Hadoop 3.0 + platform. |\n\n**Package Content**\n\n| Option      | Comment                           |\n| ----------- | --------------------------------- |\n| VERSION     | `Apache Kylin ${release_version}` |\n| commit_SHA1 | `${HASH_COMMIT}@${BRANCH_NAME}`   |\n\n**Package Name convention**\n\nPackage name is `apache-kylin-${release_version}.tar.gz`, while `${release_version}` is `{project.version}.YYYYmmDDHHMMSS` by default. For example, an unofficial package could be `apache-kylin-5.0.0-SNAPSHOT.20220812161045.tar.gz` while an official package could be `apache-kylin-5.0.0.tar.gz`\n\n**Example for developer and release manager**\n\n```shell\n## Case 1: For the developer who wants to package for testing purposes\n./build/release/release.sh \n\n## Case 2: Official apache release,  Kylin binary for deployment on Hadoop3+ and Hive2.3+, \n# and the third party cannot be distributed because of apache distribution policy(size and license)\n./build/release/release.sh -noSpark -official \n\n## Case 3: A package for Apache Hadoop 3 platform\n./build/release/release.sh -P hadoop3\n```\n\n\n\n### 2. Build source code\n\n+ Clone\n\n  ```shell\n  git clone https://github.com/apache/kylin.git\n  cd kylin\n  git checkout kylin5\n  ```\n\n- Build backend source code before your start debugging.\n\n  ```shell\n  mvn clean install -DskipTests\n  ```\n\n- Build front-end source code.\n\n  (Please use node.js **v12.14.0**, for how to use a specific version of node.js, please check [how to switch to a specific node js](https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node) )\n\n  ```shell\n  cd kystudio\n  npm install\n  ```\n\n\n\n### 3. Install IntelliJ IDEA and build the source\n\n1. Install the IDEA Community edition (the Ultimate edition is ok too).\n2. Import the source code into IDEA. Click the **Open**, and choose the directory of **Kylin source code**. ![img](https://kylin.apache.org/5.0/assets/images/OPEN_KYLIN_PROJECT-99e9296de444a46f0c3f2cc63881edea.png)\n\n3. Install the scala plugin and restart\n\n![image-20230208213032938](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208213032938.png)\n\n4. Configure SDK(JDK and Scala), make sure you use **JDK 1.8.X** and **Scala 2.12.X**.\n\n   ![image-20230208214536615](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214536615.png)\n\n5. Reload maven projects, and the `scala` directory will be marked as source root(in blue color).\n\n   ![image-20230208214558630](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214558630.png)\n\n6. Build the projects.(make sure you have executed `mvn clean package -DskipTests`, otherwise some source code is not generated by maven javacc plugin)\n\n   ![image-20230208214731367](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214731367.png)\n","source":"_posts/kylin-5-debug.md","raw":"---\ntitle: How to setup debugging environment for Kylin5 locally\nauthor: 倪春恩\nimg: /source/images/kylin_logo.png\ntop: false\nhide: false\ncover: true\ncoverImg: /images/kylin_logo.png\ntoc: false\ncategories: bigdata\ntags:\n  - kylin\ndate: 2023-01-31 16:44:33\n---\n\n### 1. Check Software Requirement\n\n| Software     | Comment                                     | Version                                  | Download Link                                                |\n| ------------ | ------------------------------------------- | ---------------------------------------- | ------------------------------------------------------------ |\n| Git          | Fetch branch name and hash of latest commit | latest                                   | https://git-scm.com/book/en/v2/Getting-Started-Installing-Git |\n| Apache Maven | Build Java and Scala source code            | 3.8.2 or latest                          | https://maven.apache.org/download.cgi                        |\n| Node.js      | Build front end                             | 12.14.0 is recommended ( or 12.x ~ 14.x) | [How to switch to older node.js](https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node) |\n| JDK          | Java Compiler and Development Tools         | JDK 1.8.x                                | https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html |\n\nAfter installing the above software, please verify **software requirements** by following commands:\n\n```shell\n$ java -version\n$ mvn -v\n$ node -v\n$ git version\n```\n\n**Options for Packaging Script**\n\n| Option        | Comment                                                      |\n| ------------- | ------------------------------------------------------------ |\n| -official     | If adding this option, the package name won't contain the timestamp |\n| -noThirdParty | If adding this option, third-party binary won't be packaged into binary, current they are influxdb,grafana and PostgreSQL |\n| -noSpark      | If adding this option, spark won't be packaged into the Kylin binary |\n| -noHive1      | By default Kylin 5.0 will support Hive 1.2, if add this option, this binary will support Hive 2.3+ |\n| -skipFront    | If add this option, the front-end won't be built and packaged |\n| -skipCompile  | Add this option will assume java source code no need to be compiled again |\n\n**Other Options for Packaging Script**\n\n| Option     | Comment                                                      |\n| ---------- | ------------------------------------------------------------ |\n| -P hadoop3 | Packaging a Kylin 5.0 software package for running on Hadoop 3.0 + platform. |\n\n**Package Content**\n\n| Option      | Comment                           |\n| ----------- | --------------------------------- |\n| VERSION     | `Apache Kylin ${release_version}` |\n| commit_SHA1 | `${HASH_COMMIT}@${BRANCH_NAME}`   |\n\n**Package Name convention**\n\nPackage name is `apache-kylin-${release_version}.tar.gz`, while `${release_version}` is `{project.version}.YYYYmmDDHHMMSS` by default. For example, an unofficial package could be `apache-kylin-5.0.0-SNAPSHOT.20220812161045.tar.gz` while an official package could be `apache-kylin-5.0.0.tar.gz`\n\n**Example for developer and release manager**\n\n```shell\n## Case 1: For the developer who wants to package for testing purposes\n./build/release/release.sh \n\n## Case 2: Official apache release,  Kylin binary for deployment on Hadoop3+ and Hive2.3+, \n# and the third party cannot be distributed because of apache distribution policy(size and license)\n./build/release/release.sh -noSpark -official \n\n## Case 3: A package for Apache Hadoop 3 platform\n./build/release/release.sh -P hadoop3\n```\n\n\n\n### 2. Build source code\n\n+ Clone\n\n  ```shell\n  git clone https://github.com/apache/kylin.git\n  cd kylin\n  git checkout kylin5\n  ```\n\n- Build backend source code before your start debugging.\n\n  ```shell\n  mvn clean install -DskipTests\n  ```\n\n- Build front-end source code.\n\n  (Please use node.js **v12.14.0**, for how to use a specific version of node.js, please check [how to switch to a specific node js](https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node) )\n\n  ```shell\n  cd kystudio\n  npm install\n  ```\n\n\n\n### 3. Install IntelliJ IDEA and build the source\n\n1. Install the IDEA Community edition (the Ultimate edition is ok too).\n2. Import the source code into IDEA. Click the **Open**, and choose the directory of **Kylin source code**. ![img](https://kylin.apache.org/5.0/assets/images/OPEN_KYLIN_PROJECT-99e9296de444a46f0c3f2cc63881edea.png)\n\n3. Install the scala plugin and restart\n\n![image-20230208213032938](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208213032938.png)\n\n4. Configure SDK(JDK and Scala), make sure you use **JDK 1.8.X** and **Scala 2.12.X**.\n\n   ![image-20230208214536615](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214536615.png)\n\n5. Reload maven projects, and the `scala` directory will be marked as source root(in blue color).\n\n   ![image-20230208214558630](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214558630.png)\n\n6. Build the projects.(make sure you have executed `mvn clean package -DskipTests`, otherwise some source code is not generated by maven javacc plugin)\n\n   ![image-20230208214731367](C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214731367.png)\n","slug":"kylin-5-debug","published":1,"updated":"2023-02-09T03:47:33.107Z","_id":"cldo5tby700093suu54py3nhi","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-Check-Software-Requirement\"><a href=\"#1-Check-Software-Requirement\" class=\"headerlink\" title=\"1. Check Software Requirement\"></a>1. Check Software Requirement</h3><table>\n<thead>\n<tr>\n<th>Software</th>\n<th>Comment</th>\n<th>Version</th>\n<th>Download Link</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Git</td>\n<td>Fetch branch name and hash of latest commit</td>\n<td>latest</td>\n<td><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</a></td>\n</tr>\n<tr>\n<td>Apache Maven</td>\n<td>Build Java and Scala source code</td>\n<td>3.8.2 or latest</td>\n<td><a href=\"https://maven.apache.org/download.cgi\">https://maven.apache.org/download.cgi</a></td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td>Build front end</td>\n<td>12.14.0 is recommended ( or 12.x ~ 14.x)</td>\n<td><a href=\"https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node\">How to switch to older node.js</a></td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>Java Compiler and Development Tools</td>\n<td>JDK 1.8.x</td>\n<td><a href=\"https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html\">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></td>\n</tr>\n</tbody></table>\n<p>After installing the above software, please verify <strong>software requirements</strong> by following commands:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ java -version\n$ mvn -v\n$ node -v\n$ git version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Options for Packaging Script</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-official</td>\n<td>If adding this option, the package name won’t contain the timestamp</td>\n</tr>\n<tr>\n<td>-noThirdParty</td>\n<td>If adding this option, third-party binary won’t be packaged into binary, current they are influxdb,grafana and PostgreSQL</td>\n</tr>\n<tr>\n<td>-noSpark</td>\n<td>If adding this option, spark won’t be packaged into the Kylin binary</td>\n</tr>\n<tr>\n<td>-noHive1</td>\n<td>By default Kylin 5.0 will support Hive 1.2, if add this option, this binary will support Hive 2.3+</td>\n</tr>\n<tr>\n<td>-skipFront</td>\n<td>If add this option, the front-end won’t be built and packaged</td>\n</tr>\n<tr>\n<td>-skipCompile</td>\n<td>Add this option will assume java source code no need to be compiled again</td>\n</tr>\n</tbody></table>\n<p><strong>Other Options for Packaging Script</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-P hadoop3</td>\n<td>Packaging a Kylin 5.0 software package for running on Hadoop 3.0 + platform.</td>\n</tr>\n</tbody></table>\n<p><strong>Package Content</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>VERSION</td>\n<td><code>Apache Kylin ${release_version}</code></td>\n</tr>\n<tr>\n<td>commit_SHA1</td>\n<td><code>${HASH_COMMIT}@${BRANCH_NAME}</code></td>\n</tr>\n</tbody></table>\n<p><strong>Package Name convention</strong></p>\n<p>Package name is <code>apache-kylin-${release_version}.tar.gz</code>, while <code>${release_version}</code> is <code>{project.version}.YYYYmmDDHHMMSS</code> by default. For example, an unofficial package could be <code>apache-kylin-5.0.0-SNAPSHOT.20220812161045.tar.gz</code> while an official package could be <code>apache-kylin-5.0.0.tar.gz</code></p>\n<p><strong>Example for developer and release manager</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">## Case 1: For the developer who wants to package for testing purposes\n./build/release/release.sh \n\n## Case 2: Official apache release,  Kylin binary for deployment on Hadoop3+ and Hive2.3+, \n# and the third party cannot be distributed because of apache distribution policy(size and license)\n./build/release/release.sh -noSpark -official \n\n## Case 3: A package for Apache Hadoop 3 platform\n./build/release/release.sh -P hadoop3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-Build-source-code\"><a href=\"#2-Build-source-code\" class=\"headerlink\" title=\"2. Build source code\"></a>2. Build source code</h3><ul>\n<li><p>Clone</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git clone https://github.com/apache/kylin.git\ncd kylin\ngit checkout kylin5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<ul>\n<li><p>Build backend source code before your start debugging.</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mvn clean install -DskipTests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>Build front-end source code.</p>\n<p>(Please use node.js <strong>v12.14.0</strong>, for how to use a specific version of node.js, please check <a href=\"https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node\">how to switch to a specific node js</a> )</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd kystudio\nnpm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"3-Install-IntelliJ-IDEA-and-build-the-source\"><a href=\"#3-Install-IntelliJ-IDEA-and-build-the-source\" class=\"headerlink\" title=\"3. Install IntelliJ IDEA and build the source\"></a>3. Install IntelliJ IDEA and build the source</h3><ol>\n<li><p>Install the IDEA Community edition (the Ultimate edition is ok too).</p>\n</li>\n<li><p>Import the source code into IDEA. Click the <strong>Open</strong>, and choose the directory of <strong>Kylin source code</strong>. <img src=\"https://kylin.apache.org/5.0/assets/images/OPEN_KYLIN_PROJECT-99e9296de444a46f0c3f2cc63881edea.png\" alt=\"img\"></p>\n</li>\n<li><p>Install the scala plugin and restart</p>\n</li>\n</ol>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208213032938.png\" alt=\"image-20230208213032938\"></p>\n<ol start=\"4\">\n<li><p>Configure SDK(JDK and Scala), make sure you use <strong>JDK 1.8.X</strong> and <strong>Scala 2.12.X</strong>.</p>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214536615.png\" alt=\"image-20230208214536615\"></p>\n</li>\n<li><p>Reload maven projects, and the <code>scala</code> directory will be marked as source root(in blue color).</p>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214558630.png\" alt=\"image-20230208214558630\"></p>\n</li>\n<li><p>Build the projects.(make sure you have executed <code>mvn clean package -DskipTests</code>, otherwise some source code is not generated by maven javacc plugin)</p>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214731367.png\" alt=\"image-20230208214731367\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Check-Software-Requirement\"><a href=\"#1-Check-Software-Requirement\" class=\"headerlink\" title=\"1. Check Software Requirement\"></a>1. Check Software Requirement</h3><table>\n<thead>\n<tr>\n<th>Software</th>\n<th>Comment</th>\n<th>Version</th>\n<th>Download Link</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Git</td>\n<td>Fetch branch name and hash of latest commit</td>\n<td>latest</td>\n<td><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</a></td>\n</tr>\n<tr>\n<td>Apache Maven</td>\n<td>Build Java and Scala source code</td>\n<td>3.8.2 or latest</td>\n<td><a href=\"https://maven.apache.org/download.cgi\">https://maven.apache.org/download.cgi</a></td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td>Build front end</td>\n<td>12.14.0 is recommended ( or 12.x ~ 14.x)</td>\n<td><a href=\"https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node\">How to switch to older node.js</a></td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>Java Compiler and Development Tools</td>\n<td>JDK 1.8.x</td>\n<td><a href=\"https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html\">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</a></td>\n</tr>\n</tbody></table>\n<p>After installing the above software, please verify <strong>software requirements</strong> by following commands:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ java -version\n$ mvn -v\n$ node -v\n$ git version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Options for Packaging Script</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-official</td>\n<td>If adding this option, the package name won’t contain the timestamp</td>\n</tr>\n<tr>\n<td>-noThirdParty</td>\n<td>If adding this option, third-party binary won’t be packaged into binary, current they are influxdb,grafana and PostgreSQL</td>\n</tr>\n<tr>\n<td>-noSpark</td>\n<td>If adding this option, spark won’t be packaged into the Kylin binary</td>\n</tr>\n<tr>\n<td>-noHive1</td>\n<td>By default Kylin 5.0 will support Hive 1.2, if add this option, this binary will support Hive 2.3+</td>\n</tr>\n<tr>\n<td>-skipFront</td>\n<td>If add this option, the front-end won’t be built and packaged</td>\n</tr>\n<tr>\n<td>-skipCompile</td>\n<td>Add this option will assume java source code no need to be compiled again</td>\n</tr>\n</tbody></table>\n<p><strong>Other Options for Packaging Script</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-P hadoop3</td>\n<td>Packaging a Kylin 5.0 software package for running on Hadoop 3.0 + platform.</td>\n</tr>\n</tbody></table>\n<p><strong>Package Content</strong></p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>VERSION</td>\n<td><code>Apache Kylin $&#123;release_version&#125;</code></td>\n</tr>\n<tr>\n<td>commit_SHA1</td>\n<td><code>$&#123;HASH_COMMIT&#125;@$&#123;BRANCH_NAME&#125;</code></td>\n</tr>\n</tbody></table>\n<p><strong>Package Name convention</strong></p>\n<p>Package name is <code>apache-kylin-$&#123;release_version&#125;.tar.gz</code>, while <code>$&#123;release_version&#125;</code> is <code>&#123;project.version&#125;.YYYYmmDDHHMMSS</code> by default. For example, an unofficial package could be <code>apache-kylin-5.0.0-SNAPSHOT.20220812161045.tar.gz</code> while an official package could be <code>apache-kylin-5.0.0.tar.gz</code></p>\n<p><strong>Example for developer and release manager</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">## Case 1: For the developer who wants to package for testing purposes\n.&#x2F;build&#x2F;release&#x2F;release.sh \n\n## Case 2: Official apache release,  Kylin binary for deployment on Hadoop3+ and Hive2.3+, \n# and the third party cannot be distributed because of apache distribution policy(size and license)\n.&#x2F;build&#x2F;release&#x2F;release.sh -noSpark -official \n\n## Case 3: A package for Apache Hadoop 3 platform\n.&#x2F;build&#x2F;release&#x2F;release.sh -P hadoop3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-Build-source-code\"><a href=\"#2-Build-source-code\" class=\"headerlink\" title=\"2. Build source code\"></a>2. Build source code</h3><ul>\n<li><p>Clone</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git clone https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;kylin.git\ncd kylin\ngit checkout kylin5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<ul>\n<li><p>Build backend source code before your start debugging.</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mvn clean install -DskipTests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>Build front-end source code.</p>\n<p>(Please use node.js <strong>v12.14.0</strong>, for how to use a specific version of node.js, please check <a href=\"https://kylin.apache.org/5.0/docs/development/how_to_package#install_older_node\">how to switch to a specific node js</a> )</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd kystudio\nnpm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"3-Install-IntelliJ-IDEA-and-build-the-source\"><a href=\"#3-Install-IntelliJ-IDEA-and-build-the-source\" class=\"headerlink\" title=\"3. Install IntelliJ IDEA and build the source\"></a>3. Install IntelliJ IDEA and build the source</h3><ol>\n<li><p>Install the IDEA Community edition (the Ultimate edition is ok too).</p>\n</li>\n<li><p>Import the source code into IDEA. Click the <strong>Open</strong>, and choose the directory of <strong>Kylin source code</strong>. <img src=\"https://kylin.apache.org/5.0/assets/images/OPEN_KYLIN_PROJECT-99e9296de444a46f0c3f2cc63881edea.png\" alt=\"img\"></p>\n</li>\n<li><p>Install the scala plugin and restart</p>\n</li>\n</ol>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208213032938.png\" alt=\"image-20230208213032938\"></p>\n<ol start=\"4\">\n<li><p>Configure SDK(JDK and Scala), make sure you use <strong>JDK 1.8.X</strong> and <strong>Scala 2.12.X</strong>.</p>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214536615.png\" alt=\"image-20230208214536615\"></p>\n</li>\n<li><p>Reload maven projects, and the <code>scala</code> directory will be marked as source root(in blue color).</p>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214558630.png\" alt=\"image-20230208214558630\"></p>\n</li>\n<li><p>Build the projects.(make sure you have executed <code>mvn clean package -DskipTests</code>, otherwise some source code is not generated by maven javacc plugin)</p>\n<p><img src=\"C:\\Users\\zhudanchen\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230208214731367.png\" alt=\"image-20230208214731367\"></p>\n</li>\n</ol>\n"},{"title":"lc-104","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-18T07:56:41.000Z","_content":"\nGiven the `root` of a binary tree, return *its maximum depth*.\n\nA binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n \n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg)\n\n```\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\n```\n\n**Example 2:**\n\n```\nInput: root = [1,null,2]\nOutput: 2\n```\n\n \n\n**Constraints:**\n\n- The number of nodes in the tree is in the range `[0, 104]`.\n- `-100 <= Node.val <= 100`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-104.md","raw":"---\ntitle: lc-104\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-18 15:56:41\n---\n\nGiven the `root` of a binary tree, return *its maximum depth*.\n\nA binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n \n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg)\n\n```\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\n```\n\n**Example 2:**\n\n```\nInput: root = [1,null,2]\nOutput: 2\n```\n\n \n\n**Constraints:**\n\n- The number of nodes in the tree is in the range `[0, 104]`.\n- `-100 <= Node.val <= 100`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-104","published":1,"updated":"2022-08-19T06:07:24.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tby8000b3suu0swn3jpg","content":"<p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p>\n<p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root = [3,9,20,null,null,15,7]\nOutput: 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Example 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root = [1,null,2]\nOutput: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p>\n<p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root &#x3D; [3,9,20,null,null,15,7]\nOutput: 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Example 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: root &#x3D; [1,null,2]\nOutput: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-124","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-25T03:19:49.000Z","_content":"\n```java\n/**\nA path in a binary tree is a sequence of nodes where each pair of adjacent \nnodes in the sequence has an edge connecting them. A node can only appear in the \nsequence at most once. Note that the path does not need to pass through the root. \n\n The path sum of a path is the sum of the node's values in the path. \n\n Given the root of a binary tree, return the maximum path sum of any non-empty \npath. \n\n \n Example 1: \n\n \nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n \n\n Example 2: \n\n \nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = \n42.\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 3 * 10⁴]. \n -1000 <= Node.val <= 1000 \n \n Related Topics树 | 深度优先搜索 | 动态规划 | 二叉树 \n\n 👍 1691, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        getMaxSum(root);\n\n        return result;\n\n    }\n\n    private int result = Integer.MIN_VALUE;\n\n\n    private int getMaxSum(TreeNode node) {\n        int leftMax = 0, rightMax = 0;\n\n        if (node.left != null) {\n            leftMax = getMaxSum(node.left);\n        }\n\n        if (node.right != null) {\n            rightMax = getMaxSum(node.right);\n        }\n\n        int maxPath = node.val;\n\n        if (leftMax > 0 ) {\n            maxPath += leftMax;\n        }\n\n        if (rightMax > 0) {\n            maxPath += rightMax;\n        }\n\n        if (maxPath > result) {\n            result = maxPath;\n        }\n        if (leftMax > rightMax && leftMax > 0) {\n            return node.val + leftMax;\n        } else if (rightMax > leftMax && rightMax > 0) {\n            return node.val + rightMax;\n        } else {\n            return node.val;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-124.md","raw":"---\ntitle: lc-124\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-25 11:19:49\n---\n\n```java\n/**\nA path in a binary tree is a sequence of nodes where each pair of adjacent \nnodes in the sequence has an edge connecting them. A node can only appear in the \nsequence at most once. Note that the path does not need to pass through the root. \n\n The path sum of a path is the sum of the node's values in the path. \n\n Given the root of a binary tree, return the maximum path sum of any non-empty \npath. \n\n \n Example 1: \n\n \nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n \n\n Example 2: \n\n \nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = \n42.\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 3 * 10⁴]. \n -1000 <= Node.val <= 1000 \n \n Related Topics树 | 深度优先搜索 | 动态规划 | 二叉树 \n\n 👍 1691, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        getMaxSum(root);\n\n        return result;\n\n    }\n\n    private int result = Integer.MIN_VALUE;\n\n\n    private int getMaxSum(TreeNode node) {\n        int leftMax = 0, rightMax = 0;\n\n        if (node.left != null) {\n            leftMax = getMaxSum(node.left);\n        }\n\n        if (node.right != null) {\n            rightMax = getMaxSum(node.right);\n        }\n\n        int maxPath = node.val;\n\n        if (leftMax > 0 ) {\n            maxPath += leftMax;\n        }\n\n        if (rightMax > 0) {\n            maxPath += rightMax;\n        }\n\n        if (maxPath > result) {\n            result = maxPath;\n        }\n        if (leftMax > rightMax && leftMax > 0) {\n            return node.val + leftMax;\n        } else if (rightMax > leftMax && rightMax > 0) {\n            return node.val + rightMax;\n        } else {\n            return node.val;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-124","published":1,"updated":"2022-08-25T08:22:34.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tby9000d3suuf2hybeto","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nA path in a binary tree is a sequence of nodes where each pair of adjacent \nnodes in the sequence has an edge connecting them. A node can only appear in the \nsequence at most once. Note that the path does not need to pass through the root. \n\n The path sum of a path is the sum of the node's values in the path. \n\n Given the root of a binary tree, return the maximum path sum of any non-empty \npath. \n\n \n Example 1: \n\n \nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n \n\n Example 2: \n\n \nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = \n42.\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 3 * 10⁴]. \n -1000 &lt;= Node.val &lt;= 1000 \n \n Related Topics树 | 深度优先搜索 | 动态规划 | 二叉树 \n\n 👍 1691, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxPathSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rightMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            leftMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rightMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> maxPath <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxPath <span class=\"token operator\">+=</span> leftMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightMax <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxPath <span class=\"token operator\">+=</span> rightMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxPath <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> maxPath<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">&gt;</span> rightMax <span class=\"token operator\">&amp;&amp;</span> leftMax <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> leftMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightMax <span class=\"token operator\">&gt;</span> leftMax <span class=\"token operator\">&amp;&amp;</span> rightMax <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> rightMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nA path in a binary tree is a sequence of nodes where each pair of adjacent \nnodes in the sequence has an edge connecting them. A node can only appear in the \nsequence at most once. Note that the path does not need to pass through the root. \n\n The path sum of a path is the sum of the node's values in the path. \n\n Given the root of a binary tree, return the maximum path sum of any non-empty \npath. \n\n \n Example 1: \n\n \nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n \n\n Example 2: \n\n \nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = \n42.\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 3 * 10⁴]. \n -1000 &lt;= Node.val &lt;= 1000 \n \n Related Topics树 | 深度优先搜索 | 动态规划 | 二叉树 \n\n 👍 1691, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxPathSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rightMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            leftMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            rightMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxSum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> maxPath <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxPath <span class=\"token operator\">+=</span> leftMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightMax <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxPath <span class=\"token operator\">+=</span> rightMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxPath <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> maxPath<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">></span> rightMax <span class=\"token operator\">&amp;&amp;</span> leftMax <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> leftMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightMax <span class=\"token operator\">></span> leftMax <span class=\"token operator\">&amp;&amp;</span> rightMax <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> rightMax<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-121","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-24T03:08:43.000Z","_content":"\n```java\n/**\nYou are given an array prices where prices[i] is the price of a given stock on \nthe iᵗʰ day. \n\n You want to maximize your profit by choosing a single day to buy one stock and \nchoosing a different day in the future to sell that stock. \n\n Return the maximum profit you can achieve from this transaction. If you cannot \nachieve any profit, return 0. \n\n \n Example 1: \n\n \nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-\n1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must \nbuy before you sell.\n \n\n Example 2: \n\n \nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n \n\n \n Constraints: \n\n \n 1 <= prices.length <= 10⁵ \n 0 <= prices[i] <= 10⁴ \n \n Related Topics数组 | 动态规划 \n\n 👍 2512, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int result = 0, curMin = Integer.MAX_VALUE;\n\n        for (int price : prices) {\n            if (curMin < Integer.MAX_VALUE && price - curMin > result) {\n                result = price - curMin;\n            }\n\n            if (price < curMin) {\n                curMin = price;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-121.md","raw":"---\ntitle: lc-121\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-24 11:08:43\n---\n\n```java\n/**\nYou are given an array prices where prices[i] is the price of a given stock on \nthe iᵗʰ day. \n\n You want to maximize your profit by choosing a single day to buy one stock and \nchoosing a different day in the future to sell that stock. \n\n Return the maximum profit you can achieve from this transaction. If you cannot \nachieve any profit, return 0. \n\n \n Example 1: \n\n \nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-\n1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must \nbuy before you sell.\n \n\n Example 2: \n\n \nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n \n\n \n Constraints: \n\n \n 1 <= prices.length <= 10⁵ \n 0 <= prices[i] <= 10⁴ \n \n Related Topics数组 | 动态规划 \n\n 👍 2512, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int result = 0, curMin = Integer.MAX_VALUE;\n\n        for (int price : prices) {\n            if (curMin < Integer.MAX_VALUE && price - curMin > result) {\n                result = price - curMin;\n            }\n\n            if (price < curMin) {\n                curMin = price;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-121","published":1,"updated":"2022-08-24T09:48:53.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyb000h3suu8i7u95k1","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nYou are given an array prices where prices[i] is the price of a given stock on \nthe iᵗʰ day. \n\n You want to maximize your profit by choosing a single day to buy one stock and \nchoosing a different day in the future to sell that stock. \n\n Return the maximum profit you can achieve from this transaction. If you cannot \nachieve any profit, return 0. \n\n \n Example 1: \n\n \nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-\n1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must \nbuy before you sell.\n \n\n Example 2: \n\n \nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n \n\n \n Constraints: \n\n \n 1 &lt;= prices.length &lt;= 10⁵ \n 0 &lt;= prices[i] &lt;= 10⁴ \n \n Related Topics数组 | 动态规划 \n\n 👍 2512, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curMin <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price <span class=\"token operator\">:</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMin <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">&amp;&amp;</span> price <span class=\"token operator\">-</span> curMin <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> price <span class=\"token operator\">-</span> curMin<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">&lt;</span> curMin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curMin <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nYou are given an array prices where prices[i] is the price of a given stock on \nthe iᵗʰ day. \n\n You want to maximize your profit by choosing a single day to buy one stock and \nchoosing a different day in the future to sell that stock. \n\n Return the maximum profit you can achieve from this transaction. If you cannot \nachieve any profit, return 0. \n\n \n Example 1: \n\n \nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-\n1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must \nbuy before you sell.\n \n\n Example 2: \n\n \nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n \n\n \n Constraints: \n\n \n 1 &lt;= prices.length &lt;= 10⁵ \n 0 &lt;= prices[i] &lt;= 10⁴ \n \n Related Topics数组 | 动态规划 \n\n 👍 2512, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curMin <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price <span class=\"token operator\">:</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMin <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">&amp;&amp;</span> price <span class=\"token operator\">-</span> curMin <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">=</span> price <span class=\"token operator\">-</span> curMin<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">&lt;</span> curMin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curMin <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-128","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-26T06:10:30.000Z","_content":"\n```java\n/**\nGiven an unsorted array of integers nums, return the length of the longest \nconsecutive elements sequence. \n\n You must write an algorithm that runs in O(n) time. \n\n \n Example 1: \n\n \nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. \nTherefore its length is 4.\n \n\n Example 2: \n\n \nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n \n\n \n Constraints: \n\n \n 0 <= nums.length <= 10⁵ \n -10⁹ <= nums[i] <= 10⁹ \n \n Related Topics并查集 | 数组 | 哈希表 \n\n 👍 1382, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        Set<Integer> hashSet = new HashSet<>();\n\n        for (int num : nums) {\n            hashSet.add(num);\n        }\n\n        int result = 0;\n\n        for (int value : hashSet) {\n            if (!hashSet.contains(value - 1)) {\n                int len = 1;\n                int i = value + 1;\n                while (hashSet.contains(i)) {\n                    len++;\n                    i++;\n                }\n\n                if (len > result) {\n                    result = len;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-128.md","raw":"---\ntitle: lc-128\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-26 14:10:30\n---\n\n```java\n/**\nGiven an unsorted array of integers nums, return the length of the longest \nconsecutive elements sequence. \n\n You must write an algorithm that runs in O(n) time. \n\n \n Example 1: \n\n \nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. \nTherefore its length is 4.\n \n\n Example 2: \n\n \nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n \n\n \n Constraints: \n\n \n 0 <= nums.length <= 10⁵ \n -10⁹ <= nums[i] <= 10⁹ \n \n Related Topics并查集 | 数组 | 哈希表 \n\n 👍 1382, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        Set<Integer> hashSet = new HashSet<>();\n\n        for (int num : nums) {\n            hashSet.add(num);\n        }\n\n        int result = 0;\n\n        for (int value : hashSet) {\n            if (!hashSet.contains(value - 1)) {\n                int len = 1;\n                int i = value + 1;\n                while (hashSet.contains(i)) {\n                    len++;\n                    i++;\n                }\n\n                if (len > result) {\n                    result = len;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-128","published":1,"updated":"2022-08-26T07:31:17.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyc000j3suu3tqfaw7b","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an unsorted array of integers nums, return the length of the longest \nconsecutive elements sequence. \n\n You must write an algorithm that runs in O(n) time. \n\n \n Example 1: \n\n \nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. \nTherefore its length is 4.\n \n\n Example 2: \n\n \nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n \n\n \n Constraints: \n\n \n 0 &lt;= nums.length &lt;= 10⁵ \n -10⁹ &lt;= nums[i] &lt;= 10⁹ \n \n Related Topics并查集 | 数组 | 哈希表 \n\n 👍 1382, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">longestConsecutive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> hashSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an unsorted array of integers nums, return the length of the longest \nconsecutive elements sequence. \n\n You must write an algorithm that runs in O(n) time. \n\n \n Example 1: \n\n \nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. \nTherefore its length is 4.\n \n\n Example 2: \n\n \nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n \n\n \n Constraints: \n\n \n 0 &lt;= nums.length &lt;= 10⁵ \n -10⁹ &lt;= nums[i] &lt;= 10⁹ \n \n Related Topics并查集 | 数组 | 哈希表 \n\n 👍 1382, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">longestConsecutive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> hashSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-114","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-23T02:46:20.000Z","_content":"\n```java\n/**\nGiven the root of a binary tree, flatten the tree into a \"linked list\": \n\n \n The \"linked list\" should use the same TreeNode class where the right child \npointer points to the next node in the list and the left child pointer is always \nnull. \n The \"linked list\" should be in the same order as a pre-order traversal of the \nbinary tree. \n \n\n \n Example 1: \n\n \nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n \n\n Example 2: \n\n \nInput: root = []\nOutput: []\n \n\n Example 3: \n\n \nInput: root = [0]\nOutput: [0]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 2000]. \n -100 <= Node.val <= 100 \n \n\n \nFollow up: Can you flatten the tree in-place (with O(1) extra space)? Related \nTopics栈 | 树 | 深度优先搜索 | 链表 | 二叉树 \n\n 👍 1278, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void flatten(TreeNode root) {\n        if (root == null || (root.left == null && root.right == null)) {\n            return;\n        }\n\n        TreeNode rightNode = root.right;\n        if (rightNode != null) {\n            flatten(rightNode);\n        }\n\n        TreeNode leftNode = root.left;\n        if (leftNode != null) {\n            flatten(leftNode);\n            root.left = null;\n            root.right = leftNode;\n        }\n\n        if (rightNode != null) {\n            if (leftNode == null) {\n                root.left = null;\n                root.right = rightNode;\n            } else {\n                while (leftNode.right != null) {\n                    leftNode = leftNode.right;\n                }\n                leftNode.right = rightNode;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-114.md","raw":"---\ntitle: lc-114\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-23 10:46:20\n---\n\n```java\n/**\nGiven the root of a binary tree, flatten the tree into a \"linked list\": \n\n \n The \"linked list\" should use the same TreeNode class where the right child \npointer points to the next node in the list and the left child pointer is always \nnull. \n The \"linked list\" should be in the same order as a pre-order traversal of the \nbinary tree. \n \n\n \n Example 1: \n\n \nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n \n\n Example 2: \n\n \nInput: root = []\nOutput: []\n \n\n Example 3: \n\n \nInput: root = [0]\nOutput: [0]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 2000]. \n -100 <= Node.val <= 100 \n \n\n \nFollow up: Can you flatten the tree in-place (with O(1) extra space)? Related \nTopics栈 | 树 | 深度优先搜索 | 链表 | 二叉树 \n\n 👍 1278, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void flatten(TreeNode root) {\n        if (root == null || (root.left == null && root.right == null)) {\n            return;\n        }\n\n        TreeNode rightNode = root.right;\n        if (rightNode != null) {\n            flatten(rightNode);\n        }\n\n        TreeNode leftNode = root.left;\n        if (leftNode != null) {\n            flatten(leftNode);\n            root.left = null;\n            root.right = leftNode;\n        }\n\n        if (rightNode != null) {\n            if (leftNode == null) {\n                root.left = null;\n                root.right = rightNode;\n            } else {\n                while (leftNode.right != null) {\n                    leftNode = leftNode.right;\n                }\n                leftNode.right = rightNode;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-114","published":1,"updated":"2022-08-23T03:17:50.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyd000o3suufqzhhagq","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a binary tree, flatten the tree into a \"linked list\": \n\n \n The \"linked list\" should use the same TreeNode class where the right child \npointer points to the next node in the list and the left child pointer is always \nnull. \n The \"linked list\" should be in the same order as a pre-order traversal of the \nbinary tree. \n \n\n \n Example 1: \n\n \nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n \n\n Example 2: \n\n \nInput: root = []\nOutput: []\n \n\n Example 3: \n\n \nInput: root = [0]\nOutput: [0]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 2000]. \n -100 &lt;= Node.val &lt;= 100 \n \n\n \nFollow up: Can you flatten the tree in-place (with O(1) extra space)? Related \nTopics栈 | 树 | 深度优先搜索 | 链表 | 二叉树 \n\n 👍 1278, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">TreeNode</span> rightNode <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">TreeNode</span> leftNode <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    leftNode <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                leftNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a binary tree, flatten the tree into a \"linked list\": \n\n \n The \"linked list\" should use the same TreeNode class where the right child \npointer points to the next node in the list and the left child pointer is always \nnull. \n The \"linked list\" should be in the same order as a pre-order traversal of the \nbinary tree. \n \n\n \n Example 1: \n\n \nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n \n\n Example 2: \n\n \nInput: root = []\nOutput: []\n \n\n Example 3: \n\n \nInput: root = [0]\nOutput: [0]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 2000]. \n -100 &lt;= Node.val &lt;= 100 \n \n\n \nFollow up: Can you flatten the tree in-place (with O(1) extra space)? Related \nTopics栈 | 树 | 深度优先搜索 | 链表 | 二叉树 \n\n 👍 1278, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">TreeNode</span> rightNode <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">TreeNode</span> leftNode <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    leftNode <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                leftNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-105","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-22T05:56:43.000Z","_content":"\n```java\n/**\nGiven two integer arrays preorder and inorder where preorder is the preorder \ntraversal of a binary tree and inorder is the inorder traversal of the same tree, \nconstruct and return the binary tree. \n\n \n Example 1: \n\n \nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n \n\n Example 2: \n\n \nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n \n\n \n Constraints: \n\n \n 1 <= preorder.length <= 3000 \n inorder.length == preorder.length \n -3000 <= preorder[i], inorder[i] <= 3000 \n preorder and inorder consist of unique values. \n Each value of inorder also appears in preorder. \n preorder is guaranteed to be the preorder traversal of the tree.\n inorder is guaranteed to be the inorder traversal of the tree. \n \n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树 \n\n 👍 1699, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return buildTreeHelper(preorder, inorder, (long)Integer.MAX_VALUE + 1);\n    }\n\n    int pre = 0; int in = 0;\n\n    private TreeNode buildTreeHelper(int[] preorder, int[] inorder, long stop) {\n        //到达末尾返回 null\n        if (pre == preorder.length) {\n            return null;\n        }\n        if (inorder[in] == stop) {\n            in++;\n            return null;\n        }\n        int root_val = preorder[pre++];\n        TreeNode root = new TreeNode(root_val);\n        root.left = buildTreeHelper(preorder, inorder, root_val);\n        root.right = buildTreeHelper(preorder, inorder, stop);\n        return root;\n    }\n}\n```\n","source":"_posts/lc-105.md","raw":"---\ntitle: lc-105\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-22 13:56:43\n---\n\n```java\n/**\nGiven two integer arrays preorder and inorder where preorder is the preorder \ntraversal of a binary tree and inorder is the inorder traversal of the same tree, \nconstruct and return the binary tree. \n\n \n Example 1: \n\n \nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n \n\n Example 2: \n\n \nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n \n\n \n Constraints: \n\n \n 1 <= preorder.length <= 3000 \n inorder.length == preorder.length \n -3000 <= preorder[i], inorder[i] <= 3000 \n preorder and inorder consist of unique values. \n Each value of inorder also appears in preorder. \n preorder is guaranteed to be the preorder traversal of the tree.\n inorder is guaranteed to be the inorder traversal of the tree. \n \n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树 \n\n 👍 1699, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return buildTreeHelper(preorder, inorder, (long)Integer.MAX_VALUE + 1);\n    }\n\n    int pre = 0; int in = 0;\n\n    private TreeNode buildTreeHelper(int[] preorder, int[] inorder, long stop) {\n        //到达末尾返回 null\n        if (pre == preorder.length) {\n            return null;\n        }\n        if (inorder[in] == stop) {\n            in++;\n            return null;\n        }\n        int root_val = preorder[pre++];\n        TreeNode root = new TreeNode(root_val);\n        root.left = buildTreeHelper(preorder, inorder, root_val);\n        root.right = buildTreeHelper(preorder, inorder, stop);\n        return root;\n    }\n}\n```\n","slug":"lc-105","published":1,"updated":"2022-11-22T11:52:22.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyf000r3suudr6w8fso","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven two integer arrays preorder and inorder where preorder is the preorder \ntraversal of a binary tree and inorder is the inorder traversal of the same tree, \nconstruct and return the binary tree. \n\n \n Example 1: \n\n \nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n \n\n Example 2: \n\n \nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n \n\n \n Constraints: \n\n \n 1 &lt;= preorder.length &lt;= 3000 \n inorder.length == preorder.length \n -3000 &lt;= preorder[i], inorder[i] &lt;= 3000 \n preorder and inorder consist of unique values. \n Each value of inorder also appears in preorder. \n preorder is guaranteed to be the preorder traversal of the tree.\n inorder is guaranteed to be the inorder traversal of the tree. \n \n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树 \n\n 👍 1699, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> in <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//到达末尾返回 null</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">==</span> preorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            in<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> root_val <span class=\"token operator\">=</span> preorder<span class=\"token punctuation\">[</span>pre<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> root_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven two integer arrays preorder and inorder where preorder is the preorder \ntraversal of a binary tree and inorder is the inorder traversal of the same tree, \nconstruct and return the binary tree. \n\n \n Example 1: \n\n \nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n \n\n Example 2: \n\n \nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n \n\n \n Constraints: \n\n \n 1 &lt;= preorder.length &lt;= 3000 \n inorder.length == preorder.length \n -3000 &lt;= preorder[i], inorder[i] &lt;= 3000 \n preorder and inorder consist of unique values. \n Each value of inorder also appears in preorder. \n preorder is guaranteed to be the preorder traversal of the tree.\n inorder is guaranteed to be the inorder traversal of the tree. \n \n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树 \n\n 👍 1699, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> in <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//到达末尾返回 null</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">==</span> preorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            in<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> root_val <span class=\"token operator\">=</span> preorder<span class=\"token punctuation\">[</span>pre<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> root_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTreeHelper</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-139","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-30T02:54:35.000Z","_content":"\n```java\n/**\nGiven a string s and a dictionary of strings wordDict, return true if s can be\nsegmented into a space-separated sequence of one or more dictionary words.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\n\n Example 2:\n\n\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen\napple\".\nNote that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n\n\n Constraints:\n\n\n 1 <= s.length <= 300\n 1 <= wordDict.length <= 1000\n 1 <= wordDict[i].length <= 20\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划\n\n 👍 1773, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        Set<String> wordSet = new HashSet<>();\n\n        Map<Integer, Boolean> resultMap = new HashMap<>();\n\n        for (String word : wordDict) {\n            wordSet.add(word);\n        }\n\n        return isValid(s, 0, wordSet, resultMap);\n    }\n\n    private boolean isValid(String s, int index, Set<String> wordSet, Map<Integer, Boolean> resultMap) {\n        if (resultMap.containsKey(index)) {\n            return resultMap.get(index);\n        }\n\n        if (index >= s.length()) {\n            resultMap.put(index, true);\n            return true;\n        }\n\n        if (wordSet.contains(s.substring(index, s.length()))) {\n            resultMap.put(index, true);\n            return true;\n        }\n\n        for (int i = s.length() - 1; i > index; i--) {\n            String str = s.substring(index, i);\n\n            if (wordSet.contains(str) && isValid(s, i, wordSet, resultMap)) {\n                resultMap.put(index, true);\n                return true;\n            }\n        }\n        resultMap.put(index, false);\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-139.md","raw":"---\ntitle: lc-139\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-30 10:54:35\n---\n\n```java\n/**\nGiven a string s and a dictionary of strings wordDict, return true if s can be\nsegmented into a space-separated sequence of one or more dictionary words.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\n\n Example 2:\n\n\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen\napple\".\nNote that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n\n\n Constraints:\n\n\n 1 <= s.length <= 300\n 1 <= wordDict.length <= 1000\n 1 <= wordDict[i].length <= 20\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划\n\n 👍 1773, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        Set<String> wordSet = new HashSet<>();\n\n        Map<Integer, Boolean> resultMap = new HashMap<>();\n\n        for (String word : wordDict) {\n            wordSet.add(word);\n        }\n\n        return isValid(s, 0, wordSet, resultMap);\n    }\n\n    private boolean isValid(String s, int index, Set<String> wordSet, Map<Integer, Boolean> resultMap) {\n        if (resultMap.containsKey(index)) {\n            return resultMap.get(index);\n        }\n\n        if (index >= s.length()) {\n            resultMap.put(index, true);\n            return true;\n        }\n\n        if (wordSet.contains(s.substring(index, s.length()))) {\n            resultMap.put(index, true);\n            return true;\n        }\n\n        for (int i = s.length() - 1; i > index; i--) {\n            String str = s.substring(index, i);\n\n            if (wordSet.contains(str) && isValid(s, i, wordSet, resultMap)) {\n                resultMap.put(index, true);\n                return true;\n            }\n        }\n        resultMap.put(index, false);\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-139","published":1,"updated":"2022-08-30T03:46:29.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyg000u3suu7npf2udi","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s and a dictionary of strings wordDict, return true if s can be\nsegmented into a space-separated sequence of one or more dictionary words.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\n\n Example 2:\n\n\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen\napple\".\nNote that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n\n\n Constraints:\n\n\n 1 &lt;= s.length &lt;= 300\n 1 &lt;= wordDict.length &lt;= 1000\n 1 &lt;= wordDict[i].length &lt;= 20\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划\n\n 👍 1773, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">wordBreak</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> wordSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            wordSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wordSet<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> wordSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> resultMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wordSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wordSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> wordSet<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s and a dictionary of strings wordDict, return true if s can be\nsegmented into a space-separated sequence of one or more dictionary words.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\n\n Example 2:\n\n\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen\napple\".\nNote that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n\n\n Constraints:\n\n\n 1 &lt;= s.length &lt;= 300\n 1 &lt;= wordDict.length &lt;= 1000\n 1 &lt;= wordDict[i].length &lt;= 20\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划\n\n 👍 1773, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">wordBreak</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> wordSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            wordSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wordSet<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> wordSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> resultMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wordSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wordSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> wordSet<span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-140","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-14T07:49:59.000Z","_content":"\n```java\n/**\nGiven a string s and a dictionary of strings wordDict, add spaces in s to\nconstruct a sentence where each word is a valid dictionary word. Return all such\npossible sentences in any order.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\n\n Example 2:\n\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\n\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n\n\n Constraints:\n\n\n 1 <= s.length <= 20\n 1 <= wordDict.length <= 1000\n 1 <= wordDict[i].length <= 10\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划 | 回溯\n\n 👍 650, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        if (s == null || s.length() == 0 || wordDict == null || wordDict.size() == 0) {\n            return new ArrayList<>();\n        }\n        Map<Integer, List<String>> resultMap = new HashMap<>();\n        return wordBreakInner(s, s.length() - 1, resultMap, wordDict);\n    }\n\n    private List<String> wordBreakInner(String s, int index, Map<Integer, List<String>> resultMap, List<String> wordDict) {\n        if (resultMap.containsKey(index)) {\n            return resultMap.get(index);\n        }\n\n        List<String> result = new ArrayList<>();\n\n        for (String dict : wordDict) {\n            if (index + 1 < dict.length()) {\n                continue;\n            }\n\n            if (dict.equals(s.substring(index - dict.length() + 1, index + 1))) {\n                if (index + 1 == dict.length()) {\n                    result.add(dict);\n                } else {\n                    List<String> subResult = wordBreakInner(s, index - dict.length(), resultMap, wordDict);\n\n                    if (subResult.size() > 0) {\n                        for (String sub : subResult) {\n                            result.add(sub + \" \" + dict);\n                        }\n                    }\n                }\n            }\n        }\n\n        resultMap.put(index, result);\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-140.md","raw":"---\ntitle: lc-140\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-14 15:49:59\n---\n\n```java\n/**\nGiven a string s and a dictionary of strings wordDict, add spaces in s to\nconstruct a sentence where each word is a valid dictionary word. Return all such\npossible sentences in any order.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\n\n Example 2:\n\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\n\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n\n\n Constraints:\n\n\n 1 <= s.length <= 20\n 1 <= wordDict.length <= 1000\n 1 <= wordDict[i].length <= 10\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划 | 回溯\n\n 👍 650, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        if (s == null || s.length() == 0 || wordDict == null || wordDict.size() == 0) {\n            return new ArrayList<>();\n        }\n        Map<Integer, List<String>> resultMap = new HashMap<>();\n        return wordBreakInner(s, s.length() - 1, resultMap, wordDict);\n    }\n\n    private List<String> wordBreakInner(String s, int index, Map<Integer, List<String>> resultMap, List<String> wordDict) {\n        if (resultMap.containsKey(index)) {\n            return resultMap.get(index);\n        }\n\n        List<String> result = new ArrayList<>();\n\n        for (String dict : wordDict) {\n            if (index + 1 < dict.length()) {\n                continue;\n            }\n\n            if (dict.equals(s.substring(index - dict.length() + 1, index + 1))) {\n                if (index + 1 == dict.length()) {\n                    result.add(dict);\n                } else {\n                    List<String> subResult = wordBreakInner(s, index - dict.length(), resultMap, wordDict);\n\n                    if (subResult.size() > 0) {\n                        for (String sub : subResult) {\n                            result.add(sub + \" \" + dict);\n                        }\n                    }\n                }\n            }\n        }\n\n        resultMap.put(index, result);\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-140","published":1,"updated":"2022-11-14T12:54:40.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyh000x3suud1vrcv6s","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s and a dictionary of strings wordDict, add spaces in s to\nconstruct a sentence where each word is a valid dictionary word. Return all such\npossible sentences in any order.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\n\n Example 2:\n\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\n\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n\n\n Constraints:\n\n\n 1 &lt;= s.length &lt;= 20\n 1 &lt;= wordDict.length &lt;= 1000\n 1 &lt;= wordDict[i].length &lt;= 10\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划 | 回溯\n\n 👍 650, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">wordBreak</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> wordDict <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> wordDict<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">wordBreakInner</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> wordDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">wordBreakInner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dict <span class=\"token operator\">:</span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> subResult <span class=\"token operator\">=</span> <span class=\"token function\">wordBreakInner</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> index <span class=\"token operator\">-</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> wordDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sub <span class=\"token operator\">:</span> subResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sub <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s and a dictionary of strings wordDict, add spaces in s to\nconstruct a sentence where each word is a valid dictionary word. Return all such\npossible sentences in any order.\n\n Note that the same word in the dictionary may be reused multiple times in the\nsegmentation.\n\n\n Example 1:\n\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\n\n Example 2:\n\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\n\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\n\n Example 3:\n\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n\n\n Constraints:\n\n\n 1 &lt;= s.length &lt;= 20\n 1 &lt;= wordDict.length &lt;= 1000\n 1 &lt;= wordDict[i].length &lt;= 10\n s and wordDict[i] consist of only lowercase English letters.\n All the strings of wordDict are unique.\n\n Related Topics字典树 | 记忆化搜索 | 哈希表 | 字符串 | 动态规划 | 回溯\n\n 👍 650, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">wordBreak</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> wordDict <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> wordDict<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">wordBreakInner</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> wordDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">wordBreakInner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dict <span class=\"token operator\">:</span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> subResult <span class=\"token operator\">=</span> <span class=\"token function\">wordBreakInner</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> index <span class=\"token operator\">-</span> dict<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resultMap<span class=\"token punctuation\">,</span> wordDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sub <span class=\"token operator\">:</span> subResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sub <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-136","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-29T02:45:14.000Z","_content":"\n```java\n/**\nGiven a non-empty array of integers nums, every element appears twice except \nfor one. Find that single one. \n\n You must implement a solution with a linear runtime complexity and use only \nconstant extra space. \n\n \n Example 1: \n Input: nums = [2,2,1]\nOutput: 1\n Example 2: \n Input: nums = [4,1,2,1,2]\nOutput: 4\n Example 3: \n Input: nums = [1]\nOutput: 1\n \n \n Constraints: \n\n \n 1 <= nums.length <= 3 * 10⁴ \n -3 * 10⁴ <= nums[i] <= 3 * 10⁴ \n Each element in the array appears twice except for one element which appears \nonly once. \n \n Related Topics位运算 | 数组 \n\n 👍 2545, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int result = 0;\n\n        for (int num : nums) {\n            result ^= num;\n        }\n\n        return result;\n    }\n}\n```\n","source":"_posts/lc-136.md","raw":"---\ntitle: lc-136\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-29 10:45:14\n---\n\n```java\n/**\nGiven a non-empty array of integers nums, every element appears twice except \nfor one. Find that single one. \n\n You must implement a solution with a linear runtime complexity and use only \nconstant extra space. \n\n \n Example 1: \n Input: nums = [2,2,1]\nOutput: 1\n Example 2: \n Input: nums = [4,1,2,1,2]\nOutput: 4\n Example 3: \n Input: nums = [1]\nOutput: 1\n \n \n Constraints: \n\n \n 1 <= nums.length <= 3 * 10⁴ \n -3 * 10⁴ <= nums[i] <= 3 * 10⁴ \n Each element in the array appears twice except for one element which appears \nonly once. \n \n Related Topics位运算 | 数组 \n\n 👍 2545, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int result = 0;\n\n        for (int num : nums) {\n            result ^= num;\n        }\n\n        return result;\n    }\n}\n```\n","slug":"lc-136","published":1,"updated":"2022-08-29T02:48:51.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyh00103suu95wbghol","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a non-empty array of integers nums, every element appears twice except \nfor one. Find that single one. \n\n You must implement a solution with a linear runtime complexity and use only \nconstant extra space. \n\n \n Example 1: \n Input: nums = [2,2,1]\nOutput: 1\n Example 2: \n Input: nums = [4,1,2,1,2]\nOutput: 4\n Example 3: \n Input: nums = [1]\nOutput: 1\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 3 * 10⁴ \n -3 * 10⁴ &lt;= nums[i] &lt;= 3 * 10⁴ \n Each element in the array appears twice except for one element which appears \nonly once. \n \n Related Topics位运算 | 数组 \n\n 👍 2545, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a non-empty array of integers nums, every element appears twice except \nfor one. Find that single one. \n\n You must implement a solution with a linear runtime complexity and use only \nconstant extra space. \n\n \n Example 1: \n Input: nums = [2,2,1]\nOutput: 1\n Example 2: \n Input: nums = [4,1,2,1,2]\nOutput: 4\n Example 3: \n Input: nums = [1]\nOutput: 1\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 3 * 10⁴ \n -3 * 10⁴ &lt;= nums[i] &lt;= 3 * 10⁴ \n Each element in the array appears twice except for one element which appears \nonly once. \n \n Related Topics位运算 | 数组 \n\n 👍 2545, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-146","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-05T03:14:09.000Z","_content":"\n```java\n/**\nDesign a data structure that follows the constraints of a Least Recently Used (\nLRU) cache.\n\n Implement the LRUCache class:\n\n\n LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n int get(int key) Return the value of the key if the key exists, otherwise\nreturn -1.\n void put(int key, int value) Update the value of the key if the key exists.\nOtherwise, add the key-value pair to the cache. If the number of keys exceeds the\ncapacity from this operation, evict the least recently used key.\n\n\n The functions get and put must each run in O(1) average time complexity.\n\n\n Example 1:\n\n\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n\n\n Constraints:\n\n\n 1 <= capacity <= 3000\n 0 <= key <= 10⁴\n 0 <= value <= 10⁵\n At most 2 * 10⁵ calls will be made to get and put.\n\n Related Topics设计 | 哈希表 | 链表 | 双向链表\n\n 👍 2368, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass LRUCache {\n\n    class LruNode {\n        int key;\n        int value;\n        LruNode left;\n        LruNode right;\n    }\n\n    private Map<Integer, LruNode> lruMap = new HashMap<>();\n    private LruNode head, tail;\n    private int capacity;\n\n    public LRUCache(int capacity) {\n        this.lruMap = new HashMap<>(capacity);\n        this.capacity = capacity;\n    }\n\n    public int get(int key) {\n        LruNode node = lruMap.get(key);\n\n        if (node == null) {\n            return -1;\n        }\n        LruNode leftNode = node.left;\n        LruNode rightNode = node.right;\n\n        if (tail == node) {\n            return node.value;\n        }\n\n        if (leftNode != null) {\n            leftNode.right = rightNode;\n            rightNode.left = leftNode;\n        } else if (rightNode != null) {\n            rightNode.left = null;\n            head = rightNode;\n        }\n        tail.right = node;\n        node.left = tail;\n        node.right = null;\n        tail = node;\n\n        return node.value;\n    }\n\n    public void put(int key, int value) {\n        if (lruMap.containsKey(key)) {\n            LruNode node = lruMap.get(key);\n            node.value = value;\n            get(key);\n            return;\n        }\n        if (lruMap.size() == this.capacity) {\n            LruNode head = this.head;\n            lruMap.remove(head.key);\n            if (head.right != null) {\n                head.right.left = null;\n            }\n            this.head = head.right;\n        }\n        LruNode newNode = new LruNode();\n        newNode.key = key;\n        newNode.value = value;\n\n        if (head == null) {\n            head = newNode;\n            newNode.left = null;\n        } else {\n            newNode.left = tail;\n            tail.right = newNode;\n        }\n        newNode.right = null;\n        tail = newNode;\n        lruMap.put(key, newNode);\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-146.md","raw":"---\ntitle: lc-146\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-05 11:14:09\n---\n\n```java\n/**\nDesign a data structure that follows the constraints of a Least Recently Used (\nLRU) cache.\n\n Implement the LRUCache class:\n\n\n LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n int get(int key) Return the value of the key if the key exists, otherwise\nreturn -1.\n void put(int key, int value) Update the value of the key if the key exists.\nOtherwise, add the key-value pair to the cache. If the number of keys exceeds the\ncapacity from this operation, evict the least recently used key.\n\n\n The functions get and put must each run in O(1) average time complexity.\n\n\n Example 1:\n\n\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n\n\n Constraints:\n\n\n 1 <= capacity <= 3000\n 0 <= key <= 10⁴\n 0 <= value <= 10⁵\n At most 2 * 10⁵ calls will be made to get and put.\n\n Related Topics设计 | 哈希表 | 链表 | 双向链表\n\n 👍 2368, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass LRUCache {\n\n    class LruNode {\n        int key;\n        int value;\n        LruNode left;\n        LruNode right;\n    }\n\n    private Map<Integer, LruNode> lruMap = new HashMap<>();\n    private LruNode head, tail;\n    private int capacity;\n\n    public LRUCache(int capacity) {\n        this.lruMap = new HashMap<>(capacity);\n        this.capacity = capacity;\n    }\n\n    public int get(int key) {\n        LruNode node = lruMap.get(key);\n\n        if (node == null) {\n            return -1;\n        }\n        LruNode leftNode = node.left;\n        LruNode rightNode = node.right;\n\n        if (tail == node) {\n            return node.value;\n        }\n\n        if (leftNode != null) {\n            leftNode.right = rightNode;\n            rightNode.left = leftNode;\n        } else if (rightNode != null) {\n            rightNode.left = null;\n            head = rightNode;\n        }\n        tail.right = node;\n        node.left = tail;\n        node.right = null;\n        tail = node;\n\n        return node.value;\n    }\n\n    public void put(int key, int value) {\n        if (lruMap.containsKey(key)) {\n            LruNode node = lruMap.get(key);\n            node.value = value;\n            get(key);\n            return;\n        }\n        if (lruMap.size() == this.capacity) {\n            LruNode head = this.head;\n            lruMap.remove(head.key);\n            if (head.right != null) {\n                head.right.left = null;\n            }\n            this.head = head.right;\n        }\n        LruNode newNode = new LruNode();\n        newNode.key = key;\n        newNode.value = value;\n\n        if (head == null) {\n            head = newNode;\n            newNode.left = null;\n        } else {\n            newNode.left = tail;\n            tail.right = newNode;\n        }\n        newNode.right = null;\n        tail = newNode;\n        lruMap.put(key, newNode);\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-146","published":1,"updated":"2022-09-05T03:14:36.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyi00133suu054k8z2w","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nDesign a data structure that follows the constraints of a Least Recently Used (\nLRU) cache.\n\n Implement the LRUCache class:\n\n\n LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n int get(int key) Return the value of the key if the key exists, otherwise\nreturn -1.\n void put(int key, int value) Update the value of the key if the key exists.\nOtherwise, add the key-value pair to the cache. If the number of keys exceeds the\ncapacity from this operation, evict the least recently used key.\n\n\n The functions get and put must each run in O(1) average time complexity.\n\n\n Example 1:\n\n\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n\n\n Constraints:\n\n\n 1 &lt;= capacity &lt;= 3000\n 0 &lt;= key &lt;= 10⁴\n 0 &lt;= value &lt;= 10⁵\n At most 2 * 10⁵ calls will be made to get and put.\n\n Related Topics设计 | 哈希表 | 链表 | 双向链表\n\n 👍 2368, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">LruNode</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LruNode</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LruNode</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LruNode</span><span class=\"token punctuation\">&gt;</span></span> lruMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LruNode</span> head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lruMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">LruNode</span> node <span class=\"token operator\">=</span> lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">LruNode</span> leftNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LruNode</span> rightNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            leftNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n            rightNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rightNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        tail<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">LruNode</span> node <span class=\"token operator\">=</span> lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">LruNode</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n            lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                head<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">LruNode</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LruNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newNode<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n        newNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n            newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n            tail<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        tail <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nDesign a data structure that follows the constraints of a Least Recently Used (\nLRU) cache.\n\n Implement the LRUCache class:\n\n\n LRUCache(int capacity) Initialize the LRU cache with positive size capacity.\n int get(int key) Return the value of the key if the key exists, otherwise\nreturn -1.\n void put(int key, int value) Update the value of the key if the key exists.\nOtherwise, add the key-value pair to the cache. If the number of keys exceeds the\ncapacity from this operation, evict the least recently used key.\n\n\n The functions get and put must each run in O(1) average time complexity.\n\n\n Example 1:\n\n\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is &#123;1=1&#125;\nlRUCache.put(2, 2); // cache is &#123;1=1, 2=2&#125;\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is &#123;1=1, 3=3&#125;\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is &#123;4=4, 3=3&#125;\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n\n\n Constraints:\n\n\n 1 &lt;= capacity &lt;= 3000\n 0 &lt;= key &lt;= 10⁴\n 0 &lt;= value &lt;= 10⁵\n At most 2 * 10⁵ calls will be made to get and put.\n\n Related Topics设计 | 哈希表 | 链表 | 双向链表\n\n 👍 2368, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">LruNode</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LruNode</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LruNode</span> right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LruNode</span><span class=\"token punctuation\">></span></span> lruMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LruNode</span> head<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lruMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">LruNode</span> node <span class=\"token operator\">=</span> lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">LruNode</span> leftNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LruNode</span> rightNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            leftNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n            rightNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            rightNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            head <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        tail<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        tail <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">LruNode</span> node <span class=\"token operator\">=</span> lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">LruNode</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n            lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                head<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">LruNode</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LruNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newNode<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n        newNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n            newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span>\n            tail<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        tail <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        lruMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-141","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-31T03:31:33.000Z","_content":"\n```java\n/**\nGiven head, the head of a linked list, determine if the linked list has a cycle \nin it. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to. \nNote that pos is not passed as a parameter. \n\n Return true if there is a cycle in the linked list. Otherwise, return false. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 1st node (0-indexed).\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 0th node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ <= Node.val <= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1601, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n\n        ListNode slow = head, fast = head;\n\n        while (head != null && fast != null) {\n            fast = fast.next;\n\n            if (fast == slow) {\n                return true;\n            }\n\n            if (fast != null) {\n                fast = fast.next;\n            }\n\n            if (fast == slow) {\n                return true;\n            }\n\n            slow = slow.next;\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-141.md","raw":"---\ntitle: lc-141\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-31 11:31:33\n---\n\n```java\n/**\nGiven head, the head of a linked list, determine if the linked list has a cycle \nin it. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to. \nNote that pos is not passed as a parameter. \n\n Return true if there is a cycle in the linked list. Otherwise, return false. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 1st node (0-indexed).\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 0th node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ <= Node.val <= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1601, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n\n        ListNode slow = head, fast = head;\n\n        while (head != null && fast != null) {\n            fast = fast.next;\n\n            if (fast == slow) {\n                return true;\n            }\n\n            if (fast != null) {\n                fast = fast.next;\n            }\n\n            if (fast == slow) {\n                return true;\n            }\n\n            slow = slow.next;\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-141","published":1,"updated":"2022-08-31T09:04:35.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyj00163suu7qth5mcp","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven head, the head of a linked list, determine if the linked list has a cycle \nin it. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to. \nNote that pos is not passed as a parameter. \n\n Return true if there is a cycle in the linked list. Otherwise, return false. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 1st node (0-indexed).\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 0th node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ &lt;= Node.val &lt;= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1601, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven head, the head of a linked list, determine if the linked list has a cycle \nin it. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to. \nNote that pos is not passed as a parameter. \n\n Return true if there is a cycle in the linked list. Otherwise, return false. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 1st node (0-indexed).\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to \nthe 0th node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ &lt;= Node.val &lt;= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1601, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-142","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-01T02:48:09.000Z","_content":"\n```java\n/**\nGiven the head of a linked list, return the node where the cycle begins. If \nthere is no cycle, return null. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to (0-\nindexed). It is -1 if there is no cycle. Note that pos is not passed as a \nparameter. \n\n Do not modify the linked list. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the \nsecond node.\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the \nfirst node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ <= Node.val <= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1751, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode slow = head, fast = head;\n        int fastLen = 0, slowLen = 0;\n        Set<ListNode> nodeSet = new HashSet<>();\n\n        while (head != null && fast != null) {\n            fast = fast.next;\n            fastLen++;\n            if (fast == slow) {\n                break;\n            }\n\n            if (fast != null) {\n                fast = fast.next;\n                fastLen++;\n            }\n\n            if (fast == slow) {\n                break;\n            }\n\n            slow = slow.next;\n            slowLen++;\n        }\n        if (fast == null || slow == null) {\n            return null;\n        }\n\n        for (int i = 0; i < fastLen - slowLen; i++) {\n            nodeSet.add(fast);\n            fast = fast.next;\n        }\n\n        slow = head;\n\n        while (!nodeSet.contains(slow)) {\n            slow = slow.next;\n        }\n\n        return slow;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-142.md","raw":"---\ntitle: lc-142\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-01 10:48:09\n---\n\n```java\n/**\nGiven the head of a linked list, return the node where the cycle begins. If \nthere is no cycle, return null. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to (0-\nindexed). It is -1 if there is no cycle. Note that pos is not passed as a \nparameter. \n\n Do not modify the linked list. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the \nsecond node.\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the \nfirst node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ <= Node.val <= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1751, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode slow = head, fast = head;\n        int fastLen = 0, slowLen = 0;\n        Set<ListNode> nodeSet = new HashSet<>();\n\n        while (head != null && fast != null) {\n            fast = fast.next;\n            fastLen++;\n            if (fast == slow) {\n                break;\n            }\n\n            if (fast != null) {\n                fast = fast.next;\n                fastLen++;\n            }\n\n            if (fast == slow) {\n                break;\n            }\n\n            slow = slow.next;\n            slowLen++;\n        }\n        if (fast == null || slow == null) {\n            return null;\n        }\n\n        for (int i = 0; i < fastLen - slowLen; i++) {\n            nodeSet.add(fast);\n            fast = fast.next;\n        }\n\n        slow = head;\n\n        while (!nodeSet.contains(slow)) {\n            slow = slow.next;\n        }\n\n        return slow;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-142","published":1,"updated":"2022-09-01T03:28:56.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyj00193suu1phk5rbx","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a linked list, return the node where the cycle begins. If \nthere is no cycle, return null. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to (0-\nindexed). It is -1 if there is no cycle. Note that pos is not passed as a \nparameter. \n\n Do not modify the linked list. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the \nsecond node.\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the \nfirst node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ &lt;= Node.val &lt;= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1751, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> fastLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> slowLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">&gt;</span></span> nodeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            fastLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                fastLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            slowLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> slow <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> fastLen <span class=\"token operator\">-</span> slowLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nodeSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a linked list, return the node where the cycle begins. If \nthere is no cycle, return null. \n\n There is a cycle in a linked list if there is some node in the list that can \nbe reached again by continuously following the next pointer. Internally, pos is \nused to denote the index of the node that tail's next pointer is connected to (0-\nindexed). It is -1 if there is no cycle. Note that pos is not passed as a \nparameter. \n\n Do not modify the linked list. \n\n \n Example 1: \n\n \nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the \nsecond node.\n \n\n Example 2: \n\n \nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the \nfirst node.\n \n\n Example 3: \n\n \nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n \n\n \n Constraints: \n\n \n The number of the nodes in the list is in the range [0, 10⁴]. \n -10⁵ &lt;= Node.val &lt;= 10⁵ \n pos is -1 or a valid index in the linked-list. \n \n\n \n Follow up: Can you solve it using O(1) (i.e. constant) memory? \n Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1751, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> fastLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> slowLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> nodeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            fastLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                fastLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            slowLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> slow <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> fastLen <span class=\"token operator\">-</span> slowLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nodeSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-149","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-15T03:35:51.000Z","_content":"\n```java\n/**\n * Given an array of points where points[i] = [xi, yi] represents a point on the X-\n * Y plane, return the maximum number of points that lie on the same straight line.\n * <p>\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: points = [[1,1],[2,2],[3,3]]\n * Output: 3\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n * Output: 4\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * 1 <= points.length <= 300\n * points[i].length == 2\n * -10⁴ <= xi, yi <= 10⁴\n * All the points are unique.\n * <p>\n * Related Topics几何 | 数组 | 哈希表 | 数学\n * <p>\n * 👍 454, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxPoints(int[][] points) {\n        int n = points.length;\n        if (n <= 2) {\n            return n;\n        }\n        int ret = 0;\n        for (int i = 0; i < n; i++) {\n            if (ret >= n - i || ret > n / 2) {\n                break;\n            }\n            Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for (int j = i + 1; j < n; j++) {\n                int x = points[i][0] - points[j][0];\n                int y = points[i][1] - points[j][1];\n                if (x == 0) {\n                    y = 1;\n                } else if (y == 0) {\n                    x = 1;\n                } else {\n                    if (y < 0) {\n                        x = -x;\n                        y = -y;\n                    }\n                    int gcdXY = gcd(Math.abs(x), Math.abs(y));\n                    x /= gcdXY;\n                    y /= gcdXY;\n                }\n                int key = y + x * 20001;\n                map.put(key, map.getOrDefault(key, 0) + 1);\n            }\n            int maxn = 0;\n            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                int num = entry.getValue();\n                maxn = Math.max(maxn, num + 1);\n            }\n            ret = Math.max(ret, maxn);\n        }\n        return ret;\n    }\n\n    public int gcd(int a, int b) {\n        return b != 0 ? gcd(b, a % b) : a;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-149.md","raw":"---\ntitle: lc-149\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-15 11:35:51\n---\n\n```java\n/**\n * Given an array of points where points[i] = [xi, yi] represents a point on the X-\n * Y plane, return the maximum number of points that lie on the same straight line.\n * <p>\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: points = [[1,1],[2,2],[3,3]]\n * Output: 3\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n * Output: 4\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * 1 <= points.length <= 300\n * points[i].length == 2\n * -10⁴ <= xi, yi <= 10⁴\n * All the points are unique.\n * <p>\n * Related Topics几何 | 数组 | 哈希表 | 数学\n * <p>\n * 👍 454, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxPoints(int[][] points) {\n        int n = points.length;\n        if (n <= 2) {\n            return n;\n        }\n        int ret = 0;\n        for (int i = 0; i < n; i++) {\n            if (ret >= n - i || ret > n / 2) {\n                break;\n            }\n            Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for (int j = i + 1; j < n; j++) {\n                int x = points[i][0] - points[j][0];\n                int y = points[i][1] - points[j][1];\n                if (x == 0) {\n                    y = 1;\n                } else if (y == 0) {\n                    x = 1;\n                } else {\n                    if (y < 0) {\n                        x = -x;\n                        y = -y;\n                    }\n                    int gcdXY = gcd(Math.abs(x), Math.abs(y));\n                    x /= gcdXY;\n                    y /= gcdXY;\n                }\n                int key = y + x * 20001;\n                map.put(key, map.getOrDefault(key, 0) + 1);\n            }\n            int maxn = 0;\n            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                int num = entry.getValue();\n                maxn = Math.max(maxn, num + 1);\n            }\n            ret = Math.max(ret, maxn);\n        }\n        return ret;\n    }\n\n    public int gcd(int a, int b) {\n        return b != 0 ? gcd(b, a % b) : a;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-149","published":1,"updated":"2022-11-15T03:53:32.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyk001c3suucdveh082","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Given an array of points where points[i] = [xi, yi] represents a point on the X-\n * Y plane, return the maximum number of points that lie on the same straight line.\n * &lt;p&gt;\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: points = [[1,1],[2,2],[3,3]]\n * Output: 3\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 2:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n * Output: 4\n * &lt;p&gt;\n * &lt;p&gt;\n * &lt;p&gt;\n * Constraints:\n * &lt;p&gt;\n * &lt;p&gt;\n * 1 &lt;= points.length &lt;= 300\n * points[i].length == 2\n * -10⁴ &lt;= xi, yi &lt;= 10⁴\n * All the points are unique.\n * &lt;p&gt;\n * Related Topics几何 | 数组 | 哈希表 | 数学\n * &lt;p&gt;\n * 👍 454, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxPoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&gt;=</span> n <span class=\"token operator\">-</span> i <span class=\"token operator\">||</span> ret <span class=\"token operator\">&gt;</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> points<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> points<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n                        y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">int</span> gcdXY <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    x <span class=\"token operator\">/=</span> gcdXY<span class=\"token punctuation\">;</span>\n                    y <span class=\"token operator\">/=</span> gcdXY<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> x <span class=\"token operator\">*</span> <span class=\"token number\">20001</span><span class=\"token punctuation\">;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                maxn <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxn<span class=\"token punctuation\">,</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> maxn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Given an array of points where points[i] = [xi, yi] represents a point on the X-\n * Y plane, return the maximum number of points that lie on the same straight line.\n * &lt;p>\n * &lt;p>\n * &lt;p>\n * Example 1:\n * &lt;p>\n * &lt;p>\n * Input: points = [[1,1],[2,2],[3,3]]\n * Output: 3\n * &lt;p>\n * &lt;p>\n * Example 2:\n * &lt;p>\n * &lt;p>\n * Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n * Output: 4\n * &lt;p>\n * &lt;p>\n * &lt;p>\n * Constraints:\n * &lt;p>\n * &lt;p>\n * 1 &lt;= points.length &lt;= 300\n * points[i].length == 2\n * -10⁴ &lt;= xi, yi &lt;= 10⁴\n * All the points are unique.\n * &lt;p>\n * Related Topics几何 | 数组 | 哈希表 | 数学\n * &lt;p>\n * 👍 454, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxPoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">>=</span> n <span class=\"token operator\">-</span> i <span class=\"token operator\">||</span> ret <span class=\"token operator\">></span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> points<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> points<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n                        y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">int</span> gcdXY <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    x <span class=\"token operator\">/=</span> gcdXY<span class=\"token punctuation\">;</span>\n                    y <span class=\"token operator\">/=</span> gcdXY<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> x <span class=\"token operator\">*</span> <span class=\"token number\">20001</span><span class=\"token punctuation\">;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                maxn <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxn<span class=\"token punctuation\">,</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ret <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> maxn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-155","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-07T02:49:18.000Z","_content":"\n```java\n/**\nDesign a stack that supports push, pop, top, and retrieving the minimum element \nin constant time. \n\n Implement the MinStack class: \n\n \n MinStack() initializes the stack object. \n void push(int val) pushes the element val onto the stack. \n void pop() removes the element on the top of the stack. \n int top() gets the top element of the stack. \n int getMin() retrieves the minimum element in the stack. \n \n\n You must implement a solution with O(1) time complexity for each function. \n\n \n Example 1: \n\n \nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n \n\n \n Constraints: \n\n \n -2³¹ <= val <= 2³¹ - 1 \n Methods pop, top and getMin operations will always be called on non-empty \nstacks. \n At most 3 * 10⁴ calls will be made to push, pop, top, and getMin. \n \n Related Topics栈 | 设计 \n\n 👍 1400, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass MinStack {\n\n    List<Integer> stackList;\n\n    int minIndex;\n\n\n\n    public MinStack() {\n        stackList = new ArrayList<>();\n        minIndex = -1;\n    }\n\n    public void push(int val) {\n        if (minIndex == -1) {\n            minIndex = 0;\n        } else if (val < stackList.get(minIndex)) {\n            minIndex = stackList.size();\n        }\n\n        stackList.add(val);\n    }\n\n    public void pop() {\n        stackList.remove(stackList.size() - 1);\n\n        if (minIndex == stackList.size()) {\n            int minIndex = -1;\n            int minV = Integer.MAX_VALUE;\n\n            for (int i = 0; i < stackList.size(); i++) {\n                if (stackList.get(i) < minV) {\n                    minV = stackList.get(i);\n                    minIndex = i;\n                }\n            }\n\n            this.minIndex = minIndex;\n        }\n    }\n\n    public int top() {\n        return stackList.get(stackList.size() - 1);\n    }\n\n    public int getMin() {\n        if (minIndex == -1) {\n            return Integer.MAX_VALUE;\n        }\n        return stackList.get(minIndex);\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-155.md","raw":"---\ntitle: lc-155\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-07 10:49:18\n---\n\n```java\n/**\nDesign a stack that supports push, pop, top, and retrieving the minimum element \nin constant time. \n\n Implement the MinStack class: \n\n \n MinStack() initializes the stack object. \n void push(int val) pushes the element val onto the stack. \n void pop() removes the element on the top of the stack. \n int top() gets the top element of the stack. \n int getMin() retrieves the minimum element in the stack. \n \n\n You must implement a solution with O(1) time complexity for each function. \n\n \n Example 1: \n\n \nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n \n\n \n Constraints: \n\n \n -2³¹ <= val <= 2³¹ - 1 \n Methods pop, top and getMin operations will always be called on non-empty \nstacks. \n At most 3 * 10⁴ calls will be made to push, pop, top, and getMin. \n \n Related Topics栈 | 设计 \n\n 👍 1400, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass MinStack {\n\n    List<Integer> stackList;\n\n    int minIndex;\n\n\n\n    public MinStack() {\n        stackList = new ArrayList<>();\n        minIndex = -1;\n    }\n\n    public void push(int val) {\n        if (minIndex == -1) {\n            minIndex = 0;\n        } else if (val < stackList.get(minIndex)) {\n            minIndex = stackList.size();\n        }\n\n        stackList.add(val);\n    }\n\n    public void pop() {\n        stackList.remove(stackList.size() - 1);\n\n        if (minIndex == stackList.size()) {\n            int minIndex = -1;\n            int minV = Integer.MAX_VALUE;\n\n            for (int i = 0; i < stackList.size(); i++) {\n                if (stackList.get(i) < minV) {\n                    minV = stackList.get(i);\n                    minIndex = i;\n                }\n            }\n\n            this.minIndex = minIndex;\n        }\n    }\n\n    public int top() {\n        return stackList.get(stackList.size() - 1);\n    }\n\n    public int getMin() {\n        if (minIndex == -1) {\n            return Integer.MAX_VALUE;\n        }\n        return stackList.get(minIndex);\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-155","published":1,"updated":"2022-09-07T06:12:54.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyl001f3suuf5v9c5u7","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nDesign a stack that supports push, pop, top, and retrieving the minimum element \nin constant time. \n\n Implement the MinStack class: \n\n \n MinStack() initializes the stack object. \n void push(int val) pushes the element val onto the stack. \n void pop() removes the element on the top of the stack. \n int top() gets the top element of the stack. \n int getMin() retrieves the minimum element in the stack. \n \n\n You must implement a solution with O(1) time complexity for each function. \n\n \n Example 1: \n\n \nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n \n\n \n Constraints: \n\n \n -2³¹ &lt;= val &lt;= 2³¹ - 1 \n Methods pop, top and getMin operations will always be called on non-empty \nstacks. \n At most 3 * 10⁴ calls will be made to push, pop, top, and getMin. \n \n Related Topics栈 | 设计 \n\n 👍 1400, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MinStack</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stackList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> minIndex<span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stackList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            minIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            minIndex <span class=\"token operator\">=</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        stackList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stackList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minIndex <span class=\"token operator\">==</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    minV <span class=\"token operator\">=</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> minIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nDesign a stack that supports push, pop, top, and retrieving the minimum element \nin constant time. \n\n Implement the MinStack class: \n\n \n MinStack() initializes the stack object. \n void push(int val) pushes the element val onto the stack. \n void pop() removes the element on the top of the stack. \n int top() gets the top element of the stack. \n int getMin() retrieves the minimum element in the stack. \n \n\n You must implement a solution with O(1) time complexity for each function. \n\n \n Example 1: \n\n \nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n \n\n \n Constraints: \n\n \n -2³¹ &lt;= val &lt;= 2³¹ - 1 \n Methods pop, top and getMin operations will always be called on non-empty \nstacks. \n At most 3 * 10⁴ calls will be made to push, pop, top, and getMin. \n \n Related Topics栈 | 设计 \n\n 👍 1400, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MinStack</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stackList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> minIndex<span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stackList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            minIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            minIndex <span class=\"token operator\">=</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        stackList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stackList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minIndex <span class=\"token operator\">==</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    minV <span class=\"token operator\">=</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> minIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stackList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stackList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-148","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-05T03:25:43.000Z","_content":"\n```java\n/**\nGiven the head of a linked list, return the list after sorting it in ascending \norder. \n\n \n Example 1: \n\n \nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n \n\n Example 2: \n\n \nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [0, 5 * 10⁴]. \n -10⁵ <= Node.val <= 10⁵ \n \n\n \n Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e.\n constant space)? \n Related Topics链表 | 双指针 | 分治 | 排序 | 归并排序 \n\n 👍 1771, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    public ListNode sortList(ListNode head) {\n        return sortList(head, null);\n    }\n\n    public ListNode sortList(ListNode head, ListNode tail) {\n        if (head == null) {\n            return head;\n        }\n        if (head.next == tail) {\n            head.next = null;\n            return head;\n        }\n        ListNode slow = head, fast = head;\n        while (fast != tail) {\n            slow = slow.next;\n            fast = fast.next;\n            if (fast != tail) {\n                fast = fast.next;\n            }\n        }\n        ListNode mid = slow;\n        ListNode list1 = sortList(head, mid);\n        ListNode list2 = sortList(mid, tail);\n        ListNode sorted = merge(list1, list2);\n        return sorted;\n    }\n\n    public ListNode merge(ListNode head1, ListNode head2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode temp = dummyHead, temp1 = head1, temp2 = head2;\n        while (temp1 != null && temp2 != null) {\n            if (temp1.val <= temp2.val) {\n                temp.next = temp1;\n                temp1 = temp1.next;\n            } else {\n                temp.next = temp2;\n                temp2 = temp2.next;\n            }\n            temp = temp.next;\n        }\n        if (temp1 != null) {\n            temp.next = temp1;\n        } else if (temp2 != null) {\n            temp.next = temp2;\n        }\n        return dummyHead.next;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-148.md","raw":"---\ntitle: lc-148\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-05 11:25:43\n---\n\n```java\n/**\nGiven the head of a linked list, return the list after sorting it in ascending \norder. \n\n \n Example 1: \n\n \nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n \n\n Example 2: \n\n \nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [0, 5 * 10⁴]. \n -10⁵ <= Node.val <= 10⁵ \n \n\n \n Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e.\n constant space)? \n Related Topics链表 | 双指针 | 分治 | 排序 | 归并排序 \n\n 👍 1771, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    public ListNode sortList(ListNode head) {\n        return sortList(head, null);\n    }\n\n    public ListNode sortList(ListNode head, ListNode tail) {\n        if (head == null) {\n            return head;\n        }\n        if (head.next == tail) {\n            head.next = null;\n            return head;\n        }\n        ListNode slow = head, fast = head;\n        while (fast != tail) {\n            slow = slow.next;\n            fast = fast.next;\n            if (fast != tail) {\n                fast = fast.next;\n            }\n        }\n        ListNode mid = slow;\n        ListNode list1 = sortList(head, mid);\n        ListNode list2 = sortList(mid, tail);\n        ListNode sorted = merge(list1, list2);\n        return sorted;\n    }\n\n    public ListNode merge(ListNode head1, ListNode head2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode temp = dummyHead, temp1 = head1, temp2 = head2;\n        while (temp1 != null && temp2 != null) {\n            if (temp1.val <= temp2.val) {\n                temp.next = temp1;\n                temp1 = temp1.next;\n            } else {\n                temp.next = temp2;\n                temp2 = temp2.next;\n            }\n            temp = temp.next;\n        }\n        if (temp1 != null) {\n            temp.next = temp1;\n        } else if (temp2 != null) {\n            temp.next = temp2;\n        }\n        return dummyHead.next;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-148","published":1,"updated":"2022-09-05T06:49:17.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbym001i3suu5l5iaw7f","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a linked list, return the list after sorting it in ascending \norder. \n\n \n Example 1: \n\n \nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n \n\n Example 2: \n\n \nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [0, 5 * 10⁴]. \n -10⁵ &lt;= Node.val &lt;= 10⁵ \n \n\n \n Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e.\n constant space)? \n Related Topics链表 | 双指针 | 分治 | 排序 | 归并排序 \n\n 👍 1771, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">ListNode</span> mid <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> list1 <span class=\"token operator\">=</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> list2 <span class=\"token operator\">=</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> sorted <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sorted<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> head2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">,</span> temp1 <span class=\"token operator\">=</span> head1<span class=\"token punctuation\">,</span> temp2 <span class=\"token operator\">=</span> head2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dummyHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a linked list, return the list after sorting it in ascending \norder. \n\n \n Example 1: \n\n \nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n \n\n Example 2: \n\n \nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [0, 5 * 10⁴]. \n -10⁵ &lt;= Node.val &lt;= 10⁵ \n \n\n \n Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e.\n constant space)? \n Related Topics链表 | 双指针 | 分治 | 排序 | 归并排序 \n\n 👍 1771, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> mid <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> list1 <span class=\"token operator\">=</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> list2 <span class=\"token operator\">=</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> sorted <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sorted<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> head2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">,</span> temp1 <span class=\"token operator\">=</span> head1<span class=\"token punctuation\">,</span> temp2 <span class=\"token operator\">=</span> head2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> dummyHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-15","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-15T02:57:47.000Z","_content":"\n```java\n//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k\n//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. \n//\n// Notice that the solution set must not contain duplicate triplets. \n//\n// \n// Example 1: \n// Input: nums = [-1,0,1,2,-1,-4]\n//Output: [[-1,-1,2],[-1,0,1]]\n// Example 2: \n// Input: nums = []\n//Output: []\n// Example 3: \n// Input: nums = [0]\n//Output: []\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 3000 \n// -105 <= nums[i] <= 105 \n// \n// Related Topics Array Two Pointers Sorting \n// 👍 18445 👎 1774\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n\n        if (nums == null || nums.length <= 2) {\n            return result;\n        }\n\n        Arrays.sort(nums);\n\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            for (int j = i + 1; j < nums.length - 1; j++) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                int start = j + 1;\n                int end = nums.length - 1;\n                int target = -(nums[i] + nums[j]);\n\n                if (target < 0) {\n                    break;\n                }\n                while (start <= end) {\n                    if (start + 1 >= end) {\n                        if (nums[start] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[start]);\n                            result.add(oneR);\n                        } else if (nums[end] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[end]);\n                            result.add(oneR);\n                        }\n                        break;\n                    }\n\n                    int mid = start + (end - start) / 2;\n                    if (nums[mid] == target) {\n                        List<Integer> oneR = new ArrayList<>();\n                        oneR.add(nums[i]);\n                        oneR.add(nums[j]);\n                        oneR.add(nums[mid]);\n                        result.add(oneR);\n                        break;\n                    } else if (nums[mid] < target) {\n                        start = mid;\n                    } else {\n                        end = mid;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","source":"_posts/lc-15.md","raw":"---\ntitle: lc-15\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-15 10:57:47\n---\n\n```java\n//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k\n//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. \n//\n// Notice that the solution set must not contain duplicate triplets. \n//\n// \n// Example 1: \n// Input: nums = [-1,0,1,2,-1,-4]\n//Output: [[-1,-1,2],[-1,0,1]]\n// Example 2: \n// Input: nums = []\n//Output: []\n// Example 3: \n// Input: nums = [0]\n//Output: []\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 3000 \n// -105 <= nums[i] <= 105 \n// \n// Related Topics Array Two Pointers Sorting \n// 👍 18445 👎 1774\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n\n        if (nums == null || nums.length <= 2) {\n            return result;\n        }\n\n        Arrays.sort(nums);\n\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            for (int j = i + 1; j < nums.length - 1; j++) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                int start = j + 1;\n                int end = nums.length - 1;\n                int target = -(nums[i] + nums[j]);\n\n                if (target < 0) {\n                    break;\n                }\n                while (start <= end) {\n                    if (start + 1 >= end) {\n                        if (nums[start] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[start]);\n                            result.add(oneR);\n                        } else if (nums[end] == target) {\n                            List<Integer> oneR = new ArrayList<>();\n                            oneR.add(nums[i]);\n                            oneR.add(nums[j]);\n                            oneR.add(nums[end]);\n                            result.add(oneR);\n                        }\n                        break;\n                    }\n\n                    int mid = start + (end - start) / 2;\n                    if (nums[mid] == target) {\n                        List<Integer> oneR = new ArrayList<>();\n                        oneR.add(nums[i]);\n                        oneR.add(nums[j]);\n                        oneR.add(nums[mid]);\n                        result.add(oneR);\n                        break;\n                    } else if (nums[mid] < target) {\n                        start = mid;\n                    } else {\n                        end = mid;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","slug":"lc-15","published":1,"updated":"2023-02-01T13:19:48.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbym001l3suu86857y55","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k</span>\n<span class=\"token comment\">//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Notice that the solution set must not contain duplicate triplets. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [-1,0,1,2,-1,-4]</span>\n<span class=\"token comment\">//Output: [[-1,-1,2],[-1,0,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [0]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 3000 </span>\n<span class=\"token comment\">// -105 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 18445 👎 1774</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k</span>\n<span class=\"token comment\">//]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Notice that the solution set must not contain duplicate triplets. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [-1,0,1,2,-1,-4]</span>\n<span class=\"token comment\">//Output: [[-1,-1,2],[-1,0,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [0]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 3000 </span>\n<span class=\"token comment\">// -105 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 18445 👎 1774</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        oneR<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"lc-152","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-06T03:05:03.000Z","_content":"\n```java\n/**\nGiven an integer array nums, find a contiguous non-empty subarray within the \narray that has the largest product, and return the product. \n\n The test cases are generated so that the answer will fit in a 32-bit integer. \n\n A subarray is a contiguous subsequence of the array. \n\n \n Example 1: \n\n \nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n \n\n Example 2: \n\n \nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 2 * 10⁴ \n -10 <= nums[i] <= 10 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n Related Topics数组 | 动态规划 \n\n 👍 1781, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int[] fMax = new int[nums.length];\n        int[] fMin = new int[nums.length];\n        \n        System.arraycopy(nums, 0, fMax, 0, nums.length);\n        System.arraycopy(nums, 0, fMin, 0, nums.length);\n\n        for (int i = 1; i < nums.length; i++) {\n            fMax[i] = Math.max(fMax[i - 1] * nums[i], Math.max(nums[i], fMin[i - 1] * nums[i]));\n            fMin[i] = Math.min(fMin[i - 1] * nums[i], Math.min(nums[i], fMax[i - 1] * nums[i]));\n        }\n\n        int result = fMax[0];\n        for (int i = 1; i < nums.length; i++) {\n            result = Math.max(result, fMax[i]);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-152.md","raw":"---\ntitle: lc-152\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-06 11:05:03\n---\n\n```java\n/**\nGiven an integer array nums, find a contiguous non-empty subarray within the \narray that has the largest product, and return the product. \n\n The test cases are generated so that the answer will fit in a 32-bit integer. \n\n A subarray is a contiguous subsequence of the array. \n\n \n Example 1: \n\n \nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n \n\n Example 2: \n\n \nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 2 * 10⁴ \n -10 <= nums[i] <= 10 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n Related Topics数组 | 动态规划 \n\n 👍 1781, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProduct(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int[] fMax = new int[nums.length];\n        int[] fMin = new int[nums.length];\n        \n        System.arraycopy(nums, 0, fMax, 0, nums.length);\n        System.arraycopy(nums, 0, fMin, 0, nums.length);\n\n        for (int i = 1; i < nums.length; i++) {\n            fMax[i] = Math.max(fMax[i - 1] * nums[i], Math.max(nums[i], fMin[i - 1] * nums[i]));\n            fMin[i] = Math.min(fMin[i - 1] * nums[i], Math.min(nums[i], fMax[i - 1] * nums[i]));\n        }\n\n        int result = fMax[0];\n        for (int i = 1; i < nums.length; i++) {\n            result = Math.max(result, fMax[i]);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-152","published":1,"updated":"2022-09-06T08:07:15.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyn001o3suubequ8mbi","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, find a contiguous non-empty subarray within the \narray that has the largest product, and return the product. \n\n The test cases are generated so that the answer will fit in a 32-bit integer. \n\n A subarray is a contiguous subsequence of the array. \n\n \n Example 1: \n\n \nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n \n\n Example 2: \n\n \nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 2 * 10⁴ \n -10 &lt;= nums[i] &lt;= 10 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n Related Topics数组 | 动态规划 \n\n 👍 1781, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProduct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fMin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fMax<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fMin<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>fMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fMin<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fMin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>fMin<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> fMax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> fMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, find a contiguous non-empty subarray within the \narray that has the largest product, and return the product. \n\n The test cases are generated so that the answer will fit in a 32-bit integer. \n\n A subarray is a contiguous subsequence of the array. \n\n \n Example 1: \n\n \nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n \n\n Example 2: \n\n \nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 2 * 10⁴ \n -10 &lt;= nums[i] &lt;= 10 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n Related Topics数组 | 动态规划 \n\n 👍 1781, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProduct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fMin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fMax<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fMin<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>fMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fMin<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fMin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>fMin<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> fMax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> fMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-169","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-09T03:34:47.000Z","_content":"\n```java\n/**\nGiven an array nums of size n, return the majority element. \n\n The majority element is the element that appears more than ⌊n / 2⌋ times. You \nmay assume that the majority element always exists in the array. \n\n \n Example 1: \n Input: nums = [3,2,3]\nOutput: 3\n Example 2: \n Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n \n \n Constraints: \n\n \n n == nums.length \n 1 <= n <= 5 * 10⁴ \n -10⁹ <= nums[i] <= 10⁹ \n \n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space? \nRelated Topics数组 | 哈希表 | 分治 | 计数 | 排序 \n\n 👍 1557, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int majorityElement(int[] nums) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n        int maxNum = 0, result = 0;\n\n        for (int i = 0; i < nums.length; i += 2) {\n            if (i == nums.length - 1) {\n                if (numMap.containsKey(nums[i])) {\n                    numMap.put(nums[i], numMap.get(nums[i]) + 1);\n                } else if (numMap.size() == 0) {\n                    return nums[i];\n                }\n            } else {\n                if (nums[i] == nums[i + 1]) {\n                    int curNum = numMap.getOrDefault(nums[i], 0);\n                    numMap.put(nums[i], curNum + 2);\n                }\n            }\n        }\n\n        for (Map.Entry<Integer, Integer> entry : numMap.entrySet()) {\n            if (entry.getValue() > maxNum) {\n                maxNum = entry.getValue();\n                result = entry.getKey();\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-169.md","raw":"---\ntitle: lc-169\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-09 11:34:47\n---\n\n```java\n/**\nGiven an array nums of size n, return the majority element. \n\n The majority element is the element that appears more than ⌊n / 2⌋ times. You \nmay assume that the majority element always exists in the array. \n\n \n Example 1: \n Input: nums = [3,2,3]\nOutput: 3\n Example 2: \n Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n \n \n Constraints: \n\n \n n == nums.length \n 1 <= n <= 5 * 10⁴ \n -10⁹ <= nums[i] <= 10⁹ \n \n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space? \nRelated Topics数组 | 哈希表 | 分治 | 计数 | 排序 \n\n 👍 1557, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int majorityElement(int[] nums) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n        int maxNum = 0, result = 0;\n\n        for (int i = 0; i < nums.length; i += 2) {\n            if (i == nums.length - 1) {\n                if (numMap.containsKey(nums[i])) {\n                    numMap.put(nums[i], numMap.get(nums[i]) + 1);\n                } else if (numMap.size() == 0) {\n                    return nums[i];\n                }\n            } else {\n                if (nums[i] == nums[i + 1]) {\n                    int curNum = numMap.getOrDefault(nums[i], 0);\n                    numMap.put(nums[i], curNum + 2);\n                }\n            }\n        }\n\n        for (Map.Entry<Integer, Integer> entry : numMap.entrySet()) {\n            if (entry.getValue() > maxNum) {\n                maxNum = entry.getValue();\n                result = entry.getKey();\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-169","published":1,"updated":"2022-09-09T06:06:39.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyn001r3suu02kch0sc","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array nums of size n, return the majority element. \n\n The majority element is the element that appears more than ⌊n / 2⌋ times. You \nmay assume that the majority element always exists in the array. \n\n \n Example 1: \n Input: nums = [3,2,3]\nOutput: 3\n Example 2: \n Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n \n \n Constraints: \n\n \n n == nums.length \n 1 &lt;= n &lt;= 5 * 10⁴ \n -10⁹ &lt;= nums[i] &lt;= 10⁹ \n \n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space? \nRelated Topics数组 | 哈希表 | 分治 | 计数 | 排序 \n\n 👍 1557, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> numMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    numMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> curNum <span class=\"token operator\">=</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    numMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> curNum <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">:</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> maxNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                maxNum <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                result <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array nums of size n, return the majority element. \n\n The majority element is the element that appears more than ⌊n / 2⌋ times. You \nmay assume that the majority element always exists in the array. \n\n \n Example 1: \n Input: nums = [3,2,3]\nOutput: 3\n Example 2: \n Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n \n \n Constraints: \n\n \n n == nums.length \n 1 &lt;= n &lt;= 5 * 10⁴ \n -10⁹ &lt;= nums[i] &lt;= 10⁹ \n \n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space? \nRelated Topics数组 | 哈希表 | 分治 | 计数 | 排序 \n\n 👍 1557, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    numMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">int</span> curNum <span class=\"token operator\">=</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    numMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> curNum <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                maxNum <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                result <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-198","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-13T03:38:53.000Z","_content":"\n```java\n/**\nYou are a professional robber planning to rob houses along a street. Each house \nhas a certain amount of money stashed, the only constraint stopping you from \nrobbing each of them is that adjacent houses have security systems connected and \nit will automatically contact the police if two adjacent houses were broken into \non the same night. \n\n Given an integer array nums representing the amount of money of each house, \nreturn the maximum amount of money you can rob tonight without alerting the police.\n \n\n \n Example 1: \n\n \nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n \n\n Example 2: \n\n \nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (\nmoney = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 100 \n 0 <= nums[i] <= 400 \n \n Related Topics数组 | 动态规划 \n\n 👍 2287, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int rob(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        int[] f = new int[nums.length];\n        int[] g = new int[nums.length];\n\n        f[0] = nums[0];\n\n        for (int i = 1; i < nums.length; i++) {\n            f[i] = g[i - 1] + nums[i];\n            g[i] = Math.max(f[i - 1], g[i - 1]);\n        }\n\n        return Math.max(f[nums.length - 1], g[nums.length - 1]);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-198.md","raw":"---\ntitle: lc-198\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-13 11:38:53\n---\n\n```java\n/**\nYou are a professional robber planning to rob houses along a street. Each house \nhas a certain amount of money stashed, the only constraint stopping you from \nrobbing each of them is that adjacent houses have security systems connected and \nit will automatically contact the police if two adjacent houses were broken into \non the same night. \n\n Given an integer array nums representing the amount of money of each house, \nreturn the maximum amount of money you can rob tonight without alerting the police.\n \n\n \n Example 1: \n\n \nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n \n\n Example 2: \n\n \nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (\nmoney = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 100 \n 0 <= nums[i] <= 400 \n \n Related Topics数组 | 动态规划 \n\n 👍 2287, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int rob(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        int[] f = new int[nums.length];\n        int[] g = new int[nums.length];\n\n        f[0] = nums[0];\n\n        for (int i = 1; i < nums.length; i++) {\n            f[i] = g[i - 1] + nums[i];\n            g[i] = Math.max(f[i - 1], g[i - 1]);\n        }\n\n        return Math.max(f[nums.length - 1], g[nums.length - 1]);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-198","published":1,"updated":"2022-09-13T07:09:27.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyo001u3suue4po54ua","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nYou are a professional robber planning to rob houses along a street. Each house \nhas a certain amount of money stashed, the only constraint stopping you from \nrobbing each of them is that adjacent houses have security systems connected and \nit will automatically contact the police if two adjacent houses were broken into \non the same night. \n\n Given an integer array nums representing the amount of money of each house, \nreturn the maximum amount of money you can rob tonight without alerting the police.\n \n\n \n Example 1: \n\n \nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n \n\n Example 2: \n\n \nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (\nmoney = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 100 \n 0 &lt;= nums[i] &lt;= 400 \n \n Related Topics数组 | 动态规划 \n\n 👍 2287, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nYou are a professional robber planning to rob houses along a street. Each house \nhas a certain amount of money stashed, the only constraint stopping you from \nrobbing each of them is that adjacent houses have security systems connected and \nit will automatically contact the police if two adjacent houses were broken into \non the same night. \n\n Given an integer array nums representing the amount of money of each house, \nreturn the maximum amount of money you can rob tonight without alerting the police.\n \n\n \n Example 1: \n\n \nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n \n\n Example 2: \n\n \nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (\nmoney = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 100 \n 0 &lt;= nums[i] &lt;= 400 \n \n Related Topics数组 | 动态规划 \n\n 👍 2287, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-17","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-16T02:57:16.000Z","_content":"\n```java\n//Given a string containing digits from 2-9 inclusive, return all possible lette\n//r combinations that the number could represent. Return the answer in any order. \n//\n//\n// A mapping of digits to letters (just like on the telephone buttons) is given \n//below. Note that 1 does not map to any letters. \n//\n// \n// Example 1: \n//\n// \n//Input: digits = \"23\"\n//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n// \n//\n// Example 2: \n//\n// \n//Input: digits = \"\"\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: digits = \"2\"\n//Output: [\"a\",\"b\",\"c\"]\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= digits.length <= 4 \n// digits[i] is a digit in the range ['2', '9']. \n// \n// Related Topics Hash Table String Backtracking \n// 👍 10965 👎 707\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        Map<Character, String> myMap = new HashMap<>();\n        myMap.put('2', \"abc\");\n        myMap.put('3', \"def\");\n        myMap.put('4', \"ghi\");\n        myMap.put('5', \"jkl\");\n        myMap.put('6', \"mno\");\n        myMap.put('7', \"pqrs\");\n        myMap.put('8', \"tuv\");\n        myMap.put('9', \"wxyz\");\n\n        List<String> result = null;\n\n        if (digits == null || digits.length() == 0) {\n            return new ArrayList<>();\n        }\n\n        for (int i = 0; i < digits.length(); i++) {\n            result = getNext(result, myMap, digits, i);\n        }\n\n        return result;\n    }\n\n    private List<String> getNext(List<String> curList,  Map<Character, String> myMap, String digits, int index) {\n        if (index >= digits.length()) {\n            return curList;\n        }\n\n        char ch = digits.charAt(index);\n        String charsStr = myMap.get(ch);\n        List<String> result = new ArrayList<>();\n\n        for (char repCh : charsStr.toCharArray()) {\n            if (curList == null) {\n                result.add(\"\" + repCh);\n            } else {\n                for (String curStr : curList) {\n                    result.add(curStr + repCh);\n                }\n            }\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","source":"_posts/lc-17.md","raw":"---\ntitle: lc-17\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-16 10:57:16\n---\n\n```java\n//Given a string containing digits from 2-9 inclusive, return all possible lette\n//r combinations that the number could represent. Return the answer in any order. \n//\n//\n// A mapping of digits to letters (just like on the telephone buttons) is given \n//below. Note that 1 does not map to any letters. \n//\n// \n// Example 1: \n//\n// \n//Input: digits = \"23\"\n//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n// \n//\n// Example 2: \n//\n// \n//Input: digits = \"\"\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: digits = \"2\"\n//Output: [\"a\",\"b\",\"c\"]\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= digits.length <= 4 \n// digits[i] is a digit in the range ['2', '9']. \n// \n// Related Topics Hash Table String Backtracking \n// 👍 10965 👎 707\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        Map<Character, String> myMap = new HashMap<>();\n        myMap.put('2', \"abc\");\n        myMap.put('3', \"def\");\n        myMap.put('4', \"ghi\");\n        myMap.put('5', \"jkl\");\n        myMap.put('6', \"mno\");\n        myMap.put('7', \"pqrs\");\n        myMap.put('8', \"tuv\");\n        myMap.put('9', \"wxyz\");\n\n        List<String> result = null;\n\n        if (digits == null || digits.length() == 0) {\n            return new ArrayList<>();\n        }\n\n        for (int i = 0; i < digits.length(); i++) {\n            result = getNext(result, myMap, digits, i);\n        }\n\n        return result;\n    }\n\n    private List<String> getNext(List<String> curList,  Map<Character, String> myMap, String digits, int index) {\n        if (index >= digits.length()) {\n            return curList;\n        }\n\n        char ch = digits.charAt(index);\n        String charsStr = myMap.get(ch);\n        List<String> result = new ArrayList<>();\n\n        for (char repCh : charsStr.toCharArray()) {\n            if (curList == null) {\n                result.add(\"\" + repCh);\n            } else {\n                for (String curStr : curList) {\n                    result.add(curStr + repCh);\n                }\n            }\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n\n","slug":"lc-17","published":1,"updated":"2023-02-01T13:19:50.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyp001x3suu8exs6dd9","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string containing digits from 2-9 inclusive, return all possible lette</span>\n<span class=\"token comment\">//r combinations that the number could represent. Return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A mapping of digits to letters (just like on the telephone buttons) is given </span>\n<span class=\"token comment\">//below. Note that 1 does not map to any letters. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"23\"</span>\n<span class=\"token comment\">//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"\"</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"2\"</span>\n<span class=\"token comment\">//Output: [\"a\",\"b\",\"c\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= digits.length &lt;= 4 </span>\n<span class=\"token comment\">// digits[i] is a digit in the range ['2', '9']. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Hash Table String Backtracking </span>\n<span class=\"token comment\">// 👍 10965 👎 707</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> myMap<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> curList<span class=\"token punctuation\">,</span>  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> myMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> curList<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> charsStr <span class=\"token operator\">=</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> repCh <span class=\"token operator\">:</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curList <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> curStr <span class=\"token operator\">:</span> curList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curStr <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string containing digits from 2-9 inclusive, return all possible lette</span>\n<span class=\"token comment\">//r combinations that the number could represent. Return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A mapping of digits to letters (just like on the telephone buttons) is given </span>\n<span class=\"token comment\">//below. Note that 1 does not map to any letters. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"23\"</span>\n<span class=\"token comment\">//Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"\"</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = \"2\"</span>\n<span class=\"token comment\">//Output: [\"a\",\"b\",\"c\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= digits.length &lt;= 4 </span>\n<span class=\"token comment\">// digits[i] is a digit in the range ['2', '9']. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Hash Table String Backtracking </span>\n<span class=\"token comment\">// 👍 10965 👎 707</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">letterCombinations</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mno\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pqrs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tuv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        myMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> myMap<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> curList<span class=\"token punctuation\">,</span>  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> digits<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> curList<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> charsStr <span class=\"token operator\">=</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> repCh <span class=\"token operator\">:</span> charsStr<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curList <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> curStr <span class=\"token operator\">:</span> curList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curStr <span class=\"token operator\">+</span> repCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"lc-200","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-14T02:49:32.000Z","_content":"\n```java\n/**\nGiven an m x n 2D binary grid grid which represents a map of '1's (land) and '0\n's (water), return the number of islands. \n\n An island is surrounded by water and is formed by connecting adjacent lands \nhorizontally or vertically. You may assume all four edges of the grid are all \nsurrounded by water. \n\n \n Example 1: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n \n\n Example 2: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n \n\n \n Constraints: \n\n \n m == grid.length \n n == grid[i].length \n 1 <= m, n <= 300 \n grid[i][j] is '0' or '1'. \n \n Related Topics深度优先搜索 | 广度优先搜索 | 并查集 | 数组 | 矩阵 \n\n 👍 1899, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numIslands(char[][] grid) {\n        int cnt = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == '1') {\n                    cnt++;\n                    scaleOut(grid, i, j);\n                }\n            }\n        }\n\n        return cnt;\n    }\n\n    private void scaleOut(char[][] grid, int r, int c) {\n        if (grid[r][c] == '0') {\n            return;\n        }\n\n        grid[r][c] = '0';\n\n        if (r < grid.length - 1) {\n            scaleOut(grid, r + 1, c);\n        }\n\n\n        if (c < grid[0].length - 1) {\n            scaleOut(grid, r, c + 1);\n        }\n\n\n        if (r > 0) {\n            scaleOut(grid, r - 1, c);\n        }\n\n\n        if (c > 0) {\n            scaleOut(grid, r, c - 1);\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-200.md","raw":"---\ntitle: lc-200\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-14 10:49:32\n---\n\n```java\n/**\nGiven an m x n 2D binary grid grid which represents a map of '1's (land) and '0\n's (water), return the number of islands. \n\n An island is surrounded by water and is formed by connecting adjacent lands \nhorizontally or vertically. You may assume all four edges of the grid are all \nsurrounded by water. \n\n \n Example 1: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n \n\n Example 2: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n \n\n \n Constraints: \n\n \n m == grid.length \n n == grid[i].length \n 1 <= m, n <= 300 \n grid[i][j] is '0' or '1'. \n \n Related Topics深度优先搜索 | 广度优先搜索 | 并查集 | 数组 | 矩阵 \n\n 👍 1899, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numIslands(char[][] grid) {\n        int cnt = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == '1') {\n                    cnt++;\n                    scaleOut(grid, i, j);\n                }\n            }\n        }\n\n        return cnt;\n    }\n\n    private void scaleOut(char[][] grid, int r, int c) {\n        if (grid[r][c] == '0') {\n            return;\n        }\n\n        grid[r][c] = '0';\n\n        if (r < grid.length - 1) {\n            scaleOut(grid, r + 1, c);\n        }\n\n\n        if (c < grid[0].length - 1) {\n            scaleOut(grid, r, c + 1);\n        }\n\n\n        if (r > 0) {\n            scaleOut(grid, r - 1, c);\n        }\n\n\n        if (c > 0) {\n            scaleOut(grid, r, c - 1);\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-200","published":1,"updated":"2022-09-14T11:55:42.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyp00203suug7mz2elg","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an m x n 2D binary grid grid which represents a map of '1's (land) and '0\n's (water), return the number of islands. \n\n An island is surrounded by water and is formed by connecting adjacent lands \nhorizontally or vertically. You may assume all four edges of the grid are all \nsurrounded by water. \n\n \n Example 1: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n \n\n Example 2: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n \n\n \n Constraints: \n\n \n m == grid.length \n n == grid[i].length \n 1 &lt;= m, n &lt;= 300 \n grid[i][j] is '0' or '1'. \n \n Related Topics深度优先搜索 | 广度优先搜索 | 并查集 | 数组 | 矩阵 \n\n 👍 1899, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numIslands</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an m x n 2D binary grid grid which represents a map of '1's (land) and '0\n's (water), return the number of islands. \n\n An island is surrounded by water and is formed by connecting adjacent lands \nhorizontally or vertically. You may assume all four edges of the grid are all \nsurrounded by water. \n\n \n Example 1: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n \n\n Example 2: \n\n \nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n \n\n \n Constraints: \n\n \n m == grid.length \n n == grid[i].length \n 1 &lt;= m, n &lt;= 300 \n grid[i][j] is '0' or '1'. \n \n Related Topics深度优先搜索 | 广度优先搜索 | 并查集 | 数组 | 矩阵 \n\n 👍 1899, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numIslands</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scaleOut</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-202","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-18T11:45:26.000Z","_content":"\n```java\n/**\nWrite an algorithm to determine if a number n is happy. \n\n A happy number is a number defined by the following process: \n\n \n Starting with any positive integer, replace the number by the sum of the \nsquares of its digits. \n Repeat the process until the number equals 1 (where it will stay), or it loops \nendlessly in a cycle which does not include 1. \n Those numbers for which this process ends in 1 are happy. \n \n\n Return true if n is a happy number, and false if not. \n\n \n Example 1: \n\n \nInput: n = 19\nOutput: true\nExplanation:\n1² + 9² = 82\n8² + 2² = 68\n6² + 8² = 100\n1² + 0² + 0² = 1\n \n\n Example 2: \n\n \nInput: n = 2\nOutput: false\n \n\n \n Constraints: \n\n \n 1 <= n <= 2³¹ - 1 \n \n Related Topics哈希表 | 数学 | 双指针 \n\n 👍 1135, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isHappy(int n) {\n        Set<Integer> sumSet = new HashSet();\n\n        while (!sumSet.contains(n)) {\n            sumSet.add(n);\n            int newn = 0;\n\n            while (n > 0) {\n                int single = n % 10;\n                newn += (single * single);\n                n = n / 10;\n            }\n\n            if (newn == 1) {\n                return true;\n            }\n\n            n = newn;\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-202.md","raw":"---\ntitle: lc-202\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-18 19:45:26\n---\n\n```java\n/**\nWrite an algorithm to determine if a number n is happy. \n\n A happy number is a number defined by the following process: \n\n \n Starting with any positive integer, replace the number by the sum of the \nsquares of its digits. \n Repeat the process until the number equals 1 (where it will stay), or it loops \nendlessly in a cycle which does not include 1. \n Those numbers for which this process ends in 1 are happy. \n \n\n Return true if n is a happy number, and false if not. \n\n \n Example 1: \n\n \nInput: n = 19\nOutput: true\nExplanation:\n1² + 9² = 82\n8² + 2² = 68\n6² + 8² = 100\n1² + 0² + 0² = 1\n \n\n Example 2: \n\n \nInput: n = 2\nOutput: false\n \n\n \n Constraints: \n\n \n 1 <= n <= 2³¹ - 1 \n \n Related Topics哈希表 | 数学 | 双指针 \n\n 👍 1135, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isHappy(int n) {\n        Set<Integer> sumSet = new HashSet();\n\n        while (!sumSet.contains(n)) {\n            sumSet.add(n);\n            int newn = 0;\n\n            while (n > 0) {\n                int single = n % 10;\n                newn += (single * single);\n                n = n / 10;\n            }\n\n            if (newn == 1) {\n                return true;\n            }\n\n            n = newn;\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-202","published":1,"updated":"2022-11-18T12:04:18.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyq00233suucjdy4n8p","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nWrite an algorithm to determine if a number n is happy. \n\n A happy number is a number defined by the following process: \n\n \n Starting with any positive integer, replace the number by the sum of the \nsquares of its digits. \n Repeat the process until the number equals 1 (where it will stay), or it loops \nendlessly in a cycle which does not include 1. \n Those numbers for which this process ends in 1 are happy. \n \n\n Return true if n is a happy number, and false if not. \n\n \n Example 1: \n\n \nInput: n = 19\nOutput: true\nExplanation:\n1² + 9² = 82\n8² + 2² = 68\n6² + 8² = 100\n1² + 0² + 0² = 1\n \n\n Example 2: \n\n \nInput: n = 2\nOutput: false\n \n\n \n Constraints: \n\n \n 1 &lt;= n &lt;= 2³¹ - 1 \n \n Related Topics哈希表 | 数学 | 双指针 \n\n 👍 1135, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHappy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> sumSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sumSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sumSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> newn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> single <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                newn <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>single <span class=\"token operator\">*</span> single<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                n <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newn <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            n <span class=\"token operator\">=</span> newn<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nWrite an algorithm to determine if a number n is happy. \n\n A happy number is a number defined by the following process: \n\n \n Starting with any positive integer, replace the number by the sum of the \nsquares of its digits. \n Repeat the process until the number equals 1 (where it will stay), or it loops \nendlessly in a cycle which does not include 1. \n Those numbers for which this process ends in 1 are happy. \n \n\n Return true if n is a happy number, and false if not. \n\n \n Example 1: \n\n \nInput: n = 19\nOutput: true\nExplanation:\n1² + 9² = 82\n8² + 2² = 68\n6² + 8² = 100\n1² + 0² + 0² = 1\n \n\n Example 2: \n\n \nInput: n = 2\nOutput: false\n \n\n \n Constraints: \n\n \n 1 &lt;= n &lt;= 2³¹ - 1 \n \n Related Topics哈希表 | 数学 | 双指针 \n\n 👍 1135, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHappy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sumSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sumSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sumSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> newn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> single <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                newn <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>single <span class=\"token operator\">*</span> single<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                n <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newn <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            n <span class=\"token operator\">=</span> newn<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-204","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-21T03:25:20.000Z","_content":"\n```java\n/**\nGiven an integer n, return the number of prime numbers that are strictly less \nthan n. \n\n \n Example 1: \n\n \nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n \n\n Example 2: \n\n \nInput: n = 0\nOutput: 0\n \n\n Example 3: \n\n \nInput: n = 1\nOutput: 0\n \n\n \n Constraints: \n\n \n 0 <= n <= 5 * 10⁶ \n \n Related Topics数组 | 数学 | 枚举 | 数论 \n\n 👍 977, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int countPrimes(int n) {\n        boolean[] primes = new boolean[n];\n\n        int end = n % 2 == 0 ? n / 2 : (n + 2) / 2;\n\n        for (int i = 2; i <= end; i++) {\n            for (int j = 2; j <= end; j++) {\n                int num = i * j;\n                if (num > n) {\n                    break;\n                }\n                primes[num - 1] = true;\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 1; i < n - 1; i++) {\n            if (!primes[i]) {\n                result++;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-204.md","raw":"---\ntitle: lc-204\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-21 11:25:20\n---\n\n```java\n/**\nGiven an integer n, return the number of prime numbers that are strictly less \nthan n. \n\n \n Example 1: \n\n \nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n \n\n Example 2: \n\n \nInput: n = 0\nOutput: 0\n \n\n Example 3: \n\n \nInput: n = 1\nOutput: 0\n \n\n \n Constraints: \n\n \n 0 <= n <= 5 * 10⁶ \n \n Related Topics数组 | 数学 | 枚举 | 数论 \n\n 👍 977, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int countPrimes(int n) {\n        boolean[] primes = new boolean[n];\n\n        int end = n % 2 == 0 ? n / 2 : (n + 2) / 2;\n\n        for (int i = 2; i <= end; i++) {\n            for (int j = 2; j <= end; j++) {\n                int num = i * j;\n                if (num > n) {\n                    break;\n                }\n                primes[num - 1] = true;\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 1; i < n - 1; i++) {\n            if (!primes[i]) {\n                result++;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-204","published":1,"updated":"2022-11-21T12:11:39.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyq00263suuc6rhazxt","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer n, return the number of prime numbers that are strictly less \nthan n. \n\n \n Example 1: \n\n \nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n \n\n Example 2: \n\n \nInput: n = 0\nOutput: 0\n \n\n Example 3: \n\n \nInput: n = 1\nOutput: 0\n \n\n \n Constraints: \n\n \n 0 &lt;= n &lt;= 5 * 10⁶ \n \n Related Topics数组 | 数学 | 枚举 | 数论 \n\n 👍 977, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countPrimes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> primes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                primes<span class=\"token punctuation\">[</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer n, return the number of prime numbers that are strictly less \nthan n. \n\n \n Example 1: \n\n \nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n \n\n Example 2: \n\n \nInput: n = 0\nOutput: 0\n \n\n Example 3: \n\n \nInput: n = 1\nOutput: 0\n \n\n \n Constraints: \n\n \n 0 &lt;= n &lt;= 5 * 10⁶ \n \n Related Topics数组 | 数学 | 枚举 | 数论 \n\n 👍 977, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countPrimes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> primes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                primes<span class=\"token punctuation\">[</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-206","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-15T02:54:54.000Z","_content":"\n```java\n/**\nGiven the head of a singly linked list, reverse the list, and return the \nreversed list. \n\n \n Example 1: \n\n \nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: [2,1]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is the range [0, 5000]. \n -5000 <= Node.val <= 5000 \n \n\n \n Follow up: A linked list can be reversed either iteratively or recursively. \nCould you implement both? \n Related Topics递归 | 链表 \n\n 👍 2757, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        Pair<ListNode, ListNode> headTail = reverseInner(head);\n        headTail.getValue().next = null;\n        return headTail.getKey();\n    }\n\n    private Pair<ListNode, ListNode> reverseInner(ListNode node) {\n        if (node == null || node.next == null) {\n            return new Pair<>(node, node);\n        }\n\n        Pair<ListNode, ListNode> headTail = reverseInner(node.next);\n        headTail.getValue().next = node;\n        return new Pair<>(headTail.getKey(), node);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-206.md","raw":"---\ntitle: lc-206\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-15 10:54:54\n---\n\n```java\n/**\nGiven the head of a singly linked list, reverse the list, and return the \nreversed list. \n\n \n Example 1: \n\n \nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: [2,1]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is the range [0, 5000]. \n -5000 <= Node.val <= 5000 \n \n\n \n Follow up: A linked list can be reversed either iteratively or recursively. \nCould you implement both? \n Related Topics递归 | 链表 \n\n 👍 2757, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        Pair<ListNode, ListNode> headTail = reverseInner(head);\n        headTail.getValue().next = null;\n        return headTail.getKey();\n    }\n\n    private Pair<ListNode, ListNode> reverseInner(ListNode node) {\n        if (node == null || node.next == null) {\n            return new Pair<>(node, node);\n        }\n\n        Pair<ListNode, ListNode> headTail = reverseInner(node.next);\n        headTail.getValue().next = node;\n        return new Pair<>(headTail.getKey(), node);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-206","published":1,"updated":"2022-09-15T05:40:39.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyr00293suu9l4j008j","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a singly linked list, reverse the list, and return the \nreversed list. \n\n \n Example 1: \n\n \nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: [2,1]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is the range [0, 5000]. \n -5000 &lt;= Node.val &lt;= 5000 \n \n\n \n Follow up: A linked list can be reversed either iteratively or recursively. \nCould you implement both? \n Related Topics递归 | 链表 \n\n 👍 2757, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">&gt;</span></span> headTail <span class=\"token operator\">=</span> <span class=\"token function\">reverseInner</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">reverseInner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">&gt;</span></span> headTail <span class=\"token operator\">=</span> <span class=\"token function\">reverseInner</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a singly linked list, reverse the list, and return the \nreversed list. \n\n \n Example 1: \n\n \nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: [2,1]\n \n\n Example 3: \n\n \nInput: head = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the list is the range [0, 5000]. \n -5000 &lt;= Node.val &lt;= 5000 \n \n\n \n Follow up: A linked list can be reversed either iteratively or recursively. \nCould you implement both? \n Related Topics递归 | 链表 \n\n 👍 2757, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> headTail <span class=\"token operator\">=</span> <span class=\"token function\">reverseInner</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">reverseInner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> headTail <span class=\"token operator\">=</span> <span class=\"token function\">reverseInner</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>headTail<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-207","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-16T03:06:27.000Z","_content":"\n```java\n/**\n * There are a total of numCourses courses you have to take, labeled from 0 to\n * numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai,\n * bi] indicates that you must take course bi first if you want to take course ai.\n * <p>\n * <p>\n * For example, the pair [0, 1], indicates that to take course 0 you have to\n * first take course 1.\n * <p>\n * <p>\n * Return true if you can finish all courses. Otherwise, return false.\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: numCourses = 2, prerequisites = [[1,0]]\n * Output: true\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0. So it is possible.\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n * Output: false\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0, and to take course 0 you\n * should also have finished course 1. So it is impossible.\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * 1 <= numCourses <= 2000\n * 0 <= prerequisites.length <= 5000\n * prerequisites[i].length == 2\n * 0 <= ai, bi < numCourses\n * All the pairs prerequisites[i] are unique.\n * <p>\n * Related Topics深度优先搜索 | 广度优先搜索 | 图 | 拓扑排序\n * <p>\n * 👍 1422, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    private List<List<Integer>> edges;\n\n    private int[] visited;\n\n    private boolean valid = true;\n\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        edges = new ArrayList<>();\n\n        for (int i = 0; i < numCourses; i++) {\n            edges.add(new ArrayList<>());\n        }\n\n        visited = new int[numCourses];\n\n        for (int[] pre : prerequisites) {\n            edges.get(pre[1]).add(pre[0]);\n        }\n\n        for (int i = 0; i < numCourses; i++) {\n            this.valid = dfs(i);\n            if (!this.valid) {\n                break;\n            }\n        }\n\n        return this.valid;\n    }\n\n\n    private boolean dfs(int u) {\n        visited[u] = 1;\n\n        for (int v : edges.get(u)) {\n            if (visited[v] == 0) {\n                this.valid = dfs(v);\n                if (!this.valid) {\n                    break;\n                }\n            } else if (visited[v] == 1) {\n                this.valid = false;\n                break;\n            }\n        }\n\n        visited[u] = 2;\n\n        return this.valid;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-207.md","raw":"---\ntitle: lc-207\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-16 11:06:27\n---\n\n```java\n/**\n * There are a total of numCourses courses you have to take, labeled from 0 to\n * numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai,\n * bi] indicates that you must take course bi first if you want to take course ai.\n * <p>\n * <p>\n * For example, the pair [0, 1], indicates that to take course 0 you have to\n * first take course 1.\n * <p>\n * <p>\n * Return true if you can finish all courses. Otherwise, return false.\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: numCourses = 2, prerequisites = [[1,0]]\n * Output: true\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0. So it is possible.\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n * Output: false\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0, and to take course 0 you\n * should also have finished course 1. So it is impossible.\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * 1 <= numCourses <= 2000\n * 0 <= prerequisites.length <= 5000\n * prerequisites[i].length == 2\n * 0 <= ai, bi < numCourses\n * All the pairs prerequisites[i] are unique.\n * <p>\n * Related Topics深度优先搜索 | 广度优先搜索 | 图 | 拓扑排序\n * <p>\n * 👍 1422, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    private List<List<Integer>> edges;\n\n    private int[] visited;\n\n    private boolean valid = true;\n\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        edges = new ArrayList<>();\n\n        for (int i = 0; i < numCourses; i++) {\n            edges.add(new ArrayList<>());\n        }\n\n        visited = new int[numCourses];\n\n        for (int[] pre : prerequisites) {\n            edges.get(pre[1]).add(pre[0]);\n        }\n\n        for (int i = 0; i < numCourses; i++) {\n            this.valid = dfs(i);\n            if (!this.valid) {\n                break;\n            }\n        }\n\n        return this.valid;\n    }\n\n\n    private boolean dfs(int u) {\n        visited[u] = 1;\n\n        for (int v : edges.get(u)) {\n            if (visited[v] == 0) {\n                this.valid = dfs(v);\n                if (!this.valid) {\n                    break;\n                }\n            } else if (visited[v] == 1) {\n                this.valid = false;\n                break;\n            }\n        }\n\n        visited[u] = 2;\n\n        return this.valid;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-207","published":1,"updated":"2022-09-18T03:20:50.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyr002c3suufgkxh2h5","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * There are a total of numCourses courses you have to take, labeled from 0 to\n * numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai,\n * bi] indicates that you must take course bi first if you want to take course ai.\n * &lt;p&gt;\n * &lt;p&gt;\n * For example, the pair [0, 1], indicates that to take course 0 you have to\n * first take course 1.\n * &lt;p&gt;\n * &lt;p&gt;\n * Return true if you can finish all courses. Otherwise, return false.\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: numCourses = 2, prerequisites = [[1,0]]\n * Output: true\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0. So it is possible.\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 2:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n * Output: false\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0, and to take course 0 you\n * should also have finished course 1. So it is impossible.\n * &lt;p&gt;\n * &lt;p&gt;\n * &lt;p&gt;\n * Constraints:\n * &lt;p&gt;\n * &lt;p&gt;\n * 1 &lt;= numCourses &lt;= 2000\n * 0 &lt;= prerequisites.length &lt;= 5000\n * prerequisites[i].length == 2\n * 0 &lt;= ai, bi &lt; numCourses\n * All the pairs prerequisites[i] are unique.\n * &lt;p&gt;\n * Related Topics深度优先搜索 | 广度优先搜索 | 图 | 拓扑排序\n * &lt;p&gt;\n * 👍 1422, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> edges<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> valid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canFinish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numCourses<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prerequisites<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numCourses<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            edges<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>numCourses<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pre <span class=\"token operator\">:</span> prerequisites<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numCourses<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * There are a total of numCourses courses you have to take, labeled from 0 to\n * numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai,\n * bi] indicates that you must take course bi first if you want to take course ai.\n * &lt;p>\n * &lt;p>\n * For example, the pair [0, 1], indicates that to take course 0 you have to\n * first take course 1.\n * &lt;p>\n * &lt;p>\n * Return true if you can finish all courses. Otherwise, return false.\n * &lt;p>\n * &lt;p>\n * Example 1:\n * &lt;p>\n * &lt;p>\n * Input: numCourses = 2, prerequisites = [[1,0]]\n * Output: true\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0. So it is possible.\n * &lt;p>\n * &lt;p>\n * Example 2:\n * &lt;p>\n * &lt;p>\n * Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n * Output: false\n * Explanation: There are a total of 2 courses to take.\n * To take course 1 you should have finished course 0, and to take course 0 you\n * should also have finished course 1. So it is impossible.\n * &lt;p>\n * &lt;p>\n * &lt;p>\n * Constraints:\n * &lt;p>\n * &lt;p>\n * 1 &lt;= numCourses &lt;= 2000\n * 0 &lt;= prerequisites.length &lt;= 5000\n * prerequisites[i].length == 2\n * 0 &lt;= ai, bi &lt; numCourses\n * All the pairs prerequisites[i] are unique.\n * &lt;p>\n * Related Topics深度优先搜索 | 广度优先搜索 | 图 | 拓扑排序\n * &lt;p>\n * 👍 1422, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> edges<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> valid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canFinish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numCourses<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prerequisites<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numCourses<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            edges<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>numCourses<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pre <span class=\"token operator\">:</span> prerequisites<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numCourses<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        visited<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-208","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-18T03:35:33.000Z","_content":"\n```java\n/**\nA trie (pronounced as \"try\") or prefix tree is a tree data structure used to \nefficiently store and retrieve keys in a dataset of strings. There are various \napplications of this data structure, such as autocomplete and spellchecker. \n\n Implement the Trie class: \n\n \n Trie() Initializes the trie object. \n void insert(String word) Inserts the string word into the trie. \n boolean search(String word) Returns true if the string word is in the trie (i.\ne., was inserted before), and false otherwise. \n boolean startsWith(String prefix) Returns true if there is a previously \ninserted string word that has the prefix prefix, and false otherwise. \n \n\n \n Example 1: \n\n \nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n \n\n \n Constraints: \n\n \n 1 <= word.length, prefix.length <= 2000 \n word and prefix consist only of lowercase English letters. \n At most 3 * 10⁴ calls in total will be made to insert, search, and startsWith. \n\n \n Related Topics设计 | 字典树 | 哈希表 | 字符串 \n\n 👍 1293, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Trie {\n    Trie[] children;\n    boolean exist;\n\n    public Trie() {\n        this.children = new Trie[26];\n        this.exist = false;\n    }\n\n    public void insert(String word) {\n        char[] chars = word.toCharArray();\n        Trie node = this;\n        for (char ch : chars) {\n            if (node.children[ch - 'a'] == null) {\n                node.children[ch - 'a'] = new Trie();\n            }\n            node = node.children[ch - 'a'];\n        }\n        node.exist = true;\n    }\n\n    public boolean search(String word) {\n        char[] chars = word.toCharArray();\n        Trie node = this;\n        for (char ch : chars) {\n            if (node.children[ch - 'a'] == null) {\n                return false;\n            }\n            node = node.children[ch - 'a'];\n        }\n\n        return node.exist;\n    }\n\n    public boolean startsWith(String prefix) {\n        char[] chars = prefix.toCharArray();\n        Trie node = this;\n        for (char ch : chars) {\n            if (node.children[ch - 'a'] == null) {\n                return false;\n            }\n            node = node.children[ch - 'a'];\n        }\n\n        return true;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-208.md","raw":"---\ntitle: lc-208\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-18 11:35:33\n---\n\n```java\n/**\nA trie (pronounced as \"try\") or prefix tree is a tree data structure used to \nefficiently store and retrieve keys in a dataset of strings. There are various \napplications of this data structure, such as autocomplete and spellchecker. \n\n Implement the Trie class: \n\n \n Trie() Initializes the trie object. \n void insert(String word) Inserts the string word into the trie. \n boolean search(String word) Returns true if the string word is in the trie (i.\ne., was inserted before), and false otherwise. \n boolean startsWith(String prefix) Returns true if there is a previously \ninserted string word that has the prefix prefix, and false otherwise. \n \n\n \n Example 1: \n\n \nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n \n\n \n Constraints: \n\n \n 1 <= word.length, prefix.length <= 2000 \n word and prefix consist only of lowercase English letters. \n At most 3 * 10⁴ calls in total will be made to insert, search, and startsWith. \n\n \n Related Topics设计 | 字典树 | 哈希表 | 字符串 \n\n 👍 1293, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Trie {\n    Trie[] children;\n    boolean exist;\n\n    public Trie() {\n        this.children = new Trie[26];\n        this.exist = false;\n    }\n\n    public void insert(String word) {\n        char[] chars = word.toCharArray();\n        Trie node = this;\n        for (char ch : chars) {\n            if (node.children[ch - 'a'] == null) {\n                node.children[ch - 'a'] = new Trie();\n            }\n            node = node.children[ch - 'a'];\n        }\n        node.exist = true;\n    }\n\n    public boolean search(String word) {\n        char[] chars = word.toCharArray();\n        Trie node = this;\n        for (char ch : chars) {\n            if (node.children[ch - 'a'] == null) {\n                return false;\n            }\n            node = node.children[ch - 'a'];\n        }\n\n        return node.exist;\n    }\n\n    public boolean startsWith(String prefix) {\n        char[] chars = prefix.toCharArray();\n        Trie node = this;\n        for (char ch : chars) {\n            if (node.children[ch - 'a'] == null) {\n                return false;\n            }\n            node = node.children[ch - 'a'];\n        }\n\n        return true;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-208","published":1,"updated":"2022-09-18T05:49:51.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbys002f3suuefn42s0y","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nA trie (pronounced as \"try\") or prefix tree is a tree data structure used to \nefficiently store and retrieve keys in a dataset of strings. There are various \napplications of this data structure, such as autocomplete and spellchecker. \n\n Implement the Trie class: \n\n \n Trie() Initializes the trie object. \n void insert(String word) Inserts the string word into the trie. \n boolean search(String word) Returns true if the string word is in the trie (i.\ne., was inserted before), and false otherwise. \n boolean startsWith(String prefix) Returns true if there is a previously \ninserted string word that has the prefix prefix, and false otherwise. \n \n\n \n Example 1: \n\n \nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n \n\n \n Constraints: \n\n \n 1 &lt;= word.length, prefix.length &lt;= 2000 \n word and prefix consist only of lowercase English letters. \n At most 3 * 10⁴ calls in total will be made to insert, search, and startsWith. \n\n \n Related Topics设计 | 字典树 | 哈希表 | 字符串 \n\n 👍 1293, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> exist<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Trie</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> chars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        node<span class=\"token punctuation\">.</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Trie</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> chars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>exist<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Trie</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> chars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nA trie (pronounced as \"try\") or prefix tree is a tree data structure used to \nefficiently store and retrieve keys in a dataset of strings. There are various \napplications of this data structure, such as autocomplete and spellchecker. \n\n Implement the Trie class: \n\n \n Trie() Initializes the trie object. \n void insert(String word) Inserts the string word into the trie. \n boolean search(String word) Returns true if the string word is in the trie (i.\ne., was inserted before), and false otherwise. \n boolean startsWith(String prefix) Returns true if there is a previously \ninserted string word that has the prefix prefix, and false otherwise. \n \n\n \n Example 1: \n\n \nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n \n\n \n Constraints: \n\n \n 1 &lt;= word.length, prefix.length &lt;= 2000 \n word and prefix consist only of lowercase English letters. \n At most 3 * 10⁴ calls in total will be made to insert, search, and startsWith. \n\n \n Related Topics设计 | 字典树 | 哈希表 | 字符串 \n\n 👍 1293, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> exist<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Trie</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> chars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        node<span class=\"token punctuation\">.</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Trie</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> chars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>exist<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Trie</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> chars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-160","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-08T03:23:52.000Z","_content":"\n```java\n/**\nGiven the heads of two singly linked-lists headA and headB, return the node at \nwhich the two lists intersect. If the two linked lists have no intersection at \nall, return null. \n\n For example, the following two linked lists begin to intersect at node c1: \n\n The test cases are generated such that there are no cycles anywhere in the \nentire linked structure. \n\n Note that the linked lists must retain their original structure after the \nfunction returns. \n\n Custom Judge: \n\n The inputs to the judge are given as follows (your program is not given these \ninputs): \n\n \n intersectVal - The value of the node where the intersection occurs. This is 0 \nif there is no intersected node. \n listA - The first linked list. \n listB - The second linked list. \n skipA - The number of nodes to skip ahead in listA (starting from the head) to \nget to the intersected node. \n skipB - The number of nodes to skip ahead in listB (starting from the head) to \nget to the intersected node. \n \n\n The judge will then create the linked structure based on these inputs and pass \nthe two heads, headA and headB to your program. If you correctly return the \nintersected node, then your solution will be accepted. \n\n \n Example 1: \n\n \nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, \nskipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,\n6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 \nnodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1\n in A and B (2ⁿᵈ node in A and 3ʳᵈ node in B) are different node references. In \nother words, they point to two different locations in memory, while the nodes \nwith value 8 in A and B (3ʳᵈ node in A and 4ᵗʰ node in B) point to the same \nlocation in memory.\n \n\n Example 2: \n\n \nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB \n= 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,\n2,4]. There are 3 nodes before the intersected node in A; There are 1 node \nbefore the intersected node in B.\n \n\n Example 3: \n\n \nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it \nreads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, \nwhile skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n \n\n \n Constraints: \n\n \n The number of nodes of listA is in the m. \n The number of nodes of listB is in the n. \n 1 <= m, n <= 3 * 10⁴ \n 1 <= Node.val <= 10⁵ \n 0 <= skipA < m \n 0 <= skipB < n \n intersectVal is 0 if listA and listB do not intersect. \n intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect. \n \n\n \nFollow up: Could you write a solution that runs in O(m + n) time and use only O(\n1) memory? Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1845, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        int lA = 0, lB = 0;\n        ListNode temp = headA;\n\n        while (temp != null) {\n            lA++;\n            temp = temp.next;\n        }\n\n        temp = headB;\n\n        while (temp != null) {\n            lB++;\n            temp = temp.next;\n        }\n\n        if (lA > lB) {\n            for (int i = 0; i < lA - lB; i++) {\n                headA = headA.next;\n            }\n        } else if (lA < lB) {\n            for (int i = 0; i < lB - lA; i++) {\n                headB = headB.next;\n            }\n        }\n\n        while (headA != headB) {\n            headA = headA.next;\n            headB = headB.next;\n        }\n        return headA;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-160.md","raw":"---\ntitle: lc-160\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-08 11:23:52\n---\n\n```java\n/**\nGiven the heads of two singly linked-lists headA and headB, return the node at \nwhich the two lists intersect. If the two linked lists have no intersection at \nall, return null. \n\n For example, the following two linked lists begin to intersect at node c1: \n\n The test cases are generated such that there are no cycles anywhere in the \nentire linked structure. \n\n Note that the linked lists must retain their original structure after the \nfunction returns. \n\n Custom Judge: \n\n The inputs to the judge are given as follows (your program is not given these \ninputs): \n\n \n intersectVal - The value of the node where the intersection occurs. This is 0 \nif there is no intersected node. \n listA - The first linked list. \n listB - The second linked list. \n skipA - The number of nodes to skip ahead in listA (starting from the head) to \nget to the intersected node. \n skipB - The number of nodes to skip ahead in listB (starting from the head) to \nget to the intersected node. \n \n\n The judge will then create the linked structure based on these inputs and pass \nthe two heads, headA and headB to your program. If you correctly return the \nintersected node, then your solution will be accepted. \n\n \n Example 1: \n\n \nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, \nskipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,\n6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 \nnodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1\n in A and B (2ⁿᵈ node in A and 3ʳᵈ node in B) are different node references. In \nother words, they point to two different locations in memory, while the nodes \nwith value 8 in A and B (3ʳᵈ node in A and 4ᵗʰ node in B) point to the same \nlocation in memory.\n \n\n Example 2: \n\n \nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB \n= 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,\n2,4]. There are 3 nodes before the intersected node in A; There are 1 node \nbefore the intersected node in B.\n \n\n Example 3: \n\n \nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it \nreads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, \nwhile skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n \n\n \n Constraints: \n\n \n The number of nodes of listA is in the m. \n The number of nodes of listB is in the n. \n 1 <= m, n <= 3 * 10⁴ \n 1 <= Node.val <= 10⁵ \n 0 <= skipA < m \n 0 <= skipB < n \n intersectVal is 0 if listA and listB do not intersect. \n intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect. \n \n\n \nFollow up: Could you write a solution that runs in O(m + n) time and use only O(\n1) memory? Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1845, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        int lA = 0, lB = 0;\n        ListNode temp = headA;\n\n        while (temp != null) {\n            lA++;\n            temp = temp.next;\n        }\n\n        temp = headB;\n\n        while (temp != null) {\n            lB++;\n            temp = temp.next;\n        }\n\n        if (lA > lB) {\n            for (int i = 0; i < lA - lB; i++) {\n                headA = headA.next;\n            }\n        } else if (lA < lB) {\n            for (int i = 0; i < lB - lA; i++) {\n                headB = headB.next;\n            }\n        }\n\n        while (headA != headB) {\n            headA = headA.next;\n            headB = headB.next;\n        }\n        return headA;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-160","published":1,"updated":"2022-09-08T03:54:50.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyt002i3suubyqwbrww","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the heads of two singly linked-lists headA and headB, return the node at \nwhich the two lists intersect. If the two linked lists have no intersection at \nall, return null. \n\n For example, the following two linked lists begin to intersect at node c1: \n\n The test cases are generated such that there are no cycles anywhere in the \nentire linked structure. \n\n Note that the linked lists must retain their original structure after the \nfunction returns. \n\n Custom Judge: \n\n The inputs to the judge are given as follows (your program is not given these \ninputs): \n\n \n intersectVal - The value of the node where the intersection occurs. This is 0 \nif there is no intersected node. \n listA - The first linked list. \n listB - The second linked list. \n skipA - The number of nodes to skip ahead in listA (starting from the head) to \nget to the intersected node. \n skipB - The number of nodes to skip ahead in listB (starting from the head) to \nget to the intersected node. \n \n\n The judge will then create the linked structure based on these inputs and pass \nthe two heads, headA and headB to your program. If you correctly return the \nintersected node, then your solution will be accepted. \n\n \n Example 1: \n\n \nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, \nskipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,\n6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 \nnodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1\n in A and B (2ⁿᵈ node in A and 3ʳᵈ node in B) are different node references. In \nother words, they point to two different locations in memory, while the nodes \nwith value 8 in A and B (3ʳᵈ node in A and 4ᵗʰ node in B) point to the same \nlocation in memory.\n \n\n Example 2: \n\n \nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB \n= 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,\n2,4]. There are 3 nodes before the intersected node in A; There are 1 node \nbefore the intersected node in B.\n \n\n Example 3: \n\n \nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it \nreads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, \nwhile skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n \n\n \n Constraints: \n\n \n The number of nodes of listA is in the m. \n The number of nodes of listB is in the n. \n 1 &lt;= m, n &lt;= 3 * 10⁴ \n 1 &lt;= Node.val &lt;= 10⁵ \n 0 &lt;= skipA &lt; m \n 0 &lt;= skipB &lt; n \n intersectVal is 0 if listA and listB do not intersect. \n intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect. \n \n\n \nFollow up: Could you write a solution that runs in O(m + n) time and use only O(\n1) memory? Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1845, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> lA <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lB <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lA<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        temp <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lA <span class=\"token operator\">&gt;</span> lB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lA <span class=\"token operator\">-</span> lB<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                headA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lA <span class=\"token operator\">&lt;</span> lB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lB <span class=\"token operator\">-</span> lA<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                headB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>headA <span class=\"token operator\">!=</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            headA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            headB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> headA<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the heads of two singly linked-lists headA and headB, return the node at \nwhich the two lists intersect. If the two linked lists have no intersection at \nall, return null. \n\n For example, the following two linked lists begin to intersect at node c1: \n\n The test cases are generated such that there are no cycles anywhere in the \nentire linked structure. \n\n Note that the linked lists must retain their original structure after the \nfunction returns. \n\n Custom Judge: \n\n The inputs to the judge are given as follows (your program is not given these \ninputs): \n\n \n intersectVal - The value of the node where the intersection occurs. This is 0 \nif there is no intersected node. \n listA - The first linked list. \n listB - The second linked list. \n skipA - The number of nodes to skip ahead in listA (starting from the head) to \nget to the intersected node. \n skipB - The number of nodes to skip ahead in listB (starting from the head) to \nget to the intersected node. \n \n\n The judge will then create the linked structure based on these inputs and pass \nthe two heads, headA and headB to your program. If you correctly return the \nintersected node, then your solution will be accepted. \n\n \n Example 1: \n\n \nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, \nskipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,\n6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 \nnodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1\n in A and B (2ⁿᵈ node in A and 3ʳᵈ node in B) are different node references. In \nother words, they point to two different locations in memory, while the nodes \nwith value 8 in A and B (3ʳᵈ node in A and 4ᵗʰ node in B) point to the same \nlocation in memory.\n \n\n Example 2: \n\n \nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB \n= 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if \nthe two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,\n2,4]. There are 3 nodes before the intersected node in A; There are 1 node \nbefore the intersected node in B.\n \n\n Example 3: \n\n \nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it \nreads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, \nwhile skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n \n\n \n Constraints: \n\n \n The number of nodes of listA is in the m. \n The number of nodes of listB is in the n. \n 1 &lt;= m, n &lt;= 3 * 10⁴ \n 1 &lt;= Node.val &lt;= 10⁵ \n 0 &lt;= skipA &lt; m \n 0 &lt;= skipB &lt; n \n intersectVal is 0 if listA and listB do not intersect. \n intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect. \n \n\n \nFollow up: Could you write a solution that runs in O(m + n) time and use only O(\n1) memory? Related Topics哈希表 | 链表 | 双指针 \n\n 👍 1845, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123;\n *         val = x;\n *         next = null;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> lA <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lB <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            lA<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        temp <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            lB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lA <span class=\"token operator\">></span> lB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lA <span class=\"token operator\">-</span> lB<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                headA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lA <span class=\"token operator\">&lt;</span> lB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lB <span class=\"token operator\">-</span> lA<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                headB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>headA <span class=\"token operator\">!=</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            headA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            headB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> headA<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-19","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-17T02:39:59.000Z","_content":"\n```java\n//Given the head of a linked list, remove the nth node from the end of the list \n//and return its head. \n//\n// \n// Example 1: \n//\n// \n//Input: head = [1,2,3,4,5], n = 2\n//Output: [1,2,3,5]\n// \n//\n// Example 2: \n//\n// \n//Input: head = [1], n = 1\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: head = [1,2], n = 1\n//Output: [1]\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the list is sz. \n// 1 <= sz <= 30 \n// 0 <= Node.val <= 100 \n// 1 <= n <= sz \n// \n//\n// \n// Follow up: Could you do this in one pass? \n// Related Topics Linked List Two Pointers \n// 👍 10475 👎 494\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int listLen = 0;\n        ListNode temp = head;\n        \n        if (head == null || n <= 0) {\n            return head;\n        }\n        \n        while (temp != null) {\n            listLen++;\n            temp = temp.next;\n        }\n        \n        if (listLen < n) {\n            return head;\n        }\n        if (listLen == n) {\n            ListNode result = head.next;\n            head.next = null;\n            return result;\n        }\n        \n        int subLen = listLen - n - 1;\n        temp = head;\n        for (int i = 0; i < subLen; i++) {\n            temp = temp.next;\n        }\n        \n        ListNode removeNode = temp.next;\n        temp.next = removeNode.next;\n        removeNode.next = null;\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-19.md","raw":"---\ntitle: lc-19\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-17 10:39:59\n---\n\n```java\n//Given the head of a linked list, remove the nth node from the end of the list \n//and return its head. \n//\n// \n// Example 1: \n//\n// \n//Input: head = [1,2,3,4,5], n = 2\n//Output: [1,2,3,5]\n// \n//\n// Example 2: \n//\n// \n//Input: head = [1], n = 1\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: head = [1,2], n = 1\n//Output: [1]\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the list is sz. \n// 1 <= sz <= 30 \n// 0 <= Node.val <= 100 \n// 1 <= n <= sz \n// \n//\n// \n// Follow up: Could you do this in one pass? \n// Related Topics Linked List Two Pointers \n// 👍 10475 👎 494\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int listLen = 0;\n        ListNode temp = head;\n        \n        if (head == null || n <= 0) {\n            return head;\n        }\n        \n        while (temp != null) {\n            listLen++;\n            temp = temp.next;\n        }\n        \n        if (listLen < n) {\n            return head;\n        }\n        if (listLen == n) {\n            ListNode result = head.next;\n            head.next = null;\n            return result;\n        }\n        \n        int subLen = listLen - n - 1;\n        temp = head;\n        for (int i = 0; i < subLen; i++) {\n            temp = temp.next;\n        }\n        \n        ListNode removeNode = temp.next;\n        temp.next = removeNode.next;\n        removeNode.next = null;\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-19","published":1,"updated":"2023-02-01T13:19:52.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyt002l3suu3kawdce2","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the head of a linked list, remove the nth node from the end of the list </span>\n<span class=\"token comment\">//and return its head. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2,3,4,5], n = 2</span>\n<span class=\"token comment\">//Output: [1,2,3,5]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1], n = 1</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2], n = 1</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the list is sz. </span>\n<span class=\"token comment\">// 1 &lt;= sz &lt;= 30 </span>\n<span class=\"token comment\">// 0 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= sz </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you do this in one pass? </span>\n<span class=\"token comment\">// Related Topics Linked List Two Pointers </span>\n<span class=\"token comment\">// 👍 10475 👎 494</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> listLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            listLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> listLen <span class=\"token operator\">-</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> subLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token class-name\">ListNode</span> removeNode <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> removeNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        removeNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the head of a linked list, remove the nth node from the end of the list </span>\n<span class=\"token comment\">//and return its head. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2,3,4,5], n = 2</span>\n<span class=\"token comment\">//Output: [1,2,3,5]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1], n = 1</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: head = [1,2], n = 1</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the list is sz. </span>\n<span class=\"token comment\">// 1 &lt;= sz &lt;= 30 </span>\n<span class=\"token comment\">// 0 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= sz </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you do this in one pass? </span>\n<span class=\"token comment\">// Related Topics Linked List Two Pointers </span>\n<span class=\"token comment\">// 👍 10475 👎 494</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> listLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            listLen<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listLen <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> result <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> listLen <span class=\"token operator\">-</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> subLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token class-name\">ListNode</span> removeNode <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> removeNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        removeNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-21","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-20T03:24:09.000Z","_content":"\n```java\n//You are given the heads of two sorted linked lists list1 and list2.\n//\n// Merge the two lists in a one sorted list. The list should be made by splicing\n// together the nodes of the first two lists.\n//\n// Return the head of the merged linked list.\n//\n//\n// Example 1:\n//\n//\n//Input: list1 = [1,2,4], list2 = [1,3,4]\n//Output: [1,1,2,3,4,4]\n//\n//\n// Example 2:\n//\n//\n//Input: list1 = [], list2 = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: list1 = [], list2 = [0]\n//Output: [0]\n//\n//\n//\n// Constraints:\n//\n//\n// The number of nodes in both lists is in the range [0, 50].\n// -100 <= Node.val <= 100\n// Both list1 and list2 are sorted in non-decreasing order.\n//\n// Related Topics Linked List Recursion\n// 👍 12767 👎 1163\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode head, cur, temp1, temp2;\n\n        if (list1 == null) {\n            return list2;\n        }\n        if (list2 == null) {\n            return list1;\n        }\n        temp1 = list1;\n        temp2 = list2;\n\n        if (temp1.val < temp2.val) {\n            head = temp1;\n            cur = temp1;\n            temp1 = temp1.next;\n        } else {\n            head = temp2;\n            cur = temp2;\n            temp2 = temp2.next;\n        }\n\n        while (temp1 != null || temp2 != null) {\n            if (temp1 != null && (temp2 == null || temp1.val < temp2.val)) {\n                cur.next = temp1;\n                cur = temp1;\n                temp1 = temp1.next;\n            } else {\n                cur.next = temp2;\n                cur = temp2;\n                temp2 = temp2.next;\n            }\n        }\n\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-21.md","raw":"---\ntitle: lc-21\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-20 11:24:09\n---\n\n```java\n//You are given the heads of two sorted linked lists list1 and list2.\n//\n// Merge the two lists in a one sorted list. The list should be made by splicing\n// together the nodes of the first two lists.\n//\n// Return the head of the merged linked list.\n//\n//\n// Example 1:\n//\n//\n//Input: list1 = [1,2,4], list2 = [1,3,4]\n//Output: [1,1,2,3,4,4]\n//\n//\n// Example 2:\n//\n//\n//Input: list1 = [], list2 = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: list1 = [], list2 = [0]\n//Output: [0]\n//\n//\n//\n// Constraints:\n//\n//\n// The number of nodes in both lists is in the range [0, 50].\n// -100 <= Node.val <= 100\n// Both list1 and list2 are sorted in non-decreasing order.\n//\n// Related Topics Linked List Recursion\n// 👍 12767 👎 1163\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode head, cur, temp1, temp2;\n\n        if (list1 == null) {\n            return list2;\n        }\n        if (list2 == null) {\n            return list1;\n        }\n        temp1 = list1;\n        temp2 = list2;\n\n        if (temp1.val < temp2.val) {\n            head = temp1;\n            cur = temp1;\n            temp1 = temp1.next;\n        } else {\n            head = temp2;\n            cur = temp2;\n            temp2 = temp2.next;\n        }\n\n        while (temp1 != null || temp2 != null) {\n            if (temp1 != null && (temp2 == null || temp1.val < temp2.val)) {\n                cur.next = temp1;\n                cur = temp1;\n                temp1 = temp1.next;\n            } else {\n                cur.next = temp2;\n                cur = temp2;\n                temp2 = temp2.next;\n            }\n        }\n\n        return head;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-21","published":1,"updated":"2023-02-01T13:19:58.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyu002o3suuexwa1qib","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given the heads of two sorted linked lists list1 and list2.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge the two lists in a one sorted list. The list should be made by splicing</span>\n<span class=\"token comment\">// together the nodes of the first two lists.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the head of the merged linked list.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [1,2,4], list2 = [1,3,4]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = [0]</span>\n<span class=\"token comment\">//Output: [0]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The number of nodes in both lists is in the range [0, 50].</span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100</span>\n<span class=\"token comment\">// Both list1 and list2 are sorted in non-decreasing order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Recursion</span>\n<span class=\"token comment\">// 👍 12767 👎 1163</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> temp1<span class=\"token punctuation\">,</span> temp2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        temp1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        temp2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given the heads of two sorted linked lists list1 and list2.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge the two lists in a one sorted list. The list should be made by splicing</span>\n<span class=\"token comment\">// together the nodes of the first two lists.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the head of the merged linked list.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [1,2,4], list2 = [1,3,4]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: list1 = [], list2 = [0]</span>\n<span class=\"token comment\">//Output: [0]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The number of nodes in both lists is in the range [0, 50].</span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100</span>\n<span class=\"token comment\">// Both list1 and list2 are sorted in non-decreasing order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Recursion</span>\n<span class=\"token comment\">// 👍 12767 👎 1163</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> list1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> temp1<span class=\"token punctuation\">,</span> temp2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        temp1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">;</span>\n        temp2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n            temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n            temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temp1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> temp2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n                temp1 <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                cur <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span>\n                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-217","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-17T03:35:31.000Z","_content":"\n```java\n/**\nGiven an integer array nums, return true if any value appears at least twice in \nthe array, and return false if every element is distinct. \n\n \n Example 1: \n Input: nums = [1,2,3,1]\nOutput: true\n Example 2: \n Input: nums = [1,2,3,4]\nOutput: false\n Example 3: \n Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n \n \n Constraints: \n\n \n 1 <= nums.length <= 10⁵ \n -10⁹ <= nums[i] <= 10⁹ \n \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 850, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean containsDuplicate(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return false;\n        }\n        Set<Integer> numSet = new HashSet<>();\n\n        for (int num : nums) {\n            if (numSet.contains(num)) {\n                return true;\n            }\n            numSet.add(num);\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-217.md","raw":"---\ntitle: lc-217\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-17 11:35:31\n---\n\n```java\n/**\nGiven an integer array nums, return true if any value appears at least twice in \nthe array, and return false if every element is distinct. \n\n \n Example 1: \n Input: nums = [1,2,3,1]\nOutput: true\n Example 2: \n Input: nums = [1,2,3,4]\nOutput: false\n Example 3: \n Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n \n \n Constraints: \n\n \n 1 <= nums.length <= 10⁵ \n -10⁹ <= nums[i] <= 10⁹ \n \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 850, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean containsDuplicate(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return false;\n        }\n        Set<Integer> numSet = new HashSet<>();\n\n        for (int num : nums) {\n            if (numSet.contains(num)) {\n                return true;\n            }\n            numSet.add(num);\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-217","published":1,"updated":"2022-11-17T11:48:37.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyv002r3suua3mo0ubb","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, return true if any value appears at least twice in \nthe array, and return false if every element is distinct. \n\n \n Example 1: \n Input: nums = [1,2,3,1]\nOutput: true\n Example 2: \n Input: nums = [1,2,3,4]\nOutput: false\n Example 3: \n Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 10⁵ \n -10⁹ &lt;= nums[i] &lt;= 10⁹ \n \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 850, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> numSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            numSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, return true if any value appears at least twice in \nthe array, and return false if every element is distinct. \n\n \n Example 1: \n Input: nums = [1,2,3,1]\nOutput: true\n Example 2: \n Input: nums = [1,2,3,4]\nOutput: false\n Example 3: \n Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 10⁵ \n -10⁹ &lt;= nums[i] &lt;= 10⁹ \n \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 850, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            numSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-221","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-20T03:08:25.000Z","_content":"\n```java\n/**\nGiven an m x n binary matrix filled with 0's and 1's, find the largest square\ncontaining only 1's and return its area.\n\n\n Example 1:\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\n\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n\n\n Example 2:\n\n\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n\n\n Example 3:\n\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\n\n\n Constraints:\n\n\n m == matrix.length\n n == matrix[i].length\n 1 <= m, n <= 300\n matrix[i][j] is '0' or '1'.\n\n Related Topics数组 | 动态规划 | 矩阵\n\n 👍 1270, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maximalSquare(char[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return 0;\n        }\n        int[][] dp = new int[matrix.length + 1][matrix[0].length + 1];\n\n        int result = 0;\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                if (matrix[i][j] == '0') {\n                    dp[i + 1][j + 1] = 0;\n                } else {\n                    dp[i + 1][j + 1] = Math.min(dp[i][j], Math.min(dp[i][j + 1], dp[i + 1][j])) + 1;\n                    if (dp[i + 1][j + 1] > result) {\n                        result = dp[i + 1][j + 1];\n                    }\n                }\n            }\n        }\n\n        return result * result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-221.md","raw":"---\ntitle: lc-221\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-20 11:08:25\n---\n\n```java\n/**\nGiven an m x n binary matrix filled with 0's and 1's, find the largest square\ncontaining only 1's and return its area.\n\n\n Example 1:\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\n\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n\n\n Example 2:\n\n\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n\n\n Example 3:\n\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\n\n\n Constraints:\n\n\n m == matrix.length\n n == matrix[i].length\n 1 <= m, n <= 300\n matrix[i][j] is '0' or '1'.\n\n Related Topics数组 | 动态规划 | 矩阵\n\n 👍 1270, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maximalSquare(char[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return 0;\n        }\n        int[][] dp = new int[matrix.length + 1][matrix[0].length + 1];\n\n        int result = 0;\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                if (matrix[i][j] == '0') {\n                    dp[i + 1][j + 1] = 0;\n                } else {\n                    dp[i + 1][j + 1] = Math.min(dp[i][j], Math.min(dp[i][j + 1], dp[i + 1][j])) + 1;\n                    if (dp[i + 1][j + 1] > result) {\n                        result = dp[i + 1][j + 1];\n                    }\n                }\n            }\n        }\n\n        return result * result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-221","published":1,"updated":"2022-09-20T12:14:40.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbyw002u3suu09n6f2fo","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an m x n binary matrix filled with 0's and 1's, find the largest square\ncontaining only 1's and return its area.\n\n\n Example 1:\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\n\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n\n\n Example 2:\n\n\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n\n\n Example 3:\n\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\n\n\n Constraints:\n\n\n m == matrix.length\n n == matrix[i].length\n 1 &lt;= m, n &lt;= 300\n matrix[i][j] is '0' or '1'.\n\n Related Topics数组 | 动态规划 | 矩阵\n\n 👍 1270, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maximalSquare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        result <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an m x n binary matrix filled with 0's and 1's, find the largest square\ncontaining only 1's and return its area.\n\n\n Example 1:\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\n\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n\n\n Example 2:\n\n\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n\n\n Example 3:\n\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\n\n\n Constraints:\n\n\n m == matrix.length\n n == matrix[i].length\n 1 &lt;= m, n &lt;= 300\n matrix[i][j] is '0' or '1'.\n\n Related Topics数组 | 动态规划 | 矩阵\n\n 👍 1270, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maximalSquare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        result <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result <span class=\"token operator\">*</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-20","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-18T02:46:14.000Z","_content":"\n```java\n//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']\n//', determine if the input string is valid. \n//\n// An input string is valid if: \n//\n// \n// Open brackets must be closed by the same type of brackets. \n// Open brackets must be closed in the correct order. \n// \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"()\"\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"()[]{}\"\n//Output: true\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"(]\"\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= s.length <= 104 \n// s consists of parentheses only '()[]{}'. \n// \n// Related Topics String Stack \n// 👍 13610 👎 616\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> myStack = new Stack<>();\n        for (char ch : s.toCharArray()) {\n            if (ch == '(' || ch == '[' || ch == '{') {\n                myStack.push(ch);\n            } else {\n                if (myStack.isEmpty()) {\n                    return false;\n                }\n                char top = myStack.peek();\n\n                if ((top == '(' && ch == ')') ||\n                        (top == '[' && ch == ']') ||\n                        (top == '{' && ch == '}')) {\n                    myStack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return myStack.isEmpty();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-20.md","raw":"---\ntitle: lc-20\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-18 10:46:14\n---\n\n```java\n//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']\n//', determine if the input string is valid. \n//\n// An input string is valid if: \n//\n// \n// Open brackets must be closed by the same type of brackets. \n// Open brackets must be closed in the correct order. \n// \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"()\"\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"()[]{}\"\n//Output: true\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"(]\"\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= s.length <= 104 \n// s consists of parentheses only '()[]{}'. \n// \n// Related Topics String Stack \n// 👍 13610 👎 616\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> myStack = new Stack<>();\n        for (char ch : s.toCharArray()) {\n            if (ch == '(' || ch == '[' || ch == '{') {\n                myStack.push(ch);\n            } else {\n                if (myStack.isEmpty()) {\n                    return false;\n                }\n                char top = myStack.peek();\n\n                if ((top == '(' && ch == ')') ||\n                        (top == '[' && ch == ']') ||\n                        (top == '{' && ch == '}')) {\n                    myStack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return myStack.isEmpty();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-20","published":1,"updated":"2023-02-01T13:19:55.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbz1002x3suu54e1geli","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']</span>\n<span class=\"token comment\">//', determine if the input string is valid. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An input string is valid if: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Open brackets must be closed by the same type of brackets. </span>\n<span class=\"token comment\">// Open brackets must be closed in the correct order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()[]{}\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"(]\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= s.length &lt;= 104 </span>\n<span class=\"token comment\">// s consists of parentheses only '()[]{}'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Stack </span>\n<span class=\"token comment\">// 👍 13610 👎 616</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">&gt;</span></span> myStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'{'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                myStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">char</span> top <span class=\"token operator\">=</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'{'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    myStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a string s containing just the characters '(', ')', '&#123;', '&#125;', '[' and ']</span>\n<span class=\"token comment\">//', determine if the input string is valid. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An input string is valid if: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Open brackets must be closed by the same type of brackets. </span>\n<span class=\"token comment\">// Open brackets must be closed in the correct order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"()[]&#123;&#125;\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"(]\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= s.length &lt;= 104 </span>\n<span class=\"token comment\">// s consists of parentheses only '()[]&#123;&#125;'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Stack </span>\n<span class=\"token comment\">// 👍 13610 👎 616</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> myStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'&#123;'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                myStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">char</span> top <span class=\"token operator\">=</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'['</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                        <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token char\">'&#123;'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    myStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> myStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-226","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-21T02:58:47.000Z","_content":"\n```java\n/**\nGiven the root of a binary tree, invert the tree, and return its root. \n\n \n Example 1: \n\n \nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n \n\n Example 2: \n\n \nInput: root = [2,1,3]\nOutput: [2,3,1]\n \n\n Example 3: \n\n \nInput: root = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 100]. \n -100 <= Node.val <= 100 \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1408, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null || (root.left == null && root.right == null)) {\n            return root;\n        }\n\n        TreeNode left = invertTree(root.left);\n        TreeNode right = invertTree(root.right);\n\n        root.left = right;\n        root.right = left;\n\n        return root;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-226.md","raw":"---\ntitle: lc-226\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-21 10:58:47\n---\n\n```java\n/**\nGiven the root of a binary tree, invert the tree, and return its root. \n\n \n Example 1: \n\n \nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n \n\n Example 2: \n\n \nInput: root = [2,1,3]\nOutput: [2,3,1]\n \n\n Example 3: \n\n \nInput: root = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 100]. \n -100 <= Node.val <= 100 \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1408, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null || (root.left == null && root.right == null)) {\n            return root;\n        }\n\n        TreeNode left = invertTree(root.left);\n        TreeNode right = invertTree(root.right);\n\n        root.left = right;\n        root.right = left;\n\n        return root;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-226","published":1,"updated":"2022-09-21T06:04:22.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbz300303suu30w74e3h","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a binary tree, invert the tree, and return its root. \n\n \n Example 1: \n\n \nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n \n\n Example 2: \n\n \nInput: root = [2,1,3]\nOutput: [2,3,1]\n \n\n Example 3: \n\n \nInput: root = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 100]. \n -100 &lt;= Node.val &lt;= 100 \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1408, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> right <span class=\"token operator\">=</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a binary tree, invert the tree, and return its root. \n\n \n Example 1: \n\n \nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n \n\n Example 2: \n\n \nInput: root = [2,1,3]\nOutput: [2,3,1]\n \n\n Example 3: \n\n \nInput: root = []\nOutput: []\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 100]. \n -100 &lt;= Node.val &lt;= 100 \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1408, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> right <span class=\"token operator\">=</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-234","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-22T03:44:11.000Z","_content":"\n```java\n/**\nGiven the head of a singly linked list, return true if it is a palindrome or \nfalse otherwise. \n\n \n Example 1: \n\n \nInput: head = [1,2,2,1]\nOutput: true\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: false\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [1, 10⁵]. \n 0 <= Node.val <= 9 \n \n\n \nFollow up: Could you do it in O(n) time and O(1) space? Related Topics栈 | 递归 | 链\n表 | 双指针 \n\n 👍 1514, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        if (head == null || head.next == null) {\n            return true;\n        }\n\n        int len = 0;\n        ListNode tmp = head;\n\n        while(tmp != null) {\n            len++;\n            tmp = tmp.next;\n        }\n\n        int[] halfArr = new int[len / 2];\n\n        int index = 0;\n        tmp = head;\n\n        while (index < len / 2) {\n            halfArr[index] = tmp.val;\n            index++;\n            tmp = tmp.next;\n        }\n\n        if (len % 2 == 1) {\n            index++;\n            tmp = tmp.next;\n        }\n\n        index = 0;\n        while (index < len / 2) {\n            if (halfArr[len / 2 - 1 - index] != tmp.val) {\n                return false;\n            }\n            tmp = tmp.next;\n            index++;\n        }\n\n        return true;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-234.md","raw":"---\ntitle: lc-234\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-22 11:44:11\n---\n\n```java\n/**\nGiven the head of a singly linked list, return true if it is a palindrome or \nfalse otherwise. \n\n \n Example 1: \n\n \nInput: head = [1,2,2,1]\nOutput: true\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: false\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [1, 10⁵]. \n 0 <= Node.val <= 9 \n \n\n \nFollow up: Could you do it in O(n) time and O(1) space? Related Topics栈 | 递归 | 链\n表 | 双指针 \n\n 👍 1514, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        if (head == null || head.next == null) {\n            return true;\n        }\n\n        int len = 0;\n        ListNode tmp = head;\n\n        while(tmp != null) {\n            len++;\n            tmp = tmp.next;\n        }\n\n        int[] halfArr = new int[len / 2];\n\n        int index = 0;\n        tmp = head;\n\n        while (index < len / 2) {\n            halfArr[index] = tmp.val;\n            index++;\n            tmp = tmp.next;\n        }\n\n        if (len % 2 == 1) {\n            index++;\n            tmp = tmp.next;\n        }\n\n        index = 0;\n        while (index < len / 2) {\n            if (halfArr[len / 2 - 1 - index] != tmp.val) {\n                return false;\n            }\n            tmp = tmp.next;\n            index++;\n        }\n\n        return true;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-234","published":1,"updated":"2022-09-22T13:51:19.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbz600333suub1hq651t","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a singly linked list, return true if it is a palindrome or \nfalse otherwise. \n\n \n Example 1: \n\n \nInput: head = [1,2,2,1]\nOutput: true\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: false\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [1, 10⁵]. \n 0 &lt;= Node.val &lt;= 9 \n \n\n \nFollow up: Could you do it in O(n) time and O(1) space? Related Topics栈 | 递归 | 链\n表 | 双指针 \n\n 👍 1514, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> halfArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            halfArr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>halfArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> tmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the head of a singly linked list, return true if it is a palindrome or \nfalse otherwise. \n\n \n Example 1: \n\n \nInput: head = [1,2,2,1]\nOutput: true\n \n\n Example 2: \n\n \nInput: head = [1,2]\nOutput: false\n \n\n \n Constraints: \n\n \n The number of nodes in the list is in the range [1, 10⁵]. \n 0 &lt;= Node.val &lt;= 9 \n \n\n \nFollow up: Could you do it in O(n) time and O(1) space? Related Topics栈 | 递归 | 链\n表 | 双指针 \n\n 👍 1514, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> halfArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            halfArr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>halfArr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> tmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            tmp <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-236","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-23T03:10:49.000Z","_content":"\n```java\n/**\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes \nin the tree. \n\n According to the definition of LCA on Wikipedia: “The lowest common ancestor \nis defined between two nodes p and q as the lowest node in T that has both p and \nq as descendants (where we allow a node to be a descendant of itself).” \n\n \n Example 1: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n \n\n Example 2: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of \nitself according to the LCA definition.\n \n\n Example 3: \n\n \nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [2, 10⁵]. \n -10⁹ <= Node.val <= 10⁹ \n All Node.val are unique. \n p != q \n p and q will exist in the tree. \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1971, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        List<TreeNode> pPath = new ArrayList<>();\n        List<TreeNode> qPath = new ArrayList<>();\n\n        pPath.add(root);\n        qPath.add(root);\n\n        getPath(root, p, pPath);\n        getPath(root, q, qPath);\n\n        int index = 1;\n\n        while (index < pPath.size() && index < qPath.size()) {\n            if (pPath.get(index) == qPath.get(index)) {\n                index++;\n            } else {\n                break;\n            }\n        }\n\n        return pPath.get(index - 1);\n    }\n\n    private boolean getPath(TreeNode node, TreeNode target, List<TreeNode> curPath) {\n        if (node == target) {\n            return true;\n        }\n\n        if (node.left != null) {\n            curPath.add(node.left);\n            boolean leftFound = getPath(node.left, target, curPath);\n\n            if (leftFound) {\n                return true;\n            }\n\n            curPath.remove(node.left);\n        }\n\n\n        if (node.right != null) {\n            curPath.add(node.right);\n            boolean rightFound = getPath(node.right, target, curPath);\n\n            if (rightFound) {\n                return true;\n            }\n\n            curPath.remove(node.right);\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-236.md","raw":"---\ntitle: lc-236\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-23 11:10:49\n---\n\n```java\n/**\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes \nin the tree. \n\n According to the definition of LCA on Wikipedia: “The lowest common ancestor \nis defined between two nodes p and q as the lowest node in T that has both p and \nq as descendants (where we allow a node to be a descendant of itself).” \n\n \n Example 1: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n \n\n Example 2: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of \nitself according to the LCA definition.\n \n\n Example 3: \n\n \nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [2, 10⁵]. \n -10⁹ <= Node.val <= 10⁹ \n All Node.val are unique. \n p != q \n p and q will exist in the tree. \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1971, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        List<TreeNode> pPath = new ArrayList<>();\n        List<TreeNode> qPath = new ArrayList<>();\n\n        pPath.add(root);\n        qPath.add(root);\n\n        getPath(root, p, pPath);\n        getPath(root, q, qPath);\n\n        int index = 1;\n\n        while (index < pPath.size() && index < qPath.size()) {\n            if (pPath.get(index) == qPath.get(index)) {\n                index++;\n            } else {\n                break;\n            }\n        }\n\n        return pPath.get(index - 1);\n    }\n\n    private boolean getPath(TreeNode node, TreeNode target, List<TreeNode> curPath) {\n        if (node == target) {\n            return true;\n        }\n\n        if (node.left != null) {\n            curPath.add(node.left);\n            boolean leftFound = getPath(node.left, target, curPath);\n\n            if (leftFound) {\n                return true;\n            }\n\n            curPath.remove(node.left);\n        }\n\n\n        if (node.right != null) {\n            curPath.add(node.right);\n            boolean rightFound = getPath(node.right, target, curPath);\n\n            if (rightFound) {\n                return true;\n            }\n\n            curPath.remove(node.right);\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-236","published":1,"updated":"2022-09-25T03:04:22.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbz700363suu7itq11r8","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes \nin the tree. \n\n According to the definition of LCA on Wikipedia: “The lowest common ancestor \nis defined between two nodes p and q as the lowest node in T that has both p and \nq as descendants (where we allow a node to be a descendant of itself).” \n\n \n Example 1: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n \n\n Example 2: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of \nitself according to the LCA definition.\n \n\n Example 3: \n\n \nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [2, 10⁵]. \n -10⁹ &lt;= Node.val &lt;= 10⁹ \n All Node.val are unique. \n p != q \n p and q will exist in the tree. \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1971, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> pPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> qPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        pPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> pPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> qPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> curPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> leftFound <span class=\"token operator\">=</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> rightFound <span class=\"token operator\">=</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes \nin the tree. \n\n According to the definition of LCA on Wikipedia: “The lowest common ancestor \nis defined between two nodes p and q as the lowest node in T that has both p and \nq as descendants (where we allow a node to be a descendant of itself).” \n\n \n Example 1: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n \n\n Example 2: \n\n \nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of \nitself according to the LCA definition.\n \n\n Example 3: \n\n \nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [2, 10⁵]. \n -10⁹ &lt;= Node.val &lt;= 10⁹ \n All Node.val are unique. \n p != q \n p and q will exist in the tree. \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1971, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> pPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> qPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        pPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> pPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> qPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> curPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> leftFound <span class=\"token operator\">=</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> rightFound <span class=\"token operator\">=</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> curPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            curPath<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-238","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-25T03:04:08.000Z","_content":"\n```java\n/**\nGiven an integer array nums, return an array answer such that answer[i] is \nequal to the product of all the elements of nums except nums[i]. \n\n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n\n You must write an algorithm that runs in O(n) time and without using the \ndivision operation. \n\n \n Example 1: \n Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n Example 2: \n Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n \n \n Constraints: \n\n \n 2 <= nums.length <= 10⁵ \n -30 <= nums[i] <= 30 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n\n \n Follow up: Can you solve the problem in O(1) extra space complexity? (The \noutput array does not count as extra space for space complexity analysis.) \n Related Topics数组 | 前缀和 \n\n 👍 1269, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] productExceptSelf(int[] nums) {\n        int[] lProduct = new int [nums.length];\n        int[] rProduct = new int [nums.length];\n        lProduct[0] = 1;\n        rProduct[nums.length - 1] = 1;\n\n        for (int i = 1; i < nums.length; i++) {\n            lProduct[i] = lProduct[i - 1] * nums[i - 1];\n            rProduct[nums.length - 1 - i] = rProduct[nums.length - i] * nums[nums.length - i];\n        }\n\n        int[] result = new int [nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            result[i] =  lProduct[i] * rProduct[i];\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-238.md","raw":"---\ntitle: lc-238\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-25 11:04:08\n---\n\n```java\n/**\nGiven an integer array nums, return an array answer such that answer[i] is \nequal to the product of all the elements of nums except nums[i]. \n\n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n\n You must write an algorithm that runs in O(n) time and without using the \ndivision operation. \n\n \n Example 1: \n Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n Example 2: \n Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n \n \n Constraints: \n\n \n 2 <= nums.length <= 10⁵ \n -30 <= nums[i] <= 30 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n\n \n Follow up: Can you solve the problem in O(1) extra space complexity? (The \noutput array does not count as extra space for space complexity analysis.) \n Related Topics数组 | 前缀和 \n\n 👍 1269, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] productExceptSelf(int[] nums) {\n        int[] lProduct = new int [nums.length];\n        int[] rProduct = new int [nums.length];\n        lProduct[0] = 1;\n        rProduct[nums.length - 1] = 1;\n\n        for (int i = 1; i < nums.length; i++) {\n            lProduct[i] = lProduct[i - 1] * nums[i - 1];\n            rProduct[nums.length - 1 - i] = rProduct[nums.length - i] * nums[nums.length - i];\n        }\n\n        int[] result = new int [nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            result[i] =  lProduct[i] * rProduct[i];\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-238","published":1,"updated":"2022-11-22T11:42:00.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbz900393suu0v5vbgbi","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, return an array answer such that answer[i] is \nequal to the product of all the elements of nums except nums[i]. \n\n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n\n You must write an algorithm that runs in O(n) time and without using the \ndivision operation. \n\n \n Example 1: \n Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n Example 2: \n Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n \n \n Constraints: \n\n \n 2 &lt;= nums.length &lt;= 10⁵ \n -30 &lt;= nums[i] &lt;= 30 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n\n \n Follow up: Can you solve the problem in O(1) extra space complexity? (The \noutput array does not count as extra space for space complexity analysis.) \n Related Topics数组 | 前缀和 \n\n 👍 1269, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">productExceptSelf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lProduct <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rProduct <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        lProduct<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        rProduct<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lProduct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lProduct<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            rProduct<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rProduct<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  lProduct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> rProduct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, return an array answer such that answer[i] is \nequal to the product of all the elements of nums except nums[i]. \n\n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n\n You must write an algorithm that runs in O(n) time and without using the \ndivision operation. \n\n \n Example 1: \n Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n Example 2: \n Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n \n \n Constraints: \n\n \n 2 &lt;= nums.length &lt;= 10⁵ \n -30 &lt;= nums[i] &lt;= 30 \n The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit \ninteger. \n \n\n \n Follow up: Can you solve the problem in O(1) extra space complexity? (The \noutput array does not count as extra space for space complexity analysis.) \n Related Topics数组 | 前缀和 \n\n 👍 1269, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">productExceptSelf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lProduct <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rProduct <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        lProduct<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        rProduct<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            lProduct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lProduct<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            rProduct<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rProduct<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  lProduct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> rProduct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-239","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-26T03:09:23.000Z","_content":"\n```java\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\n\n/**\nYou are given an array of integers nums, there is a sliding window of size k \nwhich is moving from the very left of the array to the very right. You can only \nsee the k numbers in the window. Each time the sliding window moves right by one \nposition. \n\n Return the max sliding window. \n\n \n Example 1: \n\n \nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n \n\n Example 2: \n\n \nInput: nums = [1], k = 1\nOutput: [1]\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 10⁵ \n -10⁴ <= nums[i] <= 10⁴ \n 1 <= k <= nums.length \n \n Related Topics队列 | 数组 | 滑动窗口 | 单调队列 | 堆（优先队列） \n\n 👍 1888, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int n = nums.length;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] pair1, int[] pair2) {\n                return pair1[0] != pair2[0] ? pair2[0] - pair1[0] : pair2[1] - pair1[1];\n            }\n        });\n        for (int i = 0; i < k; ++i) {\n            pq.offer(new int[]{nums[i], i});\n        }\n        int[] ans = new int[n - k + 1];\n        ans[0] = pq.peek()[0];\n        for (int i = k; i < n; ++i) {\n            pq.offer(new int[]{nums[i], i});\n            while (pq.peek()[1] <= i - k) {\n                pq.poll();\n            }\n            ans[i - k + 1] = pq.peek()[0];\n        }\n        return ans;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-239.md","raw":"---\ntitle: lc-239\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-26 11:09:23\n---\n\n```java\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\n\n/**\nYou are given an array of integers nums, there is a sliding window of size k \nwhich is moving from the very left of the array to the very right. You can only \nsee the k numbers in the window. Each time the sliding window moves right by one \nposition. \n\n Return the max sliding window. \n\n \n Example 1: \n\n \nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n \n\n Example 2: \n\n \nInput: nums = [1], k = 1\nOutput: [1]\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 10⁵ \n -10⁴ <= nums[i] <= 10⁴ \n 1 <= k <= nums.length \n \n Related Topics队列 | 数组 | 滑动窗口 | 单调队列 | 堆（优先队列） \n\n 👍 1888, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int n = nums.length;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] pair1, int[] pair2) {\n                return pair1[0] != pair2[0] ? pair2[0] - pair1[0] : pair2[1] - pair1[1];\n            }\n        });\n        for (int i = 0; i < k; ++i) {\n            pq.offer(new int[]{nums[i], i});\n        }\n        int[] ans = new int[n - k + 1];\n        ans[0] = pq.peek()[0];\n        for (int i = k; i < n; ++i) {\n            pq.offer(new int[]{nums[i], i});\n            while (pq.peek()[1] <= i - k) {\n                pq.poll();\n            }\n            ans[i - k + 1] = pq.peek()[0];\n        }\n        return ans;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-239","published":1,"updated":"2022-09-26T14:50:25.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbza003c3suubf61dhez","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityQueue</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\nYou are given an array of integers nums, there is a sliding window of size k \nwhich is moving from the very left of the array to the very right. You can only \nsee the k numbers in the window. Each time the sliding window moves right by one \nposition. \n\n Return the max sliding window. \n\n \n Example 1: \n\n \nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n \n\n Example 2: \n\n \nInput: nums = [1], k = 1\nOutput: [1]\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 10⁵ \n -10⁴ &lt;= nums[i] &lt;= 10⁴ \n 1 &lt;= k &lt;= nums.length \n \n Related Topics队列 | 数组 | 滑动窗口 | 单调队列 | 堆（优先队列） \n\n 👍 1888, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pair1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pair2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> pair1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pair2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> pair2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pair1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> pair2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pair1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> i <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ans<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityQueue</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\nYou are given an array of integers nums, there is a sliding window of size k \nwhich is moving from the very left of the array to the very right. You can only \nsee the k numbers in the window. Each time the sliding window moves right by one \nposition. \n\n Return the max sliding window. \n\n \n Example 1: \n\n \nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n \n\n Example 2: \n\n \nInput: nums = [1], k = 1\nOutput: [1]\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 10⁵ \n -10⁴ &lt;= nums[i] &lt;= 10⁴ \n 1 &lt;= k &lt;= nums.length \n \n Related Topics队列 | 数组 | 滑动窗口 | 单调队列 | 堆（优先队列） \n\n 👍 1888, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pair1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pair2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> pair1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pair2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> pair2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pair1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> pair2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pair1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> i <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            ans<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-22","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-21T08:30:33.000Z","_content":"\n```java\n//Given n pairs of parentheses, write a function to generate all combinations of\n// well-formed parentheses. \n//\n// \n// Example 1: \n// Input: n = 3\n//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n// Example 2: \n// Input: n = 1\n//Output: [\"()\"]\n// \n// \n// Constraints: \n//\n// \n// 1 <= n <= 8 \n// \n// Related Topics String Dynamic Programming Backtracking \n// 👍 13432 👎 511\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> generateParenthesis(int n) {\n        List<String> result = new ArrayList<>();\n        generateNext(result, n, \"\", n, n);\n        return result;\n    }\n\n    private void generateNext(List<String> result, int n, String current, int left, int right) {\n        if (current.length() == 2 * n) {\n            result.add(current);\n            return;\n        }\n        String currentBack = current;\n        if (left > 0) {\n            current = current + '(';\n            generateNext(result, n, current, left - 1, right);\n            current = currentBack;\n        }\n        if (right > left) {\n            current = current + ')';\n            generateNext(result, n, current, left, right - 1);\n            current = currentBack;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-22.md","raw":"---\ntitle: lc-22\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-21 16:30:33\n---\n\n```java\n//Given n pairs of parentheses, write a function to generate all combinations of\n// well-formed parentheses. \n//\n// \n// Example 1: \n// Input: n = 3\n//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n// Example 2: \n// Input: n = 1\n//Output: [\"()\"]\n// \n// \n// Constraints: \n//\n// \n// 1 <= n <= 8 \n// \n// Related Topics String Dynamic Programming Backtracking \n// 👍 13432 👎 511\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> generateParenthesis(int n) {\n        List<String> result = new ArrayList<>();\n        generateNext(result, n, \"\", n, n);\n        return result;\n    }\n\n    private void generateNext(List<String> result, int n, String current, int left, int right) {\n        if (current.length() == 2 * n) {\n            result.add(current);\n            return;\n        }\n        String currentBack = current;\n        if (left > 0) {\n            current = current + '(';\n            generateNext(result, n, current, left - 1, right);\n            current = currentBack;\n        }\n        if (right > left) {\n            current = current + ')';\n            generateNext(result, n, current, left, right - 1);\n            current = currentBack;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-22","published":1,"updated":"2023-02-01T13:20:01.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzf003f3suu0oyyg80t","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n pairs of parentheses, write a function to generate all combinations of</span>\n<span class=\"token comment\">// well-formed parentheses. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: n = 3</span>\n<span class=\"token comment\">//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: n = 1</span>\n<span class=\"token comment\">//Output: [\"()\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 8 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Backtracking </span>\n<span class=\"token comment\">// 👍 13432 👎 511</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">generateParenthesis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> current<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">String</span> currentBack <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&gt;</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n pairs of parentheses, write a function to generate all combinations of</span>\n<span class=\"token comment\">// well-formed parentheses. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: n = 3</span>\n<span class=\"token comment\">//Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: n = 1</span>\n<span class=\"token comment\">//Output: [\"()\"]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 8 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Backtracking </span>\n<span class=\"token comment\">// 👍 13432 👎 511</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">generateParenthesis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> current<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">String</span> currentBack <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">></span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            current <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">generateNext</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> currentBack<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-240","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-27T02:36:40.000Z","_content":"\n```java\n/**\n * Write an efficient algorithm that searches for a value target in an m x n\n * integer matrix matrix. This matrix has the following properties:\n * <p>\n * <p>\n * Integers in each row are sorted in ascending from left to right.\n * Integers in each column are sorted in ascending from top to bottom.\n * <p>\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 5\n * Output: true\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 20\n * Output: false\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= n, m <= 300\n * -10⁹ <= matrix[i][j] <= 10⁹\n * All the integers in each row are sorted in ascending order.\n * All the integers in each column are sorted in ascending order.\n * -10⁹ <= target <= 10⁹\n * <p>\n * Related Topics数组 | 二分查找 | 分治 | 矩阵\n * <p>\n * 👍 1130, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        for (int[] row : matrix) {\n            int index = search(row, target);\n            if (index >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public int search(int[] nums, int target) {\n        int low = 0, high = nums.length - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int num = nums[mid];\n            if (num == target) {\n                return mid;\n            } else if (num > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-240.md","raw":"---\ntitle: lc-240\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-27 10:36:40\n---\n\n```java\n/**\n * Write an efficient algorithm that searches for a value target in an m x n\n * integer matrix matrix. This matrix has the following properties:\n * <p>\n * <p>\n * Integers in each row are sorted in ascending from left to right.\n * Integers in each column are sorted in ascending from top to bottom.\n * <p>\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 5\n * Output: true\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 20\n * Output: false\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * m == matrix.length\n * n == matrix[i].length\n * 1 <= n, m <= 300\n * -10⁹ <= matrix[i][j] <= 10⁹\n * All the integers in each row are sorted in ascending order.\n * All the integers in each column are sorted in ascending order.\n * -10⁹ <= target <= 10⁹\n * <p>\n * Related Topics数组 | 二分查找 | 分治 | 矩阵\n * <p>\n * 👍 1130, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        for (int[] row : matrix) {\n            int index = search(row, target);\n            if (index >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public int search(int[] nums, int target) {\n        int low = 0, high = nums.length - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int num = nums[mid];\n            if (num == target) {\n                return mid;\n            } else if (num > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-240","published":1,"updated":"2022-09-27T03:43:43.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzf003i3suu9z3174do","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Write an efficient algorithm that searches for a value target in an m x n\n * integer matrix matrix. This matrix has the following properties:\n * &lt;p&gt;\n * &lt;p&gt;\n * Integers in each row are sorted in ascending from left to right.\n * Integers in each column are sorted in ascending from top to bottom.\n * &lt;p&gt;\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 5\n * Output: true\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 2:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 20\n * Output: false\n * &lt;p&gt;\n * &lt;p&gt;\n * &lt;p&gt;\n * Constraints:\n * &lt;p&gt;\n * &lt;p&gt;\n * m == matrix.length\n * n == matrix[i].length\n * 1 &lt;= n, m &lt;= 300\n * -10⁹ &lt;= matrix[i][j] &lt;= 10⁹\n * All the integers in each row are sorted in ascending order.\n * All the integers in each column are sorted in ascending order.\n * -10⁹ &lt;= target &lt;= 10⁹\n * &lt;p&gt;\n * Related Topics数组 | 二分查找 | 分治 | 矩阵\n * &lt;p&gt;\n * 👍 1130, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">searchMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> row <span class=\"token operator\">:</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> low<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Write an efficient algorithm that searches for a value target in an m x n\n * integer matrix matrix. This matrix has the following properties:\n * &lt;p>\n * &lt;p>\n * Integers in each row are sorted in ascending from left to right.\n * Integers in each column are sorted in ascending from top to bottom.\n * &lt;p>\n * &lt;p>\n * &lt;p>\n * Example 1:\n * &lt;p>\n * &lt;p>\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 5\n * Output: true\n * &lt;p>\n * &lt;p>\n * Example 2:\n * &lt;p>\n * &lt;p>\n * Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,\n * 21,23,26,30]], target = 20\n * Output: false\n * &lt;p>\n * &lt;p>\n * &lt;p>\n * Constraints:\n * &lt;p>\n * &lt;p>\n * m == matrix.length\n * n == matrix[i].length\n * 1 &lt;= n, m &lt;= 300\n * -10⁹ &lt;= matrix[i][j] &lt;= 10⁹\n * All the integers in each row are sorted in ascending order.\n * All the integers in each column are sorted in ascending order.\n * -10⁹ &lt;= target &lt;= 10⁹\n * &lt;p>\n * Related Topics数组 | 二分查找 | 分治 | 矩阵\n * &lt;p>\n * 👍 1130, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">searchMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> row <span class=\"token operator\">:</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> low<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-279","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-28T03:37:10.000Z","_content":"\n```java\n/**\nGiven an integer n, return the least number of perfect square numbers that sum \nto n. \n\n A perfect square is an integer that is the square of an integer; in other \nwords, it is the product of some integer with itself. For example, 1, 4, 9, and 16 \nare perfect squares while 3 and 11 are not. \n\n \n Example 1: \n\n \nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n \n\n Example 2: \n\n \nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n \n\n \n Constraints: \n\n \n 1 <= n <= 10⁴ \n \n Related Topics广度优先搜索 | 数学 | 动态规划 \n\n 👍 1504, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numSquares(int n) {\n        int[] dp = new int[n + 1];\n\n        dp[1] = 1;\n\n        List<Integer> squareList = new ArrayList<>();\n\n        int i = 1;\n\n        while (i * i < 10000) {\n            squareList.add(i * i);\n            i++;\n        }\n\n        for (i = 2; i <= n; i++) {\n            int min = 10000;\n\n            for (int j = 0; j < squareList.size(); j++) {\n                if (i - squareList.get(j) < 0) {\n                    break;\n                }\n\n                if (dp[i - squareList.get(j)] + 1 < min) {\n                    min = dp[i - squareList.get(j)] + 1;\n                }\n            }\n\n            dp[i] = min;\n        }\n\n        return dp[n];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-279.md","raw":"---\ntitle: lc-279\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-28 11:37:10\n---\n\n```java\n/**\nGiven an integer n, return the least number of perfect square numbers that sum \nto n. \n\n A perfect square is an integer that is the square of an integer; in other \nwords, it is the product of some integer with itself. For example, 1, 4, 9, and 16 \nare perfect squares while 3 and 11 are not. \n\n \n Example 1: \n\n \nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n \n\n Example 2: \n\n \nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n \n\n \n Constraints: \n\n \n 1 <= n <= 10⁴ \n \n Related Topics广度优先搜索 | 数学 | 动态规划 \n\n 👍 1504, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numSquares(int n) {\n        int[] dp = new int[n + 1];\n\n        dp[1] = 1;\n\n        List<Integer> squareList = new ArrayList<>();\n\n        int i = 1;\n\n        while (i * i < 10000) {\n            squareList.add(i * i);\n            i++;\n        }\n\n        for (i = 2; i <= n; i++) {\n            int min = 10000;\n\n            for (int j = 0; j < squareList.size(); j++) {\n                if (i - squareList.get(j) < 0) {\n                    break;\n                }\n\n                if (dp[i - squareList.get(j)] + 1 < min) {\n                    min = dp[i - squareList.get(j)] + 1;\n                }\n            }\n\n            dp[i] = min;\n        }\n\n        return dp[n];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-279","published":1,"updated":"2022-09-28T14:01:08.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzg003l3suudblq8s6d","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer n, return the least number of perfect square numbers that sum \nto n. \n\n A perfect square is an integer that is the square of an integer; in other \nwords, it is the product of some integer with itself. For example, 1, 4, 9, and 16 \nare perfect squares while 3 and 11 are not. \n\n \n Example 1: \n\n \nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n \n\n Example 2: \n\n \nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n \n\n \n Constraints: \n\n \n 1 &lt;= n &lt;= 10⁴ \n \n Related Topics广度优先搜索 | 数学 | 动态规划 \n\n 👍 1504, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSquares</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> squareList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            squareList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    min <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer n, return the least number of perfect square numbers that sum \nto n. \n\n A perfect square is an integer that is the square of an integer; in other \nwords, it is the product of some integer with itself. For example, 1, 4, 9, and 16 \nare perfect squares while 3 and 11 are not. \n\n \n Example 1: \n\n \nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n \n\n Example 2: \n\n \nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n \n\n \n Constraints: \n\n \n 1 &lt;= n &lt;= 10⁴ \n \n Related Topics广度优先搜索 | 数学 | 动态规划 \n\n 👍 1504, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSquares</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> squareList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            squareList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    min <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> squareList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-28","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-27T05:50:03.000Z","_content":"\n```java\n//Implement strStr(). \n//\n// Given two strings needle and haystack, return the index of the first occurren\n//ce of needle in haystack, or -1 if needle is not part of haystack. \n//\n// Clarification: \n//\n// What should we return when needle is an empty string? This is a great questio\n//n to ask during an interview. \n//\n// For the purpose of this problem, we will return 0 when needle is an empty str\n//ing. This is consistent to C's strstr() and Java's indexOf(). \n//\n// \n// Example 1: \n//\n// \n//Input: haystack = \"hello\", needle = \"ll\"\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: haystack = \"aaaaa\", needle = \"bba\"\n//Output: -1\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= haystack.length, needle.length <= 104 \n// haystack and needle consist of only lowercase English characters. \n// \n// Related Topics Two Pointers String String Matching \n// 👍 4350 👎 3748\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        int lh = haystack.length();\n        int ln = needle.length();\n\n        if (lh < ln) {\n            return -1;\n        }\n\n\n        if (ln == 0) {\n            return 0;\n        }\n\n        if (ln == lh) {\n            if (haystack.equals(needle)) {\n                return 0;\n            } else {\n                return -1;\n            }\n        }\n\n        for (int i = 0; i <= lh - ln; i++) {\n            String subStr = haystack.substring(i, i + ln);\n            if (subStr.equals(needle)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-28.md","raw":"---\ntitle: lc-28\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-27 13:50:03\n---\n\n```java\n//Implement strStr(). \n//\n// Given two strings needle and haystack, return the index of the first occurren\n//ce of needle in haystack, or -1 if needle is not part of haystack. \n//\n// Clarification: \n//\n// What should we return when needle is an empty string? This is a great questio\n//n to ask during an interview. \n//\n// For the purpose of this problem, we will return 0 when needle is an empty str\n//ing. This is consistent to C's strstr() and Java's indexOf(). \n//\n// \n// Example 1: \n//\n// \n//Input: haystack = \"hello\", needle = \"ll\"\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: haystack = \"aaaaa\", needle = \"bba\"\n//Output: -1\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= haystack.length, needle.length <= 104 \n// haystack and needle consist of only lowercase English characters. \n// \n// Related Topics Two Pointers String String Matching \n// 👍 4350 👎 3748\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        int lh = haystack.length();\n        int ln = needle.length();\n\n        if (lh < ln) {\n            return -1;\n        }\n\n\n        if (ln == 0) {\n            return 0;\n        }\n\n        if (ln == lh) {\n            if (haystack.equals(needle)) {\n                return 0;\n            } else {\n                return -1;\n            }\n        }\n\n        for (int i = 0; i <= lh - ln; i++) {\n            String subStr = haystack.substring(i, i + ln);\n            if (subStr.equals(needle)) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-28","published":1,"updated":"2023-02-01T13:20:25.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzh003o3suu3q7p2386","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement strStr(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given two strings needle and haystack, return the index of the first occurren</span>\n<span class=\"token comment\">//ce of needle in haystack, or -1 if needle is not part of haystack. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Clarification: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// What should we return when needle is an empty string? This is a great questio</span>\n<span class=\"token comment\">//n to ask during an interview. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For the purpose of this problem, we will return 0 when needle is an empty str</span>\n<span class=\"token comment\">//ing. This is consistent to C's strstr() and Java's indexOf(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"hello\", needle = \"ll\"</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"aaaaa\", needle = \"bba\"</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= haystack.length, needle.length &lt;= 104 </span>\n<span class=\"token comment\">// haystack and needle consist of only lowercase English characters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Two Pointers String String Matching </span>\n<span class=\"token comment\">// 👍 4350 👎 3748</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> lh <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ln <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lh <span class=\"token operator\">&lt;</span> ln<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> lh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> lh <span class=\"token operator\">-</span> ln<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> subStr <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subStr<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement strStr(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given two strings needle and haystack, return the index of the first occurren</span>\n<span class=\"token comment\">//ce of needle in haystack, or -1 if needle is not part of haystack. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Clarification: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// What should we return when needle is an empty string? This is a great questio</span>\n<span class=\"token comment\">//n to ask during an interview. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For the purpose of this problem, we will return 0 when needle is an empty str</span>\n<span class=\"token comment\">//ing. This is consistent to C's strstr() and Java's indexOf(). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"hello\", needle = \"ll\"</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: haystack = \"aaaaa\", needle = \"bba\"</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= haystack.length, needle.length &lt;= 104 </span>\n<span class=\"token comment\">// haystack and needle consist of only lowercase English characters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Two Pointers String String Matching </span>\n<span class=\"token comment\">// 👍 4350 👎 3748</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> lh <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ln <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lh <span class=\"token operator\">&lt;</span> ln<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ln <span class=\"token operator\">==</span> lh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> lh <span class=\"token operator\">-</span> ln<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> subStr <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> ln<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subStr<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-283","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-07T06:10:00.000Z","_content":"\n```java\n/**\nGiven an integer array nums, move all 0's to the end of it while maintaining \nthe relative order of the non-zero elements. \n\n Note that you must do this in-place without making a copy of the array. \n\n \n Example 1: \n Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n Example 2: \n Input: nums = [0]\nOutput: [0]\n \n \n Constraints: \n\n \n 1 <= nums.length <= 10⁴ \n -2³¹ <= nums[i] <= 2³¹ - 1 \n \n\n \nFollow up: Could you minimize the total number of operations done? Related \nTopics数组 | 双指针 \n\n 👍 1755, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int slow = 0, fast = 0;\n\n        if (nums == null || nums.length == 0) {\n            return;\n        }\n        while (fast < nums.length) {\n            if (nums[fast] == 0) {\n                fast++;\n            } else {\n                nums[slow++] = nums[fast++];\n            }\n        }\n        while (slow < nums.length) {\n            nums[slow++] = 0;\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-283.md","raw":"---\ntitle: lc-283\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-07 14:10:00\n---\n\n```java\n/**\nGiven an integer array nums, move all 0's to the end of it while maintaining \nthe relative order of the non-zero elements. \n\n Note that you must do this in-place without making a copy of the array. \n\n \n Example 1: \n Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n Example 2: \n Input: nums = [0]\nOutput: [0]\n \n \n Constraints: \n\n \n 1 <= nums.length <= 10⁴ \n -2³¹ <= nums[i] <= 2³¹ - 1 \n \n\n \nFollow up: Could you minimize the total number of operations done? Related \nTopics数组 | 双指针 \n\n 👍 1755, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int slow = 0, fast = 0;\n\n        if (nums == null || nums.length == 0) {\n            return;\n        }\n        while (fast < nums.length) {\n            if (nums[fast] == 0) {\n                fast++;\n            } else {\n                nums[slow++] = nums[fast++];\n            }\n        }\n        while (slow < nums.length) {\n            nums[slow++] = 0;\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-283","published":1,"updated":"2022-11-22T11:42:16.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzi003r3suubjtsg6yy","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, move all 0's to the end of it while maintaining \nthe relative order of the non-zero elements. \n\n Note that you must do this in-place without making a copy of the array. \n\n \n Example 1: \n Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n Example 2: \n Input: nums = [0]\nOutput: [0]\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 10⁴ \n -2³¹ &lt;= nums[i] &lt;= 2³¹ - 1 \n \n\n \nFollow up: Could you minimize the total number of operations done? Related \nTopics数组 | 双指针 \n\n 👍 1755, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                fast<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>slow<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>slow<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, move all 0's to the end of it while maintaining \nthe relative order of the non-zero elements. \n\n Note that you must do this in-place without making a copy of the array. \n\n \n Example 1: \n Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n Example 2: \n Input: nums = [0]\nOutput: [0]\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 10⁴ \n -2³¹ &lt;= nums[i] &lt;= 2³¹ - 1 \n \n\n \nFollow up: Could you minimize the total number of operations done? Related \nTopics数组 | 双指针 \n\n 👍 1755, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                fast<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                nums<span class=\"token punctuation\">[</span>slow<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>slow<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-215","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-19T03:12:55.000Z","_content":"\n```java\n/**\nGiven an integer array nums and an integer k, return the kᵗʰ largest element in \nthe array. \n\n Note that it is the kᵗʰ largest element in the sorted order, not the kᵗʰ \ndistinct element. \n\n You must solve it in O(n) time complexity. \n\n \n Example 1: \n Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n Example 2: \n Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n \n \n Constraints: \n\n \n 1 <= k <= nums.length <= 10⁵ \n -10⁴ <= nums[i] <= 10⁴ \n \n Related Topics数组 | 分治 | 快速选择 | 排序 | 堆（优先队列） \n\n 👍 1876, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findKthLargest(int[] nums, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n        for (int num : nums) {\n            pq.add(num);\n\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n\n        return pq.poll();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-215.md","raw":"---\ntitle: lc-215\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-19 11:12:55\n---\n\n```java\n/**\nGiven an integer array nums and an integer k, return the kᵗʰ largest element in \nthe array. \n\n Note that it is the kᵗʰ largest element in the sorted order, not the kᵗʰ \ndistinct element. \n\n You must solve it in O(n) time complexity. \n\n \n Example 1: \n Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n Example 2: \n Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n \n \n Constraints: \n\n \n 1 <= k <= nums.length <= 10⁵ \n -10⁴ <= nums[i] <= 10⁴ \n \n Related Topics数组 | 分治 | 快速选择 | 排序 | 堆（优先队列） \n\n 👍 1876, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findKthLargest(int[] nums, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n        for (int num : nums) {\n            pq.add(num);\n\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n\n        return pq.poll();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-215","published":1,"updated":"2022-09-19T06:49:17.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzi003u3suud3qsb4br","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums and an integer k, return the kᵗʰ largest element in \nthe array. \n\n Note that it is the kᵗʰ largest element in the sorted order, not the kᵗʰ \ndistinct element. \n\n You must solve it in O(n) time complexity. \n\n \n Example 1: \n Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n Example 2: \n Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n \n \n Constraints: \n\n \n 1 &lt;= k &lt;= nums.length &lt;= 10⁵ \n -10⁴ &lt;= nums[i] &lt;= 10⁴ \n \n Related Topics数组 | 分治 | 快速选择 | 排序 | 堆（优先队列） \n\n 👍 1876, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums and an integer k, return the kᵗʰ largest element in \nthe array. \n\n Note that it is the kᵗʰ largest element in the sorted order, not the kᵗʰ \ndistinct element. \n\n You must solve it in O(n) time complexity. \n\n \n Example 1: \n Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n Example 2: \n Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n \n \n Constraints: \n\n \n 1 &lt;= k &lt;= nums.length &lt;= 10⁵ \n -10⁴ &lt;= nums[i] &lt;= 10⁴ \n \n Related Topics数组 | 分治 | 快速选择 | 排序 | 堆（优先队列） \n\n 👍 1876, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-287","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-09-29T02:41:27.000Z","_content":"\n```java\n/**\nGiven an array of integers nums containing n + 1 integers where each integer is \nin the range [1, n] inclusive. \n\n There is only one repeated number in nums, return this repeated number. \n\n You must solve the problem without modifying the array nums and uses only \nconstant extra space. \n\n \n Example 1: \n\n \nInput: nums = [1,3,4,2,2]\nOutput: 2\n \n\n Example 2: \n\n \nInput: nums = [3,1,3,4,2]\nOutput: 3\n \n\n \n Constraints: \n\n \n 1 <= n <= 10⁵ \n nums.length == n + 1 \n 1 <= nums[i] <= n \n All the integers in nums appear only once except for precisely one integer \nwhich appears two or more times. \n \n\n \n Follow up: \n\n \n How can we prove that at least one duplicate number must exist in nums? \n Can you solve the problem in linear runtime complexity? \n \n Related Topics位运算 | 数组 | 双指针 | 二分查找 \n\n 👍 1905, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findDuplicate(int[] nums) {\n        int n = nums.length;\n        int l = 1, r = n - 1, ans = -1;\n        while (l <= r) {\n            int mid = (l + r) >> 1;\n            int cnt = 0;\n            for (int i = 0; i < n; ++i) {\n                if (nums[i] <= mid) {\n                    cnt++;\n                }\n            }\n            if (cnt <= mid) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n                ans = mid;\n            }\n        }\n        return ans;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-287.md","raw":"---\ntitle: lc-287\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-09-29 10:41:27\n---\n\n```java\n/**\nGiven an array of integers nums containing n + 1 integers where each integer is \nin the range [1, n] inclusive. \n\n There is only one repeated number in nums, return this repeated number. \n\n You must solve the problem without modifying the array nums and uses only \nconstant extra space. \n\n \n Example 1: \n\n \nInput: nums = [1,3,4,2,2]\nOutput: 2\n \n\n Example 2: \n\n \nInput: nums = [3,1,3,4,2]\nOutput: 3\n \n\n \n Constraints: \n\n \n 1 <= n <= 10⁵ \n nums.length == n + 1 \n 1 <= nums[i] <= n \n All the integers in nums appear only once except for precisely one integer \nwhich appears two or more times. \n \n\n \n Follow up: \n\n \n How can we prove that at least one duplicate number must exist in nums? \n Can you solve the problem in linear runtime complexity? \n \n Related Topics位运算 | 数组 | 双指针 | 二分查找 \n\n 👍 1905, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findDuplicate(int[] nums) {\n        int n = nums.length;\n        int l = 1, r = n - 1, ans = -1;\n        while (l <= r) {\n            int mid = (l + r) >> 1;\n            int cnt = 0;\n            for (int i = 0; i < n; ++i) {\n                if (nums[i] <= mid) {\n                    cnt++;\n                }\n            }\n            if (cnt <= mid) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n                ans = mid;\n            }\n        }\n        return ans;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-287","published":1,"updated":"2022-09-30T08:57:43.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzj003x3suu01pvc30d","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array of integers nums containing n + 1 integers where each integer is \nin the range [1, n] inclusive. \n\n There is only one repeated number in nums, return this repeated number. \n\n You must solve the problem without modifying the array nums and uses only \nconstant extra space. \n\n \n Example 1: \n\n \nInput: nums = [1,3,4,2,2]\nOutput: 2\n \n\n Example 2: \n\n \nInput: nums = [3,1,3,4,2]\nOutput: 3\n \n\n \n Constraints: \n\n \n 1 &lt;= n &lt;= 10⁵ \n nums.length == n + 1 \n 1 &lt;= nums[i] &lt;= n \n All the integers in nums appear only once except for precisely one integer \nwhich appears two or more times. \n \n\n \n Follow up: \n\n \n How can we prove that at least one duplicate number must exist in nums? \n Can you solve the problem in linear runtime complexity? \n \n Related Topics位运算 | 数组 | 双指针 | 二分查找 \n\n 👍 1905, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                l <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                r <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array of integers nums containing n + 1 integers where each integer is \nin the range [1, n] inclusive. \n\n There is only one repeated number in nums, return this repeated number. \n\n You must solve the problem without modifying the array nums and uses only \nconstant extra space. \n\n \n Example 1: \n\n \nInput: nums = [1,3,4,2,2]\nOutput: 2\n \n\n Example 2: \n\n \nInput: nums = [3,1,3,4,2]\nOutput: 3\n \n\n \n Constraints: \n\n \n 1 &lt;= n &lt;= 10⁵ \n nums.length == n + 1 \n 1 &lt;= nums[i] &lt;= n \n All the integers in nums appear only once except for precisely one integer \nwhich appears two or more times. \n \n\n \n Follow up: \n\n \n How can we prove that at least one duplicate number must exist in nums? \n Can you solve the problem in linear runtime complexity? \n \n Related Topics位运算 | 数组 | 双指针 | 二分查找 \n\n 👍 1905, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                l <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                r <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-297","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-06T03:37:36.000Z","_content":"\n```java\n/**\n * Serialization is the process of converting a data structure or object into a\n * sequence of bits so that it can be stored in a file or memory buffer, or\n * transmitted across a network connection link to be reconstructed later in the same or\n * another computer environment.\n * <p>\n * Design an algorithm to serialize and deserialize a binary tree. There is no\n * restriction on how your serialization/deserialization algorithm should work. You\n * just need to ensure that a binary tree can be serialized to a string and this\n * string can be deserialized to the original tree structure.\n * <p>\n * Clarification: The input/output format is the same as how LeetCode serializes\n * a binary tree. You do not necessarily need to follow this format, so please be\n * creative and come up with different approaches yourself.\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: root = [1,2,3,null,null,4,5]\n * Output: [1,2,3,null,null,4,5]\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: root = []\n * Output: []\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * The number of nodes in the tree is in the range [0, 10⁴].\n * -1000 <= Node.val <= 1000\n * <p>\n * Related Topics树 | 深度优先搜索 | 广度优先搜索 | 设计 | 字符串 | 二叉树\n * <p>\n * 👍 985, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n    public String serialize(TreeNode root) {\n        return rserialize(root, \"\");\n    }\n\n    public TreeNode deserialize(String data) {\n        String[] dataArray = data.split(\",\");\n        List<String> dataList = new LinkedList<String>(Arrays.asList(dataArray));\n        return rdeserialize(dataList);\n    }\n\n    public String rserialize(TreeNode root, String str) {\n        if (root == null) {\n            str += \"null,\";\n        } else {\n            str += str.valueOf(root.val) + \",\";\n            str = rserialize(root.left, str);\n            str = rserialize(root.right, str);\n        }\n        return str;\n    }\n\n    public TreeNode rdeserialize(List<String> dataList) {\n        if (dataList.get(0).equals(\"null\")) {\n            dataList.remove(0);\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.valueOf(dataList.get(0)));\n        dataList.remove(0);\n        root.left = rdeserialize(dataList);\n        root.right = rdeserialize(dataList);\n        return root;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-297.md","raw":"---\ntitle: lc-297\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-06 11:37:36\n---\n\n```java\n/**\n * Serialization is the process of converting a data structure or object into a\n * sequence of bits so that it can be stored in a file or memory buffer, or\n * transmitted across a network connection link to be reconstructed later in the same or\n * another computer environment.\n * <p>\n * Design an algorithm to serialize and deserialize a binary tree. There is no\n * restriction on how your serialization/deserialization algorithm should work. You\n * just need to ensure that a binary tree can be serialized to a string and this\n * string can be deserialized to the original tree structure.\n * <p>\n * Clarification: The input/output format is the same as how LeetCode serializes\n * a binary tree. You do not necessarily need to follow this format, so please be\n * creative and come up with different approaches yourself.\n * <p>\n * <p>\n * Example 1:\n * <p>\n * <p>\n * Input: root = [1,2,3,null,null,4,5]\n * Output: [1,2,3,null,null,4,5]\n * <p>\n * <p>\n * Example 2:\n * <p>\n * <p>\n * Input: root = []\n * Output: []\n * <p>\n * <p>\n * <p>\n * Constraints:\n * <p>\n * <p>\n * The number of nodes in the tree is in the range [0, 10⁴].\n * -1000 <= Node.val <= 1000\n * <p>\n * Related Topics树 | 深度优先搜索 | 广度优先搜索 | 设计 | 字符串 | 二叉树\n * <p>\n * 👍 985, 👎 0\n */\n//leetcode submit region begin(Prohibit modification and deletion)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n    public String serialize(TreeNode root) {\n        return rserialize(root, \"\");\n    }\n\n    public TreeNode deserialize(String data) {\n        String[] dataArray = data.split(\",\");\n        List<String> dataList = new LinkedList<String>(Arrays.asList(dataArray));\n        return rdeserialize(dataList);\n    }\n\n    public String rserialize(TreeNode root, String str) {\n        if (root == null) {\n            str += \"null,\";\n        } else {\n            str += str.valueOf(root.val) + \",\";\n            str = rserialize(root.left, str);\n            str = rserialize(root.right, str);\n        }\n        return str;\n    }\n\n    public TreeNode rdeserialize(List<String> dataList) {\n        if (dataList.get(0).equals(\"null\")) {\n            dataList.remove(0);\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.valueOf(dataList.get(0)));\n        dataList.remove(0);\n        root.left = rdeserialize(dataList);\n        root.right = rdeserialize(dataList);\n        return root;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-297","published":1,"updated":"2022-10-06T07:21:13.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzk00403suu3wb510ie","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Serialization is the process of converting a data structure or object into a\n * sequence of bits so that it can be stored in a file or memory buffer, or\n * transmitted across a network connection link to be reconstructed later in the same or\n * another computer environment.\n * &lt;p&gt;\n * Design an algorithm to serialize and deserialize a binary tree. There is no\n * restriction on how your serialization/deserialization algorithm should work. You\n * just need to ensure that a binary tree can be serialized to a string and this\n * string can be deserialized to the original tree structure.\n * &lt;p&gt;\n * Clarification: The input/output format is the same as how LeetCode serializes\n * a binary tree. You do not necessarily need to follow this format, so please be\n * creative and come up with different approaches yourself.\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: root = [1,2,3,null,null,4,5]\n * Output: [1,2,3,null,null,4,5]\n * &lt;p&gt;\n * &lt;p&gt;\n * Example 2:\n * &lt;p&gt;\n * &lt;p&gt;\n * Input: root = []\n * Output: []\n * &lt;p&gt;\n * &lt;p&gt;\n * &lt;p&gt;\n * Constraints:\n * &lt;p&gt;\n * &lt;p&gt;\n * The number of nodes in the tree is in the range [0, 10⁴].\n * -1000 &lt;= Node.val &lt;= 1000\n * &lt;p&gt;\n * Related Topics树 | 深度优先搜索 | 广度优先搜索 | 设计 | 字符串 | 二叉树\n * &lt;p&gt;\n * 👍 985, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Codec</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dataArray <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> dataList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>dataArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">+=</span> <span class=\"token string\">\"null,\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">+=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> dataList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dataList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Your Codec object will be instantiated and called as such:</span>\n<span class=\"token comment\">// Codec ser = new Codec();</span>\n<span class=\"token comment\">// Codec deser = new Codec();</span>\n<span class=\"token comment\">// TreeNode ans = deser.deserialize(ser.serialize(root));</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Serialization is the process of converting a data structure or object into a\n * sequence of bits so that it can be stored in a file or memory buffer, or\n * transmitted across a network connection link to be reconstructed later in the same or\n * another computer environment.\n * &lt;p>\n * Design an algorithm to serialize and deserialize a binary tree. There is no\n * restriction on how your serialization/deserialization algorithm should work. You\n * just need to ensure that a binary tree can be serialized to a string and this\n * string can be deserialized to the original tree structure.\n * &lt;p>\n * Clarification: The input/output format is the same as how LeetCode serializes\n * a binary tree. You do not necessarily need to follow this format, so please be\n * creative and come up with different approaches yourself.\n * &lt;p>\n * &lt;p>\n * Example 1:\n * &lt;p>\n * &lt;p>\n * Input: root = [1,2,3,null,null,4,5]\n * Output: [1,2,3,null,null,4,5]\n * &lt;p>\n * &lt;p>\n * Example 2:\n * &lt;p>\n * &lt;p>\n * Input: root = []\n * Output: []\n * &lt;p>\n * &lt;p>\n * &lt;p>\n * Constraints:\n * &lt;p>\n * &lt;p>\n * The number of nodes in the tree is in the range [0, 10⁴].\n * -1000 &lt;= Node.val &lt;= 1000\n * &lt;p>\n * Related Topics树 | 深度优先搜索 | 广度优先搜索 | 设计 | 字符串 | 二叉树\n * &lt;p>\n * 👍 985, 👎 0\n */</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Codec</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dataArray <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>dataArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            str <span class=\"token operator\">+=</span> <span class=\"token string\">\"null,\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            str <span class=\"token operator\">+=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">rserialize</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> dataList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dataList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">rdeserialize</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Your Codec object will be instantiated and called as such:</span>\n<span class=\"token comment\">// Codec ser = new Codec();</span>\n<span class=\"token comment\">// Codec deser = new Codec();</span>\n<span class=\"token comment\">// TreeNode ans = deser.deserialize(ser.serialize(root));</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-301","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-08T03:15:52.000Z","_content":"\n```java\n/**\nGiven a string s that contains parentheses and letters, remove the minimum \nnumber of invalid parentheses to make the input string valid. \n\n Return all the possible results. You may return the answer in any order. \n\n \n Example 1: \n\n \nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]\n \n\n Example 2: \n\n \nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]\n \n\n Example 3: \n\n \nInput: s = \")(\"\nOutput: [\"\"]\n \n\n \n Constraints: \n\n \n 1 <= s.length <= 25 \n s consists of lowercase English letters and parentheses '(' and ')'. \n There will be at most 20 parentheses in s. \n \n Related Topics广度优先搜索 | 字符串 | 回溯 \n\n 👍 778, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> removeInvalidParentheses(String s) {\n\n        Set<String> visitedSet = new HashSet<>();\n        List<String> result = new ArrayList<>();\n        int maxLen = 0;\n        Queue<String> candQueue = new LinkedList<>();\n\n        visitedSet.add(s);\n        candQueue.add(s);\n\n        while (!candQueue.isEmpty()) {\n            String cand = candQueue.poll();\n\n\n            if (isValid(cand)) {\n                result.add(cand);\n                if (cand.length() > maxLen) {\n                    maxLen = cand.length();\n                }\n                continue;\n            }\n\n            if (cand.length() <= maxLen) {\n                continue;\n            }\n            for (int i = 0; i < cand.length(); i++) {\n                String sub;\n\n                if (i == 0) {\n                    sub = cand.substring(1);\n                } else if (i == cand.length() - 1) {\n                    sub = cand.substring(0, cand.length() - 1);\n                } else {\n                    sub = cand.substring(0, i) + cand.substring(i + 1);\n                }\n\n                if (visitedSet.contains(sub)) {\n                    continue;\n                }\n                candQueue.add(sub);\n                visitedSet.add(sub);\n            }\n        }\n        final int ff = maxLen;\n        return result.stream().filter(p->p.length() == ff).collect(Collectors.toList());\n    }\n\n\n\n    private boolean isValid(String s) {\n        int cnt = 0;\n\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                cnt++;\n            } else if (ch == ')') {\n                cnt--;\n\n                if (cnt < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return cnt == 0;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-301.md","raw":"---\ntitle: lc-301\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-08 11:15:52\n---\n\n```java\n/**\nGiven a string s that contains parentheses and letters, remove the minimum \nnumber of invalid parentheses to make the input string valid. \n\n Return all the possible results. You may return the answer in any order. \n\n \n Example 1: \n\n \nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]\n \n\n Example 2: \n\n \nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]\n \n\n Example 3: \n\n \nInput: s = \")(\"\nOutput: [\"\"]\n \n\n \n Constraints: \n\n \n 1 <= s.length <= 25 \n s consists of lowercase English letters and parentheses '(' and ')'. \n There will be at most 20 parentheses in s. \n \n Related Topics广度优先搜索 | 字符串 | 回溯 \n\n 👍 778, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<String> removeInvalidParentheses(String s) {\n\n        Set<String> visitedSet = new HashSet<>();\n        List<String> result = new ArrayList<>();\n        int maxLen = 0;\n        Queue<String> candQueue = new LinkedList<>();\n\n        visitedSet.add(s);\n        candQueue.add(s);\n\n        while (!candQueue.isEmpty()) {\n            String cand = candQueue.poll();\n\n\n            if (isValid(cand)) {\n                result.add(cand);\n                if (cand.length() > maxLen) {\n                    maxLen = cand.length();\n                }\n                continue;\n            }\n\n            if (cand.length() <= maxLen) {\n                continue;\n            }\n            for (int i = 0; i < cand.length(); i++) {\n                String sub;\n\n                if (i == 0) {\n                    sub = cand.substring(1);\n                } else if (i == cand.length() - 1) {\n                    sub = cand.substring(0, cand.length() - 1);\n                } else {\n                    sub = cand.substring(0, i) + cand.substring(i + 1);\n                }\n\n                if (visitedSet.contains(sub)) {\n                    continue;\n                }\n                candQueue.add(sub);\n                visitedSet.add(sub);\n            }\n        }\n        final int ff = maxLen;\n        return result.stream().filter(p->p.length() == ff).collect(Collectors.toList());\n    }\n\n\n\n    private boolean isValid(String s) {\n        int cnt = 0;\n\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                cnt++;\n            } else if (ch == ')') {\n                cnt--;\n\n                if (cnt < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return cnt == 0;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-301","published":1,"updated":"2022-10-08T12:06:18.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzk00433suu4tb9edcw","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s that contains parentheses and letters, remove the minimum \nnumber of invalid parentheses to make the input string valid. \n\n Return all the possible results. You may return the answer in any order. \n\n \n Example 1: \n\n \nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]\n \n\n Example 2: \n\n \nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]\n \n\n Example 3: \n\n \nInput: s = \")(\"\nOutput: [\"\"]\n \n\n \n Constraints: \n\n \n 1 &lt;= s.length &lt;= 25 \n s consists of lowercase English letters and parentheses '(' and ')'. \n There will be at most 20 parentheses in s. \n \n Related Topics广度优先搜索 | 字符串 | 回溯 \n\n 👍 778, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">removeInvalidParentheses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> visitedSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> candQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        visitedSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> cand <span class=\"token operator\">=</span> candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    maxLen <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">String</span> sub<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sub <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sub <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    sub <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visitedSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visitedSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ff <span class=\"token operator\">=</span> maxLen<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-&gt;</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s that contains parentheses and letters, remove the minimum \nnumber of invalid parentheses to make the input string valid. \n\n Return all the possible results. You may return the answer in any order. \n\n \n Example 1: \n\n \nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]\n \n\n Example 2: \n\n \nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]\n \n\n Example 3: \n\n \nInput: s = \")(\"\nOutput: [\"\"]\n \n\n \n Constraints: \n\n \n 1 &lt;= s.length &lt;= 25 \n s consists of lowercase English letters and parentheses '(' and ')'. \n There will be at most 20 parentheses in s. \n \n Related Topics广度优先搜索 | 字符串 | 回溯 \n\n 👍 778, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">removeInvalidParentheses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> visitedSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> candQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        visitedSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> cand <span class=\"token operator\">=</span> candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    maxLen <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">String</span> sub<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    sub <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    sub <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    sub <span class=\"token operator\">=</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cand<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visitedSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                candQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visitedSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ff <span class=\"token operator\">=</span> maxLen<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-33","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-29T03:11:46.000Z","_content":"\n```java\n//There is an integer array nums sorted in ascending order (with distinct values\n//). \n//\n// Prior to being passed to your function, nums is possibly rotated at an unknow\n//n pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k]\n//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For \n//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0\n//,1,2]. \n//\n// Given the array nums after the possible rotation and an integer target, retur\n//n the index of target if it is in nums, or -1 if it is not in nums. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [4,5,6,7,0,1,2], target = 0\n//Output: 4\n// Example 2: \n// Input: nums = [4,5,6,7,0,1,2], target = 3\n//Output: -1\n// Example 3: \n// Input: nums = [1], target = 0\n//Output: -1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5000 \n// -104 <= nums[i] <= 104 \n// All values of nums are unique. \n// nums is an ascending array that is possibly rotated. \n// -104 <= target <= 104 \n// \n// Related Topics Array Binary Search \n// 👍 15303 👎 957\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int search(int[] nums, int target) {\n        if (nums[0] < nums[nums.length - 1]) {\n            return searchInner(nums, target, 0, nums.length - 1, true);\n        } else {\n            return searchInner(nums, target, 0, nums.length - 1, false);\n        }\n    }\n\n    private int searchInner(int[] nums, int target, int from, int end, boolean isAsc) {\n        if (from == end) {\n            if (nums[from] == target) {\n                return from;\n            } else {\n                return -1;\n            }\n        }\n\n        if (from + 1 == end) {\n            if (nums[from] == target) {\n                return from;\n            } else if (nums[end] == target) {\n                return end;\n            } else {\n                return -1;\n            }\n        }\n\n        int mid = from + (end - from) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        }\n\n        if (isAsc) {\n            if (nums[mid] < target) {\n                return searchInner(nums, target, mid, end, true);\n            } else {\n                return searchInner(nums, target, from, mid, true);\n            }\n        } else {\n            if (nums[mid] <= nums[from] && nums[mid] <= nums[end]) {\n                if (nums[mid] < target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, false);\n                    } else {\n                        return searchInner(nums, target, mid, end, true);\n                    }\n                } else {\n                    return searchInner(nums, target, from, mid, false);\n                }\n            } else {\n                if (nums[mid] > target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, true);\n                    } else {\n                        return searchInner(nums, target, mid, end, false);\n                    }\n                } else {\n                    return searchInner(nums, target, mid, end, false);\n                }\n            }\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```","source":"_posts/lc-33.md","raw":"---\ntitle: lc-33\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-29 11:11:46\n---\n\n```java\n//There is an integer array nums sorted in ascending order (with distinct values\n//). \n//\n// Prior to being passed to your function, nums is possibly rotated at an unknow\n//n pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k]\n//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For \n//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0\n//,1,2]. \n//\n// Given the array nums after the possible rotation and an integer target, retur\n//n the index of target if it is in nums, or -1 if it is not in nums. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [4,5,6,7,0,1,2], target = 0\n//Output: 4\n// Example 2: \n// Input: nums = [4,5,6,7,0,1,2], target = 3\n//Output: -1\n// Example 3: \n// Input: nums = [1], target = 0\n//Output: -1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5000 \n// -104 <= nums[i] <= 104 \n// All values of nums are unique. \n// nums is an ascending array that is possibly rotated. \n// -104 <= target <= 104 \n// \n// Related Topics Array Binary Search \n// 👍 15303 👎 957\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int search(int[] nums, int target) {\n        if (nums[0] < nums[nums.length - 1]) {\n            return searchInner(nums, target, 0, nums.length - 1, true);\n        } else {\n            return searchInner(nums, target, 0, nums.length - 1, false);\n        }\n    }\n\n    private int searchInner(int[] nums, int target, int from, int end, boolean isAsc) {\n        if (from == end) {\n            if (nums[from] == target) {\n                return from;\n            } else {\n                return -1;\n            }\n        }\n\n        if (from + 1 == end) {\n            if (nums[from] == target) {\n                return from;\n            } else if (nums[end] == target) {\n                return end;\n            } else {\n                return -1;\n            }\n        }\n\n        int mid = from + (end - from) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        }\n\n        if (isAsc) {\n            if (nums[mid] < target) {\n                return searchInner(nums, target, mid, end, true);\n            } else {\n                return searchInner(nums, target, from, mid, true);\n            }\n        } else {\n            if (nums[mid] <= nums[from] && nums[mid] <= nums[end]) {\n                if (nums[mid] < target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, false);\n                    } else {\n                        return searchInner(nums, target, mid, end, true);\n                    }\n                } else {\n                    return searchInner(nums, target, from, mid, false);\n                }\n            } else {\n                if (nums[mid] > target) {\n                    if (nums[end] < target) {\n                        return searchInner(nums, target, from, mid, true);\n                    } else {\n                        return searchInner(nums, target, mid, end, false);\n                    }\n                } else {\n                    return searchInner(nums, target, mid, end, false);\n                }\n            }\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```","slug":"lc-33","published":1,"updated":"2023-02-01T13:20:30.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzl00463suudeka8cle","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is an integer array nums sorted in ascending order (with distinct values</span>\n<span class=\"token comment\">//). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Prior to being passed to your function, nums is possibly rotated at an unknow</span>\n<span class=\"token comment\">//n pivot index k (1 &lt;= k &lt; nums.length) such that the resulting array is [nums[k]</span>\n<span class=\"token comment\">//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For </span>\n<span class=\"token comment\">//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0</span>\n<span class=\"token comment\">//,1,2]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the array nums after the possible rotation and an integer target, retur</span>\n<span class=\"token comment\">//n the index of target if it is in nums, or -1 if it is not in nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 0</span>\n<span class=\"token comment\">//Output: 4</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 3</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1], target = 0</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5000 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// All values of nums are unique. </span>\n<span class=\"token comment\">// nums is an ascending array that is possibly rotated. </span>\n<span class=\"token comment\">// -104 &lt;= target &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 15303 👎 957</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is an integer array nums sorted in ascending order (with distinct values</span>\n<span class=\"token comment\">//). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Prior to being passed to your function, nums is possibly rotated at an unknow</span>\n<span class=\"token comment\">//n pivot index k (1 &lt;= k &lt; nums.length) such that the resulting array is [nums[k]</span>\n<span class=\"token comment\">//, nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For </span>\n<span class=\"token comment\">//example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0</span>\n<span class=\"token comment\">//,1,2]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the array nums after the possible rotation and an integer target, retur</span>\n<span class=\"token comment\">//n the index of target if it is in nums, or -1 if it is not in nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 0</span>\n<span class=\"token comment\">//Output: 4</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [4,5,6,7,0,1,2], target = 3</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1], target = 0</span>\n<span class=\"token comment\">//Output: -1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5000 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// All values of nums are unique. </span>\n<span class=\"token comment\">// nums is an ascending array that is possibly rotated. </span>\n<span class=\"token comment\">// -104 &lt;= target &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 15303 👎 957</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAsc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">searchInner</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"lc-23","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-22T08:40:02.000Z","_content":"\n```java\n//You are given an array of k linked-lists lists, each linked-list is sorted in\n//ascending order.\n//\n// Merge all the linked-lists into one sorted linked-list and return it.\n//\n//\n// Example 1:\n//\n//\n//Input: lists = [[1,4,5],[1,3,4],[2,6]]\n//Output: [1,1,2,3,4,4,5,6]\n//Explanation: The linked-lists are:\n//[\n//  1->4->5,\n//  1->3->4,\n//  2->6\n//]\n//merging them into one sorted list:\n//1->1->2->3->4->4->5->6\n//\n//\n// Example 2:\n//\n//\n//Input: lists = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: lists = [[]]\n//Output: []\n//\n//\n//\n// Constraints:\n//\n//\n// k == lists.length\n// 0 <= k <= 104\n// 0 <= lists[i].length <= 500\n// -104 <= lists[i][j] <= 104\n// lists[i] is sorted in ascending order.\n// The sum of lists[i].length will not exceed 104.\n//\n// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor\n//t\n// 👍 12620 👎 487\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) {\n            return null;\n        }\n        ListNode head = null, cur = null;\n        ListNode[] tempNodes = new ListNode[lists.length];\n        for (int i = 0; i < lists.length; i++) {\n            tempNodes[i] = lists[i];\n        }\n\n        while (true) {\n            int minV = Integer.MAX_VALUE;\n            ListNode minN = null;\n            int i = 0;\n            int keyIndex = -1;\n\n            for (ListNode node : tempNodes) {\n                if (node != null) {\n                    if (node.val < minV) {\n                        minN = node;\n                        minV = node.val;\n                        keyIndex = i;\n                    }\n                }\n                i++;\n            }\n            if (minN == null) {\n                break;\n            }\n\n            tempNodes[keyIndex] = tempNodes[keyIndex].next;\n\n            if (head == null) {\n                head = minN;\n            }\n            if (cur != null) {\n                cur.next = minN;\n            }\n            cur = minN;\n        }\n        return head;\n    }\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-23.md","raw":"---\ntitle: lc-23\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-22 16:40:02\n---\n\n```java\n//You are given an array of k linked-lists lists, each linked-list is sorted in\n//ascending order.\n//\n// Merge all the linked-lists into one sorted linked-list and return it.\n//\n//\n// Example 1:\n//\n//\n//Input: lists = [[1,4,5],[1,3,4],[2,6]]\n//Output: [1,1,2,3,4,4,5,6]\n//Explanation: The linked-lists are:\n//[\n//  1->4->5,\n//  1->3->4,\n//  2->6\n//]\n//merging them into one sorted list:\n//1->1->2->3->4->4->5->6\n//\n//\n// Example 2:\n//\n//\n//Input: lists = []\n//Output: []\n//\n//\n// Example 3:\n//\n//\n//Input: lists = [[]]\n//Output: []\n//\n//\n//\n// Constraints:\n//\n//\n// k == lists.length\n// 0 <= k <= 104\n// 0 <= lists[i].length <= 500\n// -104 <= lists[i][j] <= 104\n// lists[i] is sorted in ascending order.\n// The sum of lists[i].length will not exceed 104.\n//\n// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor\n//t\n// 👍 12620 👎 487\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) {\n            return null;\n        }\n        ListNode head = null, cur = null;\n        ListNode[] tempNodes = new ListNode[lists.length];\n        for (int i = 0; i < lists.length; i++) {\n            tempNodes[i] = lists[i];\n        }\n\n        while (true) {\n            int minV = Integer.MAX_VALUE;\n            ListNode minN = null;\n            int i = 0;\n            int keyIndex = -1;\n\n            for (ListNode node : tempNodes) {\n                if (node != null) {\n                    if (node.val < minV) {\n                        minN = node;\n                        minV = node.val;\n                        keyIndex = i;\n                    }\n                }\n                i++;\n            }\n            if (minN == null) {\n                break;\n            }\n\n            tempNodes[keyIndex] = tempNodes[keyIndex].next;\n\n            if (head == null) {\n                head = minN;\n            }\n            if (cur != null) {\n                cur.next = minN;\n            }\n            cur = minN;\n        }\n        return head;\n    }\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-23","published":1,"updated":"2023-02-01T13:20:04.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzm00493suu94uy8dnl","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an array of k linked-lists lists, each linked-list is sorted in</span>\n<span class=\"token comment\">//ascending order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge all the linked-lists into one sorted linked-list and return it.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[1,4,5],[1,3,4],[2,6]]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4,5,6]</span>\n<span class=\"token comment\">//Explanation: The linked-lists are:</span>\n<span class=\"token comment\">//[</span>\n<span class=\"token comment\">//  1-&gt;4-&gt;5,</span>\n<span class=\"token comment\">//  1-&gt;3-&gt;4,</span>\n<span class=\"token comment\">//  2-&gt;6</span>\n<span class=\"token comment\">//]</span>\n<span class=\"token comment\">//merging them into one sorted list:</span>\n<span class=\"token comment\">//1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[]]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k == lists.length</span>\n<span class=\"token comment\">// 0 &lt;= k &lt;= 104</span>\n<span class=\"token comment\">// 0 &lt;= lists[i].length &lt;= 500</span>\n<span class=\"token comment\">// -104 &lt;= lists[i][j] &lt;= 104</span>\n<span class=\"token comment\">// lists[i] is sorted in ascending order.</span>\n<span class=\"token comment\">// The sum of lists[i].length will not exceed 104.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor</span>\n<span class=\"token comment\">//t</span>\n<span class=\"token comment\">// 👍 12620 👎 487</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">ListNode</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tempNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span>lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            tempNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ListNode</span> minN <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> keyIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">:</span> tempNodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        minN <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        minV <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                        keyIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minN <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                head <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cur <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an array of k linked-lists lists, each linked-list is sorted in</span>\n<span class=\"token comment\">//ascending order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge all the linked-lists into one sorted linked-list and return it.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[1,4,5],[1,3,4],[2,6]]</span>\n<span class=\"token comment\">//Output: [1,1,2,3,4,4,5,6]</span>\n<span class=\"token comment\">//Explanation: The linked-lists are:</span>\n<span class=\"token comment\">//[</span>\n<span class=\"token comment\">//  1->4->5,</span>\n<span class=\"token comment\">//  1->3->4,</span>\n<span class=\"token comment\">//  2->6</span>\n<span class=\"token comment\">//]</span>\n<span class=\"token comment\">//merging them into one sorted list:</span>\n<span class=\"token comment\">//1->1->2->3->4->4->5->6</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: lists = [[]]</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// k == lists.length</span>\n<span class=\"token comment\">// 0 &lt;= k &lt;= 104</span>\n<span class=\"token comment\">// 0 &lt;= lists[i].length &lt;= 500</span>\n<span class=\"token comment\">// -104 &lt;= lists[i][j] &lt;= 104</span>\n<span class=\"token comment\">// lists[i] is sorted in ascending order.</span>\n<span class=\"token comment\">// The sum of lists[i].length will not exceed 104.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Linked List Divide and Conquer Heap (Priority Queue) Merge Sor</span>\n<span class=\"token comment\">//t</span>\n<span class=\"token comment\">// 👍 12620 👎 487</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode() &#123;&#125;\n *     ListNode(int val) &#123; this.val = val; &#125;\n *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lists <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ListNode</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tempNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span>lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lists<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            tempNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ListNode</span> minN <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> keyIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">:</span> tempNodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        minN <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n                        minV <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n                        keyIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minN <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempNodes<span class=\"token punctuation\">[</span>keyIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                head <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            cur <span class=\"token operator\">=</span> minN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-34","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-07-01T03:30:07.000Z","_content":"\n```java\n//Given an array of integers nums sorted in non-decreasing order, find the start\n//ing and ending position of a given target value. \n//\n// If target is not found in the array, return [-1, -1]. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [5,7,7,8,8,10], target = 8\n//Output: [3,4]\n// Example 2: \n// Input: nums = [5,7,7,8,8,10], target = 6\n//Output: [-1,-1]\n// Example 3: \n// Input: nums = [], target = 0\n//Output: [-1,-1]\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 105 \n// -109 <= nums[i] <= 109 \n// nums is a non-decreasing array. \n// -109 <= target <= 109 \n// \n// Related Topics Array Binary Search \n// 👍 11383 👎 306\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] result = new int[2];\n        result[0] = searchRangeFunc(nums, target, true);\n        result[1] = searchRangeFunc(nums, target, false);\n        return result;\n    }\n\n    private int searchRangeFunc(int[] nums, int target, boolean left) {\n        int from = 0, end = nums.length - 1;\n\n        while (from <= end) {\n            if (from == end) {\n                if (nums[from] == target) {\n                    return from;\n                } else {\n                    return -1;\n                }\n            }\n\n            if (from + 1 == end) {\n                if (nums[from] == target && nums[end] == target) {\n                    if (left) {\n                        return from;\n                    } else {\n                        return end;\n                    }\n                }\n\n                if (nums[from] == target) {\n                    return from;\n                } else if (nums[end] == target) {\n                    return end;\n                } else {\n                    return -1;\n                }\n            }\n\n            int mid = from + (end - from) / 2;\n\n            if (nums[mid] < target) {\n                from = mid;\n            } else if (nums[mid] > target) {\n                end = mid;\n            } else {\n                if (left) {\n                    end = mid;\n                } else {\n                    from = mid;\n                }\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-34.md","raw":"---\ntitle: lc-34\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-01 11:30:07\n---\n\n```java\n//Given an array of integers nums sorted in non-decreasing order, find the start\n//ing and ending position of a given target value. \n//\n// If target is not found in the array, return [-1, -1]. \n//\n// You must write an algorithm with O(log n) runtime complexity. \n//\n// \n// Example 1: \n// Input: nums = [5,7,7,8,8,10], target = 8\n//Output: [3,4]\n// Example 2: \n// Input: nums = [5,7,7,8,8,10], target = 6\n//Output: [-1,-1]\n// Example 3: \n// Input: nums = [], target = 0\n//Output: [-1,-1]\n// \n// \n// Constraints: \n//\n// \n// 0 <= nums.length <= 105 \n// -109 <= nums[i] <= 109 \n// nums is a non-decreasing array. \n// -109 <= target <= 109 \n// \n// Related Topics Array Binary Search \n// 👍 11383 👎 306\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] result = new int[2];\n        result[0] = searchRangeFunc(nums, target, true);\n        result[1] = searchRangeFunc(nums, target, false);\n        return result;\n    }\n\n    private int searchRangeFunc(int[] nums, int target, boolean left) {\n        int from = 0, end = nums.length - 1;\n\n        while (from <= end) {\n            if (from == end) {\n                if (nums[from] == target) {\n                    return from;\n                } else {\n                    return -1;\n                }\n            }\n\n            if (from + 1 == end) {\n                if (nums[from] == target && nums[end] == target) {\n                    if (left) {\n                        return from;\n                    } else {\n                        return end;\n                    }\n                }\n\n                if (nums[from] == target) {\n                    return from;\n                } else if (nums[end] == target) {\n                    return end;\n                } else {\n                    return -1;\n                }\n            }\n\n            int mid = from + (end - from) / 2;\n\n            if (nums[mid] < target) {\n                from = mid;\n            } else if (nums[mid] > target) {\n                end = mid;\n            } else {\n                if (left) {\n                    end = mid;\n                } else {\n                    from = mid;\n                }\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-34","published":1,"updated":"2023-02-01T13:20:33.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzn004c3suub2j3bnj1","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of integers nums sorted in non-decreasing order, find the start</span>\n<span class=\"token comment\">//ing and ending position of a given target value. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If target is not found in the array, return [-1, -1]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 8</span>\n<span class=\"token comment\">//Output: [3,4]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 6</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [], target = 0</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -109 &lt;= nums[i] &lt;= 109 </span>\n<span class=\"token comment\">// nums is a non-decreasing array. </span>\n<span class=\"token comment\">// -109 &lt;= target &lt;= 109 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 11383 👎 306</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">searchRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> from <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of integers nums sorted in non-decreasing order, find the start</span>\n<span class=\"token comment\">//ing and ending position of a given target value. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If target is not found in the array, return [-1, -1]. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must write an algorithm with O(log n) runtime complexity. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 8</span>\n<span class=\"token comment\">//Output: [3,4]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [5,7,7,8,8,10], target = 6</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [], target = 0</span>\n<span class=\"token comment\">//Output: [-1,-1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -109 &lt;= nums[i] &lt;= 109 </span>\n<span class=\"token comment\">// nums is a non-decreasing array. </span>\n<span class=\"token comment\">// -109 &lt;= target &lt;= 109 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Binary Search </span>\n<span class=\"token comment\">// 👍 11383 👎 306</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">searchRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchRangeFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> from <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> from <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    from <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-38","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-05T02:46:51.000Z","_content":"\n```java\n//The count-and-say sequence is a sequence of digit strings defined by the recur\n//sive formula: \n//\n// \n// countAndSay(1) = \"1\" \n// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n\n//-1), which is then converted into a different digit string. \n// \n//\n// To determine how you \"say\" a digit string, split it into the minimal number o\n//f substrings such that each substring contains exactly one unique digit. Then fo\n//r each substring, say the number of digits, then say the digit. Finally, concate\n//nate every said digit. \n//\n// For example, the saying and conversion for digit string \"3322251\": \n//\n// Given a positive integer n, return the nth term of the count-and-say sequence\n//. \n//\n// \n// Example 1: \n//\n// \n//Input: n = 1\n//Output: \"1\"\n//Explanation: This is the base case.\n// \n//\n// Example 2: \n//\n// \n//Input: n = 4\n//Output: \"1211\"\n//Explanation:\n//countAndSay(1) = \"1\"\n//countAndSay(2) = say \"1\" = one 1 = \"11\"\n//countAndSay(3) = say \"11\" = two 1's = \"21\"\n//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 30 \n// \n// Related Topics String \n// 👍 1661 👎 3967\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String countAndSay(int n) {\n        String cur = \"1\";\n\n        for (int i = 1; i < n; i++) {\n            cur = getNext(cur);\n        }\n\n        return cur;\n    }\n\n    String getNext(String last) {\n        char lastCh = 0;\n        StringBuilder sb = new StringBuilder();\n        int curNumber = 0;\n\n        for (char ch : last.toCharArray()) {\n            if (lastCh != 0 && ch != lastCh) {\n                sb.append(curNumber);\n                sb.append(lastCh);\n                curNumber = 0;\n            }\n            lastCh = ch;\n            curNumber++;\n        }\n\n        sb.append(curNumber);\n        sb.append(lastCh);\n\n        return sb.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-38.md","raw":"---\ntitle: lc-38\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-05 10:46:51\n---\n\n```java\n//The count-and-say sequence is a sequence of digit strings defined by the recur\n//sive formula: \n//\n// \n// countAndSay(1) = \"1\" \n// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n\n//-1), which is then converted into a different digit string. \n// \n//\n// To determine how you \"say\" a digit string, split it into the minimal number o\n//f substrings such that each substring contains exactly one unique digit. Then fo\n//r each substring, say the number of digits, then say the digit. Finally, concate\n//nate every said digit. \n//\n// For example, the saying and conversion for digit string \"3322251\": \n//\n// Given a positive integer n, return the nth term of the count-and-say sequence\n//. \n//\n// \n// Example 1: \n//\n// \n//Input: n = 1\n//Output: \"1\"\n//Explanation: This is the base case.\n// \n//\n// Example 2: \n//\n// \n//Input: n = 4\n//Output: \"1211\"\n//Explanation:\n//countAndSay(1) = \"1\"\n//countAndSay(2) = say \"1\" = one 1 = \"11\"\n//countAndSay(3) = say \"11\" = two 1's = \"21\"\n//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 30 \n// \n// Related Topics String \n// 👍 1661 👎 3967\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String countAndSay(int n) {\n        String cur = \"1\";\n\n        for (int i = 1; i < n; i++) {\n            cur = getNext(cur);\n        }\n\n        return cur;\n    }\n\n    String getNext(String last) {\n        char lastCh = 0;\n        StringBuilder sb = new StringBuilder();\n        int curNumber = 0;\n\n        for (char ch : last.toCharArray()) {\n            if (lastCh != 0 && ch != lastCh) {\n                sb.append(curNumber);\n                sb.append(lastCh);\n                curNumber = 0;\n            }\n            lastCh = ch;\n            curNumber++;\n        }\n\n        sb.append(curNumber);\n        sb.append(lastCh);\n\n        return sb.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-38","published":1,"updated":"2022-07-06T02:55:04.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzo004f3suuht26eu9b","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//The count-and-say sequence is a sequence of digit strings defined by the recur</span>\n<span class=\"token comment\">//sive formula: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// countAndSay(1) = \"1\" </span>\n<span class=\"token comment\">// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n</span>\n<span class=\"token comment\">//-1), which is then converted into a different digit string. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// To determine how you \"say\" a digit string, split it into the minimal number o</span>\n<span class=\"token comment\">//f substrings such that each substring contains exactly one unique digit. Then fo</span>\n<span class=\"token comment\">//r each substring, say the number of digits, then say the digit. Finally, concate</span>\n<span class=\"token comment\">//nate every said digit. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For example, the saying and conversion for digit string \"3322251\": </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given a positive integer n, return the nth term of the count-and-say sequence</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 1</span>\n<span class=\"token comment\">//Output: \"1\"</span>\n<span class=\"token comment\">//Explanation: This is the base case.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 4</span>\n<span class=\"token comment\">//Output: \"1211\"</span>\n<span class=\"token comment\">//Explanation:</span>\n<span class=\"token comment\">//countAndSay(1) = \"1\"</span>\n<span class=\"token comment\">//countAndSay(2) = say \"1\" = one 1 = \"11\"</span>\n<span class=\"token comment\">//countAndSay(3) = say \"11\" = two 1's = \"21\"</span>\n<span class=\"token comment\">//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 30 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String </span>\n<span class=\"token comment\">// 👍 1661 👎 3967</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">countAndSay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> cur <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cur <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> lastCh <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> last<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastCh <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> lastCh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            lastCh <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n            curNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//The count-and-say sequence is a sequence of digit strings defined by the recur</span>\n<span class=\"token comment\">//sive formula: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// countAndSay(1) = \"1\" </span>\n<span class=\"token comment\">// countAndSay(n) is the way you would \"say\" the digit string from countAndSay(n</span>\n<span class=\"token comment\">//-1), which is then converted into a different digit string. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// To determine how you \"say\" a digit string, split it into the minimal number o</span>\n<span class=\"token comment\">//f substrings such that each substring contains exactly one unique digit. Then fo</span>\n<span class=\"token comment\">//r each substring, say the number of digits, then say the digit. Finally, concate</span>\n<span class=\"token comment\">//nate every said digit. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For example, the saying and conversion for digit string \"3322251\": </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given a positive integer n, return the nth term of the count-and-say sequence</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 1</span>\n<span class=\"token comment\">//Output: \"1\"</span>\n<span class=\"token comment\">//Explanation: This is the base case.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 4</span>\n<span class=\"token comment\">//Output: \"1211\"</span>\n<span class=\"token comment\">//Explanation:</span>\n<span class=\"token comment\">//countAndSay(1) = \"1\"</span>\n<span class=\"token comment\">//countAndSay(2) = say \"1\" = one 1 = \"11\"</span>\n<span class=\"token comment\">//countAndSay(3) = say \"11\" = two 1's = \"21\"</span>\n<span class=\"token comment\">//countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 30 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String </span>\n<span class=\"token comment\">// 👍 1661 👎 3967</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">countAndSay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> cur <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cur <span class=\"token operator\">=</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> lastCh <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> last<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastCh <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">!=</span> lastCh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            lastCh <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n            curNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>curNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-41","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-07-06T02:54:20.000Z","_content":"\n```java\n//Given an unsorted integer array nums, return the smallest missing positive int\n//eger. \n//\n// You must implement an algorithm that runs in O(n) time and uses constant extr\n//a space. \n//\n// \n// Example 1: \n// Input: nums = [1,2,0]\n//Output: 3\n// Example 2: \n// Input: nums = [3,4,-1,1]\n//Output: 2\n// Example 3: \n// Input: nums = [7,8,9,11,12]\n//Output: 1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5 * 105 \n// -231 <= nums[i] <= 231 - 1 \n// \n// Related Topics Array Hash Table \n// 👍 10299 👎 1387\n\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int firstMissingPositive(int[] nums) {\n        Set<Integer> treeSet = new TreeSet<>();\n        for (int num : nums) {\n            if (num > 0) {\n                treeSet.add(num);\n            }\n        }\n\n        int last = 0;\n\n        for (Integer value : treeSet) {\n            if (value - last > 1) {\n                return last + 1;\n            }\n            last = value;\n        }\n\n        return last + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-41.md","raw":"---\ntitle: lc-41\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-06 10:54:20\n---\n\n```java\n//Given an unsorted integer array nums, return the smallest missing positive int\n//eger. \n//\n// You must implement an algorithm that runs in O(n) time and uses constant extr\n//a space. \n//\n// \n// Example 1: \n// Input: nums = [1,2,0]\n//Output: 3\n// Example 2: \n// Input: nums = [3,4,-1,1]\n//Output: 2\n// Example 3: \n// Input: nums = [7,8,9,11,12]\n//Output: 1\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 5 * 105 \n// -231 <= nums[i] <= 231 - 1 \n// \n// Related Topics Array Hash Table \n// 👍 10299 👎 1387\n\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int firstMissingPositive(int[] nums) {\n        Set<Integer> treeSet = new TreeSet<>();\n        for (int num : nums) {\n            if (num > 0) {\n                treeSet.add(num);\n            }\n        }\n\n        int last = 0;\n\n        for (Integer value : treeSet) {\n            if (value - last > 1) {\n                return last + 1;\n            }\n            last = value;\n        }\n\n        return last + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-41","published":1,"updated":"2023-02-01T13:20:38.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzo004i3suud8062fbc","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an unsorted integer array nums, return the smallest missing positive int</span>\n<span class=\"token comment\">//eger. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must implement an algorithm that runs in O(n) time and uses constant extr</span>\n<span class=\"token comment\">//a space. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,0]</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [3,4,-1,1]</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [7,8,9,11,12]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5 * 105 </span>\n<span class=\"token comment\">// -231 &lt;= nums[i] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table </span>\n<span class=\"token comment\">// 👍 10299 👎 1387</span>\n\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> treeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                treeSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> value <span class=\"token operator\">:</span> treeSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> last <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            last <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an unsorted integer array nums, return the smallest missing positive int</span>\n<span class=\"token comment\">//eger. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must implement an algorithm that runs in O(n) time and uses constant extr</span>\n<span class=\"token comment\">//a space. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,0]</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [3,4,-1,1]</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [7,8,9,11,12]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 5 * 105 </span>\n<span class=\"token comment\">// -231 &lt;= nums[i] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table </span>\n<span class=\"token comment\">// 👍 10299 👎 1387</span>\n\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> treeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                treeSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> value <span class=\"token operator\">:</span> treeSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> last <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            last <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> last <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-26","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-24T05:51:18.000Z","_content":"\n```java\n//Given an integer array nums sorted in non-decreasing order, remove the duplica\n//tes in-place such that each unique element appears only once. The relative order\n// of the elements should be kept the same. \n//\n// Since it is impossible to change the length of the array in some languages, y\n//ou must instead have the result be placed in the first part of the array nums. M\n//ore formally, if there are k elements after removing the duplicates, then the fi\n//rst k elements of nums should hold the final result. It does not matter what you\n// leave beyond the first k elements. \n//\n// Return k after placing the final result in the first k slots of nums. \n//\n// Do not allocate extra space for another array. You must do this by modifying \n//the input array in-place with O(1) extra memory. \n//\n// Custom Judge: \n//\n// The judge will test your solution with the following code: \n//\n// \n//int[] nums = [...]; // Input array\n//int[] expectedNums = [...]; // The expected answer with correct length\n//\n//int k = removeDuplicates(nums); // Calls your implementation\n//\n//assert k == expectedNums.length;\n//for (int i = 0; i < k; i++) {\n//    assert nums[i] == expectedNums[i];\n//}\n// \n//\n// If all assertions pass, then your solution will be accepted. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,1,2]\n//Output: 2, nums = [1,2,_]\n//Explanation: Your function should return k = 2, with the first two elements of\n// nums being 1 and 2 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0,0,1,1,1,2,2,3,3,4]\n//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n//Explanation: Your function should return k = 5, with the first five elements o\n//f nums being 0, 1, 2, 3, and 4 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 3 * 104 \n// -100 <= nums[i] <= 100 \n// nums is sorted in non-decreasing order. \n// \n// Related Topics Array Two Pointers \n// 👍 7035 👎 10653\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int curV = Integer.MAX_VALUE;\n       \tint index = -1;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != curV) {\n                curV = nums[i];\n                index++;\n                nums[index] = curV;\n            }\n        }\n        \n        return index + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-26.md","raw":"---\ntitle: lc-26\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-24 13:51:18\n---\n\n```java\n//Given an integer array nums sorted in non-decreasing order, remove the duplica\n//tes in-place such that each unique element appears only once. The relative order\n// of the elements should be kept the same. \n//\n// Since it is impossible to change the length of the array in some languages, y\n//ou must instead have the result be placed in the first part of the array nums. M\n//ore formally, if there are k elements after removing the duplicates, then the fi\n//rst k elements of nums should hold the final result. It does not matter what you\n// leave beyond the first k elements. \n//\n// Return k after placing the final result in the first k slots of nums. \n//\n// Do not allocate extra space for another array. You must do this by modifying \n//the input array in-place with O(1) extra memory. \n//\n// Custom Judge: \n//\n// The judge will test your solution with the following code: \n//\n// \n//int[] nums = [...]; // Input array\n//int[] expectedNums = [...]; // The expected answer with correct length\n//\n//int k = removeDuplicates(nums); // Calls your implementation\n//\n//assert k == expectedNums.length;\n//for (int i = 0; i < k; i++) {\n//    assert nums[i] == expectedNums[i];\n//}\n// \n//\n// If all assertions pass, then your solution will be accepted. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,1,2]\n//Output: 2, nums = [1,2,_]\n//Explanation: Your function should return k = 2, with the first two elements of\n// nums being 1 and 2 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0,0,1,1,1,2,2,3,3,4]\n//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n//Explanation: Your function should return k = 5, with the first five elements o\n//f nums being 0, 1, 2, 3, and 4 respectively.\n//It does not matter what you leave beyond the returned k (hence they are unders\n//cores).\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 3 * 104 \n// -100 <= nums[i] <= 100 \n// nums is sorted in non-decreasing order. \n// \n// Related Topics Array Two Pointers \n// 👍 7035 👎 10653\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int curV = Integer.MAX_VALUE;\n       \tint index = -1;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != curV) {\n                curV = nums[i];\n                index++;\n                nums[index] = curV;\n            }\n        }\n        \n        return index + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-26","published":1,"updated":"2023-02-01T13:20:09.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzp004l3suu0qpx542i","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums sorted in non-decreasing order, remove the duplica</span>\n<span class=\"token comment\">//tes in-place such that each unique element appears only once. The relative order</span>\n<span class=\"token comment\">// of the elements should be kept the same. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since it is impossible to change the length of the array in some languages, y</span>\n<span class=\"token comment\">//ou must instead have the result be placed in the first part of the array nums. M</span>\n<span class=\"token comment\">//ore formally, if there are k elements after removing the duplicates, then the fi</span>\n<span class=\"token comment\">//rst k elements of nums should hold the final result. It does not matter what you</span>\n<span class=\"token comment\">// leave beyond the first k elements. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return k after placing the final result in the first k slots of nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Do not allocate extra space for another array. You must do this by modifying </span>\n<span class=\"token comment\">//the input array in-place with O(1) extra memory. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Custom Judge: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The judge will test your solution with the following code: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//int[] nums = [...]; // Input array</span>\n<span class=\"token comment\">//int[] expectedNums = [...]; // The expected answer with correct length</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//int k = removeDuplicates(nums); // Calls your implementation</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//assert k == expectedNums.length;</span>\n<span class=\"token comment\">//for (int i = 0; i &lt; k; i++) {</span>\n<span class=\"token comment\">//    assert nums[i] == expectedNums[i];</span>\n<span class=\"token comment\">//}</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If all assertions pass, then your solution will be accepted. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,1,2]</span>\n<span class=\"token comment\">//Output: 2, nums = [1,2,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 2, with the first two elements of</span>\n<span class=\"token comment\">// nums being 1 and 2 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0,0,1,1,1,2,2,3,3,4]</span>\n<span class=\"token comment\">//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 5, with the first five elements o</span>\n<span class=\"token comment\">//f nums being 0, 1, 2, 3, and 4 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 3 * 104 </span>\n<span class=\"token comment\">// -100 &lt;= nums[i] &lt;= 100 </span>\n<span class=\"token comment\">// nums is sorted in non-decreasing order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers </span>\n<span class=\"token comment\">// 👍 7035 👎 10653</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span> curV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n       \t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> curV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curV <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curV<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums sorted in non-decreasing order, remove the duplica</span>\n<span class=\"token comment\">//tes in-place such that each unique element appears only once. The relative order</span>\n<span class=\"token comment\">// of the elements should be kept the same. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since it is impossible to change the length of the array in some languages, y</span>\n<span class=\"token comment\">//ou must instead have the result be placed in the first part of the array nums. M</span>\n<span class=\"token comment\">//ore formally, if there are k elements after removing the duplicates, then the fi</span>\n<span class=\"token comment\">//rst k elements of nums should hold the final result. It does not matter what you</span>\n<span class=\"token comment\">// leave beyond the first k elements. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return k after placing the final result in the first k slots of nums. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Do not allocate extra space for another array. You must do this by modifying </span>\n<span class=\"token comment\">//the input array in-place with O(1) extra memory. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Custom Judge: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The judge will test your solution with the following code: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//int[] nums = [...]; // Input array</span>\n<span class=\"token comment\">//int[] expectedNums = [...]; // The expected answer with correct length</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//int k = removeDuplicates(nums); // Calls your implementation</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//assert k == expectedNums.length;</span>\n<span class=\"token comment\">//for (int i = 0; i &lt; k; i++) &#123;</span>\n<span class=\"token comment\">//    assert nums[i] == expectedNums[i];</span>\n<span class=\"token comment\">//&#125;</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If all assertions pass, then your solution will be accepted. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,1,2]</span>\n<span class=\"token comment\">//Output: 2, nums = [1,2,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 2, with the first two elements of</span>\n<span class=\"token comment\">// nums being 1 and 2 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0,0,1,1,1,2,2,3,3,4]</span>\n<span class=\"token comment\">//Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]</span>\n<span class=\"token comment\">//Explanation: Your function should return k = 5, with the first five elements o</span>\n<span class=\"token comment\">//f nums being 0, 1, 2, 3, and 4 respectively.</span>\n<span class=\"token comment\">//It does not matter what you leave beyond the returned k (hence they are unders</span>\n<span class=\"token comment\">//cores).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 3 * 104 </span>\n<span class=\"token comment\">// -100 &lt;= nums[i] &lt;= 100 </span>\n<span class=\"token comment\">// nums is sorted in non-decreasing order. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers </span>\n<span class=\"token comment\">// 👍 7035 👎 10653</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">int</span> curV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n       \t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> curV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curV <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curV<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">return</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-416","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-24T05:37:29.000Z","_content":"\n```java\n/**\nGiven a non-empty array nums containing only positive integers, find if the \narray can be partitioned into two subsets such that the sum of elements in both \nsubsets is equal. \n\n \n Example 1: \n\n \nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n \n\n Example 2: \n\n \nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 200 \n 1 <= nums[i] <= 100 \n \n Related Topics数组 | 动态规划 \n\n 👍 1535, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean canPartition(int[] nums) {\n        int target = 0;\n\n        for (int num : nums) {\n            target += num;\n        }\n\n        if (target % 2 == 1) {\n            return false;\n        }\n\n        target = target / 2;\n\n        boolean[][] dp = new boolean[nums.length + 1][target + 1];\n        dp[0][0] = true;\n\n        for (int i = 0; i < nums.length; i++) {\n            int num = nums[i];\n\n            if (num > target) {\n                continue;\n            }\n            dp[i + 1][num] = true;\n            dp[i + 1][0] = true;\n\n            for (int j = 0; j <= target; j++) {\n                dp[i + 1][j] = dp[i][j];\n\n                if (!dp[i + 1][j] && j >= num) {\n                    dp[i + 1][j] = dp[i][j - num];\n                }\n            }\n        }\n\n        return dp[nums.length][target];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-416.md","raw":"---\ntitle: lc-416\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-24 13:37:29\n---\n\n```java\n/**\nGiven a non-empty array nums containing only positive integers, find if the \narray can be partitioned into two subsets such that the sum of elements in both \nsubsets is equal. \n\n \n Example 1: \n\n \nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n \n\n Example 2: \n\n \nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\n \n\n \n Constraints: \n\n \n 1 <= nums.length <= 200 \n 1 <= nums[i] <= 100 \n \n Related Topics数组 | 动态规划 \n\n 👍 1535, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean canPartition(int[] nums) {\n        int target = 0;\n\n        for (int num : nums) {\n            target += num;\n        }\n\n        if (target % 2 == 1) {\n            return false;\n        }\n\n        target = target / 2;\n\n        boolean[][] dp = new boolean[nums.length + 1][target + 1];\n        dp[0][0] = true;\n\n        for (int i = 0; i < nums.length; i++) {\n            int num = nums[i];\n\n            if (num > target) {\n                continue;\n            }\n            dp[i + 1][num] = true;\n            dp[i + 1][0] = true;\n\n            for (int j = 0; j <= target; j++) {\n                dp[i + 1][j] = dp[i][j];\n\n                if (!dp[i + 1][j] && j >= num) {\n                    dp[i + 1][j] = dp[i][j - num];\n                }\n            }\n        }\n\n        return dp[nums.length][target];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-416","published":1,"updated":"2022-10-26T03:19:24.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzp004o3suubq8b6eiq","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a non-empty array nums containing only positive integers, find if the \narray can be partitioned into two subsets such that the sum of elements in both \nsubsets is equal. \n\n \n Example 1: \n\n \nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n \n\n Example 2: \n\n \nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 200 \n 1 &lt;= nums[i] &lt;= 100 \n \n Related Topics数组 | 动态规划 \n\n 👍 1535, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canPartition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            target <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        target <span class=\"token operator\">=</span> target <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&gt;=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a non-empty array nums containing only positive integers, find if the \narray can be partitioned into two subsets such that the sum of elements in both \nsubsets is equal. \n\n \n Example 1: \n\n \nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n \n\n Example 2: \n\n \nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\n \n\n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 200 \n 1 &lt;= nums[i] &lt;= 100 \n \n Related Topics数组 | 动态规划 \n\n 👍 1535, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canPartition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            target <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        target <span class=\"token operator\">=</span> target <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">>=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-44","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-11T03:42:50.000Z","_content":"\n```java\n//Given an input string (s) and a pattern (p), implement wildcard pattern matchi\n//ng with support for '?' and '*' where: \n//\n// \n// '?' Matches any single character. \n// '*' Matches any sequence of characters (including the empty sequence). \n// \n//\n// The matching should cover the entire input string (not partial). \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"aa\", p = \"a\"\n//Output: false\n//Explanation: \"a\" does not match the entire string \"aa\".\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"aa\", p = \"*\"\n//Output: true\n//Explanation: '*' matches any sequence.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"cb\", p = \"?a\"\n//Output: false\n//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat\n//ch 'b'.\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= s.length, p.length <= 2000 \n// s contains only lowercase English letters. \n// p contains only lowercase English letters, '?' or '*'. \n// \n// Related Topics String Dynamic Programming Greedy Recursion \n// 👍 5102 👎 226\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        //dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况\n        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];\n        dp[0][0] = true;\n        for(int i = 1; i <= p.length(); i++){\n            if(p.charAt(i - 1) != '*'){\n                break;\n            }\n            dp[0][i] = dp[0][i - 1];\n        }\n\n        for(int sidx = 1; sidx <= s.length(); ++sidx){\n            for(int pidx = 1; pidx <= p.length(); ++pidx){\n                //若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]\n                if(p.charAt(pidx - 1) == s.charAt(sidx - 1) || p.charAt(pidx - 1) == '?'){\n                    dp[sidx][pidx] = dp[sidx - 1][pidx - 1];\n                }\n                //若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;\n                else if(p.charAt(pidx - 1) == '*'){\n                    dp[sidx][pidx] = dp[sidx][pidx - 1] || dp[sidx - 1][pidx];\n                }\n            }\n        }\n        return dp[s.length()][p.length()];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-44.md","raw":"---\ntitle: lc-44\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-11 11:42:50\n---\n\n```java\n//Given an input string (s) and a pattern (p), implement wildcard pattern matchi\n//ng with support for '?' and '*' where: \n//\n// \n// '?' Matches any single character. \n// '*' Matches any sequence of characters (including the empty sequence). \n// \n//\n// The matching should cover the entire input string (not partial). \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"aa\", p = \"a\"\n//Output: false\n//Explanation: \"a\" does not match the entire string \"aa\".\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"aa\", p = \"*\"\n//Output: true\n//Explanation: '*' matches any sequence.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"cb\", p = \"?a\"\n//Output: false\n//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat\n//ch 'b'.\n// \n//\n// \n// Constraints: \n//\n// \n// 0 <= s.length, p.length <= 2000 \n// s contains only lowercase English letters. \n// p contains only lowercase English letters, '?' or '*'. \n// \n// Related Topics String Dynamic Programming Greedy Recursion \n// 👍 5102 👎 226\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        //dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况\n        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];\n        dp[0][0] = true;\n        for(int i = 1; i <= p.length(); i++){\n            if(p.charAt(i - 1) != '*'){\n                break;\n            }\n            dp[0][i] = dp[0][i - 1];\n        }\n\n        for(int sidx = 1; sidx <= s.length(); ++sidx){\n            for(int pidx = 1; pidx <= p.length(); ++pidx){\n                //若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]\n                if(p.charAt(pidx - 1) == s.charAt(sidx - 1) || p.charAt(pidx - 1) == '?'){\n                    dp[sidx][pidx] = dp[sidx - 1][pidx - 1];\n                }\n                //若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;\n                else if(p.charAt(pidx - 1) == '*'){\n                    dp[sidx][pidx] = dp[sidx][pidx - 1] || dp[sidx - 1][pidx];\n                }\n            }\n        }\n        return dp[s.length()][p.length()];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-44","published":1,"updated":"2022-11-22T11:52:38.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzq004r3suub4nm30ev","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an input string (s) and a pattern (p), implement wildcard pattern matchi</span>\n<span class=\"token comment\">//ng with support for '?' and '*' where: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// '?' Matches any single character. </span>\n<span class=\"token comment\">// '*' Matches any sequence of characters (including the empty sequence). </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The matching should cover the entire input string (not partial). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: \"a\" does not match the entire string \"aa\".</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"*\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: '*' matches any sequence.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"cb\", p = \"?a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat</span>\n<span class=\"token comment\">//ch 'b'.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= s.length, p.length &lt;= 2000 </span>\n<span class=\"token comment\">// s contains only lowercase English letters. </span>\n<span class=\"token comment\">// p contains only lowercase English letters, '?' or '*'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Greedy Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 226</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> sidx <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>sidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pidx <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">//若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an input string (s) and a pattern (p), implement wildcard pattern matchi</span>\n<span class=\"token comment\">//ng with support for '?' and '*' where: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// '?' Matches any single character. </span>\n<span class=\"token comment\">// '*' Matches any sequence of characters (including the empty sequence). </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The matching should cover the entire input string (not partial). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: \"a\" does not match the entire string \"aa\".</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"aa\", p = \"*\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: '*' matches any sequence.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"cb\", p = \"?a\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: '?' matches 'c', but the second letter is 'a', which does not mat</span>\n<span class=\"token comment\">//ch 'b'.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= s.length, p.length &lt;= 2000 </span>\n<span class=\"token comment\">// s contains only lowercase English letters. </span>\n<span class=\"token comment\">// p contains only lowercase English letters, '?' or '*'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming Greedy Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 226</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//dp[sidx][pidx]代表长为sidx的s的子串与长为pidx的p的子串的匹配情况</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> sidx <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>sidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pidx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pidx <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>pidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//若当前字符匹配或者p串字符为‘？’，dp[sidx][pidx]取决于dp[sidx - 1][pidx - 1]</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//若当前p串字符为‘*’，dp[sidx][pidx]取决于dp[sidx][pidx - 1]（出现0次）或者dp[sidx - 1][pidx]（出现多次）;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>sidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>sidx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-448","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-26T03:19:19.000Z","_content":"\n```java\n/**\nGiven an array nums of n integers where nums[i] is in the range [1, n], return \nan array of all the integers in the range [1, n] that do not appear in nums. \n\n \n Example 1: \n Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n Example 2: \n Input: nums = [1,1]\nOutput: [2]\n \n \n Constraints: \n\n \n n == nums.length \n 1 <= n <= 10⁵ \n 1 <= nums[i] <= n \n \n\n \n Follow up: Could you do it without extra space and in O(n) runtime? You may \nassume the returned list does not count as extra space. \n Related Topics数组 | 哈希表 \n\n 👍 1107, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        List<Integer> result = new ArrayList<>();\n\n        int num = nums.length;\n\n        for (int i = 0; i < num; i++) {\n            int index = (nums[i] - 1) % num;\n            nums[index] = nums[index] + num;\n        }\n\n        for (int i = 0; i < num; i++) {\n            if (nums[i] <= num) {\n                result.add(i + 1);\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-448.md","raw":"---\ntitle: lc-448\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-26 11:19:19\n---\n\n```java\n/**\nGiven an array nums of n integers where nums[i] is in the range [1, n], return \nan array of all the integers in the range [1, n] that do not appear in nums. \n\n \n Example 1: \n Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n Example 2: \n Input: nums = [1,1]\nOutput: [2]\n \n \n Constraints: \n\n \n n == nums.length \n 1 <= n <= 10⁵ \n 1 <= nums[i] <= n \n \n\n \n Follow up: Could you do it without extra space and in O(n) runtime? You may \nassume the returned list does not count as extra space. \n Related Topics数组 | 哈希表 \n\n 👍 1107, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        List<Integer> result = new ArrayList<>();\n\n        int num = nums.length;\n\n        for (int i = 0; i < num; i++) {\n            int index = (nums[i] - 1) % num;\n            nums[index] = nums[index] + num;\n        }\n\n        for (int i = 0; i < num; i++) {\n            if (nums[i] <= num) {\n                result.add(i + 1);\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-448","published":1,"updated":"2022-10-26T03:57:07.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzq004u3suu7pmsbrtr","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array nums of n integers where nums[i] is in the range [1, n], return \nan array of all the integers in the range [1, n] that do not appear in nums. \n\n \n Example 1: \n Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n Example 2: \n Input: nums = [1,1]\nOutput: [2]\n \n \n Constraints: \n\n \n n == nums.length \n 1 &lt;= n &lt;= 10⁵ \n 1 &lt;= nums[i] &lt;= n \n \n\n \n Follow up: Could you do it without extra space and in O(n) runtime? You may \nassume the returned list does not count as extra space. \n Related Topics数组 | 哈希表 \n\n 👍 1107, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> num<span class=\"token punctuation\">;</span>\n            nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array nums of n integers where nums[i] is in the range [1, n], return \nan array of all the integers in the range [1, n] that do not appear in nums. \n\n \n Example 1: \n Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n Example 2: \n Input: nums = [1,1]\nOutput: [2]\n \n \n Constraints: \n\n \n n == nums.length \n 1 &lt;= n &lt;= 10⁵ \n 1 &lt;= nums[i] &lt;= n \n \n\n \n Follow up: Could you do it without extra space and in O(n) runtime? You may \nassume the returned list does not count as extra space. \n Related Topics数组 | 哈希表 \n\n 👍 1107, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDisappearedNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> num<span class=\"token punctuation\">;</span>\n            nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-46","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-12T02:30:28.000Z","_content":"\n```java\n//Given an array nums of distinct integers, return all the possible permutations\n//. You can return the answer in any order. \n//\n// \n// Example 1: \n// Input: nums = [1,2,3]\n//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n// Example 2: \n// Input: nums = [0,1]\n//Output: [[0,1],[1,0]]\n// Example 3: \n// Input: nums = [1]\n//Output: [[1]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 6 \n// -10 <= nums[i] <= 10 \n// All the integers of nums are unique. \n// \n// Related Topics Array Backtracking \n// 👍 11542 👎 205\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> results = new ArrayList<>();\n        List<Integer> curResult = new ArrayList<>();\n        getNext(results, curResult, new boolean[nums.length], nums);\n        return results;\n    }\n\n    private void getNext(List<List<Integer>> results, List<Integer> curResult, boolean[] visited, int[] nums) {\n        if (curResult.size() == nums.length) {\n            List<Integer> oneR = new ArrayList<>(curResult);\n            results.add(oneR);\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            if (!visited[i]) {\n                curResult.add(nums[i]);\n                visited[i] = true;\n                getNext(results, curResult, visited, nums);\n                curResult.remove(curResult.size() - 1);\n                visited[i] = false;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-46.md","raw":"---\ntitle: lc-46\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-12 10:30:28\n---\n\n```java\n//Given an array nums of distinct integers, return all the possible permutations\n//. You can return the answer in any order. \n//\n// \n// Example 1: \n// Input: nums = [1,2,3]\n//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n// Example 2: \n// Input: nums = [0,1]\n//Output: [[0,1],[1,0]]\n// Example 3: \n// Input: nums = [1]\n//Output: [[1]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 6 \n// -10 <= nums[i] <= 10 \n// All the integers of nums are unique. \n// \n// Related Topics Array Backtracking \n// 👍 11542 👎 205\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> results = new ArrayList<>();\n        List<Integer> curResult = new ArrayList<>();\n        getNext(results, curResult, new boolean[nums.length], nums);\n        return results;\n    }\n\n    private void getNext(List<List<Integer>> results, List<Integer> curResult, boolean[] visited, int[] nums) {\n        if (curResult.size() == nums.length) {\n            List<Integer> oneR = new ArrayList<>(curResult);\n            results.add(oneR);\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            if (!visited[i]) {\n                curResult.add(nums[i]);\n                visited[i] = true;\n                getNext(results, curResult, visited, nums);\n                curResult.remove(curResult.size() - 1);\n                visited[i] = false;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-46","published":1,"updated":"2022-07-12T02:51:17.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzr004x3suu07lg860h","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums of distinct integers, return all the possible permutations</span>\n<span class=\"token comment\">//. You can return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [0,1]</span>\n<span class=\"token comment\">//Output: [[0,1],[1,0]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1]</span>\n<span class=\"token comment\">//Output: [[1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 6 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the integers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking </span>\n<span class=\"token comment\">// 👍 11542 👎 205</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> results<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums of distinct integers, return all the possible permutations</span>\n<span class=\"token comment\">//. You can return the answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: nums = [0,1]</span>\n<span class=\"token comment\">//Output: [[0,1],[1,0]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: nums = [1]</span>\n<span class=\"token comment\">//Output: [[1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 6 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the integers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking </span>\n<span class=\"token comment\">// 👍 11542 👎 205</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> results<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curResult<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneR <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> curResult<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curResult<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curResult<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-48","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-13T03:20:28.000Z","_content":"\n```java\n//You are given an n x n 2D matrix representing an image, rotate the image by 90\n// degrees (clockwise). \n//\n// You have to rotate the image in-place, which means you have to modify the inp\n//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [[7,4,1],[8,5,2],[9,6,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n// \n//\n// \n// Constraints: \n//\n// \n// n == matrix.length == matrix[i].length \n// 1 <= n <= 20 \n// -1000 <= matrix[i][j] <= 1000 \n// \n// Related Topics Array Math Matrix \n// 👍 10162 👎 521\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void rotate(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return;\n        }\n\n        int i = 0, j = matrix.length - 1;\n\n        while (i < j) {\n            for (int k = 0; k < matrix[0].length; k++) {\n                int temp = matrix[i][k];\n                matrix[i][k] = matrix[j][k];\n                matrix[j][k] = temp;\n            }\n            i++;\n            j--;\n        }\n\n        for (i = 1; i < matrix.length; i++) {\n            for (j = 0; j < i; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-48.md","raw":"---\ntitle: lc-48\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-13 11:20:28\n---\n\n```java\n//You are given an n x n 2D matrix representing an image, rotate the image by 90\n// degrees (clockwise). \n//\n// You have to rotate the image in-place, which means you have to modify the inp\n//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [[7,4,1],[8,5,2],[9,6,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n// \n//\n// \n// Constraints: \n//\n// \n// n == matrix.length == matrix[i].length \n// 1 <= n <= 20 \n// -1000 <= matrix[i][j] <= 1000 \n// \n// Related Topics Array Math Matrix \n// 👍 10162 👎 521\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void rotate(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return;\n        }\n\n        int i = 0, j = matrix.length - 1;\n\n        while (i < j) {\n            for (int k = 0; k < matrix[0].length; k++) {\n                int temp = matrix[i][k];\n                matrix[i][k] = matrix[j][k];\n                matrix[j][k] = temp;\n            }\n            i++;\n            j--;\n        }\n\n        for (i = 1; i < matrix.length; i++) {\n            for (j = 0; j < i; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-48","published":1,"updated":"2022-07-13T08:17:51.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzr00503suu8vgt2k69","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an n x n 2D matrix representing an image, rotate the image by 90</span>\n<span class=\"token comment\">// degrees (clockwise). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You have to rotate the image in-place, which means you have to modify the inp</span>\n<span class=\"token comment\">//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [[7,4,1],[8,5,2],[9,6,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span>\n<span class=\"token comment\">//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == matrix.length == matrix[i].length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 20 </span>\n<span class=\"token comment\">// -1000 &lt;= matrix[i][j] &lt;= 1000 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math Matrix </span>\n<span class=\"token comment\">// 👍 10162 👎 521</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an n x n 2D matrix representing an image, rotate the image by 90</span>\n<span class=\"token comment\">// degrees (clockwise). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You have to rotate the image in-place, which means you have to modify the inp</span>\n<span class=\"token comment\">//ut 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [[7,4,1],[8,5,2],[9,6,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span>\n<span class=\"token comment\">//Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == matrix.length == matrix[i].length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 20 </span>\n<span class=\"token comment\">// -1000 &lt;= matrix[i][j] &lt;= 1000 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math Matrix </span>\n<span class=\"token comment\">// 👍 10162 👎 521</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-36","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-07-04T02:54:59.000Z","_content":"\n```java\n//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v\n//alidated according to the following rules: \n//\n// \n// Each row must contain the digits 1-9 without repetition. \n// Each column must contain the digits 1-9 without repetition. \n// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with\n//out repetition. \n// \n//\n// Note: \n//\n// \n// A Sudoku board (partially filled) could be valid but is not necessarily solva\n//ble. \n// Only the filled cells need to be validated according to the mentioned rules. \n//\n// \n//\n// \n// Example 1: \n//\n// \n//Input: board = \n//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: board = \n//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: false\n//Explanation: Same as Example 1, except with the 5 in the top left corner being\n// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval\n//id.\n// \n//\n// \n// Constraints: \n//\n// \n// board.length == 9 \n// board[i].length == 9 \n// board[i][j] is a digit 1-9 or '.'. \n// \n// Related Topics Array Hash Table Matrix \n// 👍 5534 👎 753\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValidSudoku(char[][] board) {\n        for (int i = 0; i < 9; i++) {\n            if (!isValid(board, i, 0) || !isValid(board, i, 1) || !isValid(board, i, 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private boolean isValid(char[][] board, int index, int mode) {\n        boolean[] isOccupied = new boolean[9];\n\n        for (int i = 0; i < 9; i++) {\n            char ch = 0;\n\n            if (mode == 0) {\n                ch = board[index][i];\n            } else if (mode == 1) {\n                ch = board[i][index];\n            } else {\n                ch = board[index/3*3 + i / 3][index % 3 * 3 + i % 3];\n            }\n\n            if (ch == '.') {\n                continue;\n            } else {\n                int chIn = ch - '1';\n\n                if (chIn < 0 || chIn > 8) {\n                    return false;\n                } else if (isOccupied[chIn]) {\n                    return false;\n                } else {\n                    isOccupied[chIn] = true;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-36.md","raw":"---\ntitle: lc-36\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-04 10:54:59\n---\n\n```java\n//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v\n//alidated according to the following rules: \n//\n// \n// Each row must contain the digits 1-9 without repetition. \n// Each column must contain the digits 1-9 without repetition. \n// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with\n//out repetition. \n// \n//\n// Note: \n//\n// \n// A Sudoku board (partially filled) could be valid but is not necessarily solva\n//ble. \n// Only the filled cells need to be validated according to the mentioned rules. \n//\n// \n//\n// \n// Example 1: \n//\n// \n//Input: board = \n//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: board = \n//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n//Output: false\n//Explanation: Same as Example 1, except with the 5 in the top left corner being\n// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval\n//id.\n// \n//\n// \n// Constraints: \n//\n// \n// board.length == 9 \n// board[i].length == 9 \n// board[i][j] is a digit 1-9 or '.'. \n// \n// Related Topics Array Hash Table Matrix \n// 👍 5534 👎 753\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isValidSudoku(char[][] board) {\n        for (int i = 0; i < 9; i++) {\n            if (!isValid(board, i, 0) || !isValid(board, i, 1) || !isValid(board, i, 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private boolean isValid(char[][] board, int index, int mode) {\n        boolean[] isOccupied = new boolean[9];\n\n        for (int i = 0; i < 9; i++) {\n            char ch = 0;\n\n            if (mode == 0) {\n                ch = board[index][i];\n            } else if (mode == 1) {\n                ch = board[i][index];\n            } else {\n                ch = board[index/3*3 + i / 3][index % 3 * 3 + i % 3];\n            }\n\n            if (ch == '.') {\n                continue;\n            } else {\n                int chIn = ch - '1';\n\n                if (chIn < 0 || chIn > 8) {\n                    return false;\n                } else if (isOccupied[chIn]) {\n                    return false;\n                } else {\n                    isOccupied[chIn] = true;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-36","published":1,"updated":"2023-02-01T13:20:35.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzs00533suu02sg88yz","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v</span>\n<span class=\"token comment\">//alidated according to the following rules: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Each row must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each column must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with</span>\n<span class=\"token comment\">//out repetition. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A Sudoku board (partially filled) could be valid but is not necessarily solva</span>\n<span class=\"token comment\">//ble. </span>\n<span class=\"token comment\">// Only the filled cells need to be validated according to the mentioned rules. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: Same as Example 1, except with the 5 in the top left corner being</span>\n<span class=\"token comment\">// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval</span>\n<span class=\"token comment\">//id.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// board.length == 9 </span>\n<span class=\"token comment\">// board[i].length == 9 </span>\n<span class=\"token comment\">// board[i][j] is a digit 1-9 or '.'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 5534 👎 753</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isOccupied <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> chIn <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chIn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> chIn <span class=\"token operator\">&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v</span>\n<span class=\"token comment\">//alidated according to the following rules: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Each row must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each column must contain the digits 1-9 without repetition. </span>\n<span class=\"token comment\">// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with</span>\n<span class=\"token comment\">//out repetition. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A Sudoku board (partially filled) could be valid but is not necessarily solva</span>\n<span class=\"token comment\">//ble. </span>\n<span class=\"token comment\">// Only the filled cells need to be validated according to the mentioned rules. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = </span>\n<span class=\"token comment\">//[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]</span>\n<span class=\"token comment\">//,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]</span>\n<span class=\"token comment\">//,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]</span>\n<span class=\"token comment\">//,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]</span>\n<span class=\"token comment\">//,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]</span>\n<span class=\"token comment\">//,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: Same as Example 1, except with the 5 in the top left corner being</span>\n<span class=\"token comment\">// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval</span>\n<span class=\"token comment\">//id.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// board.length == 9 </span>\n<span class=\"token comment\">// board[i].length == 9 </span>\n<span class=\"token comment\">// board[i][j] is a digit 1-9 or '.'. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 5534 👎 753</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isOccupied <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                ch <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>index<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> chIn <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chIn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> chIn <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    isOccupied<span class=\"token punctuation\">[</span>chIn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-49","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-18T11:53:03.000Z","_content":"\n```java\n//Given an array of strings strs, group the anagrams together. You can return th\n//e answer in any order. \n//\n// An Anagram is a word or phrase formed by rearranging the letters of a differe\n//nt word or phrase, typically using all the original letters exactly once. \n//\n// \n// Example 1: \n// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n// Example 2: \n// Input: strs = [\"\"]\n//Output: [[\"\"]]\n// Example 3: \n// Input: strs = [\"a\"]\n//Output: [[\"a\"]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= strs.length <= 104 \n// 0 <= strs[i].length <= 100 \n// strs[i] consists of lowercase English letters. \n// \n// Related Topics Array Hash Table String Sorting \n// 👍 10416 👎 338\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> resultMap = new HashMap<>();\n\n        for (String str : strs) {\n            String key = generateKey(str);\n            resultMap.putIfAbsent(key, new ArrayList<>());\n            resultMap.get(key).add(str);\n        }\n\n        return new ArrayList<>(resultMap.values());\n    }\n\n    private String generateKey(String str) {\n        int[] nums = new int[26];\n\n        for (char ch : str.toCharArray()) {\n            nums[ch - 'a']++;\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < 26; i++) {\n            stringBuilder.append('a' + i).append(nums[i]);\n        }\n\n        return stringBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-49.md","raw":"---\ntitle: lc-49\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-18 19:53:03\n---\n\n```java\n//Given an array of strings strs, group the anagrams together. You can return th\n//e answer in any order. \n//\n// An Anagram is a word or phrase formed by rearranging the letters of a differe\n//nt word or phrase, typically using all the original letters exactly once. \n//\n// \n// Example 1: \n// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n// Example 2: \n// Input: strs = [\"\"]\n//Output: [[\"\"]]\n// Example 3: \n// Input: strs = [\"a\"]\n//Output: [[\"a\"]]\n// \n// \n// Constraints: \n//\n// \n// 1 <= strs.length <= 104 \n// 0 <= strs[i].length <= 100 \n// strs[i] consists of lowercase English letters. \n// \n// Related Topics Array Hash Table String Sorting \n// 👍 10416 👎 338\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> resultMap = new HashMap<>();\n\n        for (String str : strs) {\n            String key = generateKey(str);\n            resultMap.putIfAbsent(key, new ArrayList<>());\n            resultMap.get(key).add(str);\n        }\n\n        return new ArrayList<>(resultMap.values());\n    }\n\n    private String generateKey(String str) {\n        int[] nums = new int[26];\n\n        for (char ch : str.toCharArray()) {\n            nums[ch - 'a']++;\n        }\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < 26; i++) {\n            stringBuilder.append('a' + i).append(nums[i]);\n        }\n\n        return stringBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-49","published":1,"updated":"2022-07-18T12:12:06.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzt00563suudv6i1ypx","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of strings strs, group the anagrams together. You can return th</span>\n<span class=\"token comment\">//e answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An Anagram is a word or phrase formed by rearranging the letters of a differe</span>\n<span class=\"token comment\">//nt word or phrase, typically using all the original letters exactly once. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]</span>\n<span class=\"token comment\">//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: strs = [\"\"]</span>\n<span class=\"token comment\">//Output: [[\"\"]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: strs = [\"a\"]</span>\n<span class=\"token comment\">//Output: [[\"a\"]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= strs.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= strs[i].length &lt;= 100 </span>\n<span class=\"token comment\">// strs[i] consists of lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table String Sorting </span>\n<span class=\"token comment\">// 👍 10416 👎 338</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of strings strs, group the anagrams together. You can return th</span>\n<span class=\"token comment\">//e answer in any order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// An Anagram is a word or phrase formed by rearranging the letters of a differe</span>\n<span class=\"token comment\">//nt word or phrase, typically using all the original letters exactly once. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">// Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]</span>\n<span class=\"token comment\">//Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">// Input: strs = [\"\"]</span>\n<span class=\"token comment\">//Output: [[\"\"]]</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">// Input: strs = [\"a\"]</span>\n<span class=\"token comment\">//Output: [[\"a\"]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= strs.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= strs[i].length &lt;= 100 </span>\n<span class=\"token comment\">// strs[i] consists of lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table String Sorting </span>\n<span class=\"token comment\">// 👍 10416 👎 338</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-53","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-20T05:05:26.000Z","_content":"\n```java\n//Given an integer array nums, find the contiguous subarray (containing at least\n// one number) which has the largest sum and return its sum. \n//\n// A subarray is a contiguous part of an array. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n//Output: 6\n//Explanation: [4,-1,2,1] has the largest sum = 6.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [1]\n//Output: 1\n// \n//\n// Example 3: \n//\n// \n//Input: nums = [5,4,-1,7,8]\n//Output: 23\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 105 \n// -104 <= nums[i] <= 104 \n// \n//\n// \n// Follow up: If you have figured out the O(n) solution, try coding another solu\n//tion using the divide and conquer approach, which is more subtle. \n// Related Topics Array Divide and Conquer Dynamic Programming \n// 👍 22902 👎 1114\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        int result = Integer.MIN_VALUE;\n        int curSum = 0;\n\n        for (int num : nums) {\n            curSum += num;\n\n            if (curSum > result) {\n                result = curSum;\n            }\n\n            if (curSum < 0) {\n                curSum = 0;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-53.md","raw":"---\ntitle: lc-53\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-20 13:05:26\n---\n\n```java\n//Given an integer array nums, find the contiguous subarray (containing at least\n// one number) which has the largest sum and return its sum. \n//\n// A subarray is a contiguous part of an array. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n//Output: 6\n//Explanation: [4,-1,2,1] has the largest sum = 6.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [1]\n//Output: 1\n// \n//\n// Example 3: \n//\n// \n//Input: nums = [5,4,-1,7,8]\n//Output: 23\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 105 \n// -104 <= nums[i] <= 104 \n// \n//\n// \n// Follow up: If you have figured out the O(n) solution, try coding another solu\n//tion using the divide and conquer approach, which is more subtle. \n// Related Topics Array Divide and Conquer Dynamic Programming \n// 👍 22902 👎 1114\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        int result = Integer.MIN_VALUE;\n        int curSum = 0;\n\n        for (int num : nums) {\n            curSum += num;\n\n            if (curSum > result) {\n                result = curSum;\n            }\n\n            if (curSum < 0) {\n                curSum = 0;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-53","published":1,"updated":"2022-07-20T07:33:00.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzu00593suud21vamn1","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, find the contiguous subarray (containing at least</span>\n<span class=\"token comment\">// one number) which has the largest sum and return its sum. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A subarray is a contiguous part of an array. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: [4,-1,2,1] has the largest sum = 6.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [5,4,-1,7,8]</span>\n<span class=\"token comment\">//Output: 23</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: If you have figured out the O(n) solution, try coding another solu</span>\n<span class=\"token comment\">//tion using the divide and conquer approach, which is more subtle. </span>\n<span class=\"token comment\">// Related Topics Array Divide and Conquer Dynamic Programming </span>\n<span class=\"token comment\">// 👍 22902 👎 1114</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            curSum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> curSum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums, find the contiguous subarray (containing at least</span>\n<span class=\"token comment\">// one number) which has the largest sum and return its sum. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A subarray is a contiguous part of an array. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: [4,-1,2,1] has the largest sum = 6.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1]</span>\n<span class=\"token comment\">//Output: 1</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [5,4,-1,7,8]</span>\n<span class=\"token comment\">//Output: 23</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 105 </span>\n<span class=\"token comment\">// -104 &lt;= nums[i] &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: If you have figured out the O(n) solution, try coding another solu</span>\n<span class=\"token comment\">//tion using the divide and conquer approach, which is more subtle. </span>\n<span class=\"token comment\">// Related Topics Array Divide and Conquer Dynamic Programming </span>\n<span class=\"token comment\">// 👍 22902 👎 1114</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            curSum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">=</span> curSum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-538","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-27T07:37:49.000Z","_content":"\n```java\n/**\nGiven the root of a Binary Search Tree (BST), convert it to a Greater Tree such \nthat every key of the original BST is changed to the original key plus the sum \nof all keys greater than the original key in BST. \n\n As a reminder, a binary search tree is a tree that satisfies these constraints:\n \n\n \n The left subtree of a node contains only nodes with keys less than the node's \nkey. \n The right subtree of a node contains only nodes with keys greater than the \nnode's key. \n Both the left and right subtrees must also be binary search trees. \n \n\n \n Example 1: \n\n \nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n \n\n Example 2: \n\n \nInput: root = [0,null,1]\nOutput: [1,null,1]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 10⁴]. \n -10⁴ <= Node.val <= 10⁴ \n All the values in the tree are unique. \n root is guaranteed to be a valid binary search tree. \n \n\n \n Note: This question is the same as 1038: https://leetcode.com/problems/binary-\nsearch-tree-to-greater-sum-tree/ \n Related Topics树 | 深度优先搜索 | 二叉搜索树 | 二叉树 \n\n 👍 800, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    public TreeNode convertBST(TreeNode root) {\n        if (root == null) {\n            return root;\n        }\n        Map<TreeNode, Integer> leftSum = new HashMap<>();\n        Map<TreeNode, Integer> rightSum = new HashMap<>();\n\n        getSum(leftSum, rightSum, root);\n        doPlus(rightSum, root, null);\n        return root;\n    }\n\n    private void getSum(Map<TreeNode, Integer> leftSum, Map<TreeNode, Integer> rightSum, TreeNode node) {\n        if (node.left != null) {\n            getSum(leftSum, rightSum, node.left);\n            int total =  leftSum.get(node.left) + rightSum.get(node.left) + node.left.val;\n            leftSum.put(node, total);\n        } else {\n            leftSum.put(node, 0);\n        }\n\n        if (node.right != null) {\n            getSum(leftSum, rightSum, node.right);\n            int total =  leftSum.get(node.right) + rightSum.get(node.right) + node.right.val;\n            rightSum.put(node, total);\n        } else {\n            rightSum.put(node, 0);\n        }\n    }\n\n    private void doPlus(Map<TreeNode, Integer> rightSum, TreeNode node, TreeNode bigFather) {\n        node.val += rightSum.get(node);\n\n        if (bigFather != null) {\n            node.val += bigFather.val;\n        }\n\n        if (node.left != null) {\n            doPlus(rightSum, node.left, node);\n        }\n\n        if (node.right != null) {\n            doPlus(rightSum, node.right, bigFather);\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-538.md","raw":"---\ntitle: lc-538\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-27 15:37:49\n---\n\n```java\n/**\nGiven the root of a Binary Search Tree (BST), convert it to a Greater Tree such \nthat every key of the original BST is changed to the original key plus the sum \nof all keys greater than the original key in BST. \n\n As a reminder, a binary search tree is a tree that satisfies these constraints:\n \n\n \n The left subtree of a node contains only nodes with keys less than the node's \nkey. \n The right subtree of a node contains only nodes with keys greater than the \nnode's key. \n Both the left and right subtrees must also be binary search trees. \n \n\n \n Example 1: \n\n \nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n \n\n Example 2: \n\n \nInput: root = [0,null,1]\nOutput: [1,null,1]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 10⁴]. \n -10⁴ <= Node.val <= 10⁴ \n All the values in the tree are unique. \n root is guaranteed to be a valid binary search tree. \n \n\n \n Note: This question is the same as 1038: https://leetcode.com/problems/binary-\nsearch-tree-to-greater-sum-tree/ \n Related Topics树 | 深度优先搜索 | 二叉搜索树 | 二叉树 \n\n 👍 800, 👎 0 \n\n*/\t\n//leetcode submit region begin(Prohibit modification and deletion)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    public TreeNode convertBST(TreeNode root) {\n        if (root == null) {\n            return root;\n        }\n        Map<TreeNode, Integer> leftSum = new HashMap<>();\n        Map<TreeNode, Integer> rightSum = new HashMap<>();\n\n        getSum(leftSum, rightSum, root);\n        doPlus(rightSum, root, null);\n        return root;\n    }\n\n    private void getSum(Map<TreeNode, Integer> leftSum, Map<TreeNode, Integer> rightSum, TreeNode node) {\n        if (node.left != null) {\n            getSum(leftSum, rightSum, node.left);\n            int total =  leftSum.get(node.left) + rightSum.get(node.left) + node.left.val;\n            leftSum.put(node, total);\n        } else {\n            leftSum.put(node, 0);\n        }\n\n        if (node.right != null) {\n            getSum(leftSum, rightSum, node.right);\n            int total =  leftSum.get(node.right) + rightSum.get(node.right) + node.right.val;\n            rightSum.put(node, total);\n        } else {\n            rightSum.put(node, 0);\n        }\n    }\n\n    private void doPlus(Map<TreeNode, Integer> rightSum, TreeNode node, TreeNode bigFather) {\n        node.val += rightSum.get(node);\n\n        if (bigFather != null) {\n            node.val += bigFather.val;\n        }\n\n        if (node.left != null) {\n            doPlus(rightSum, node.left, node);\n        }\n\n        if (node.right != null) {\n            doPlus(rightSum, node.right, bigFather);\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-538","published":1,"updated":"2022-11-22T11:41:37.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzu005c3suu65rwd9px","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a Binary Search Tree (BST), convert it to a Greater Tree such \nthat every key of the original BST is changed to the original key plus the sum \nof all keys greater than the original key in BST. \n\n As a reminder, a binary search tree is a tree that satisfies these constraints:\n \n\n \n The left subtree of a node contains only nodes with keys less than the node's \nkey. \n The right subtree of a node contains only nodes with keys greater than the \nnode's key. \n Both the left and right subtrees must also be binary search trees. \n \n\n \n Example 1: \n\n \nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n \n\n Example 2: \n\n \nInput: root = [0,null,1]\nOutput: [1,null,1]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 10⁴]. \n -10⁴ &lt;= Node.val &lt;= 10⁴ \n All the values in the tree are unique. \n root is guaranteed to be a valid binary search tree. \n \n\n \n Note: This question is the same as 1038: https://leetcode.com/problems/binary-\nsearch-tree-to-greater-sum-tree/ \n Related Topics树 | 深度优先搜索 | 二叉搜索树 | 二叉树 \n\n 👍 800, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">convertBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> leftSum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> rightSum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>leftSum<span class=\"token punctuation\">,</span> rightSum<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span>rightSum<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> leftSum<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> rightSum<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>leftSum<span class=\"token punctuation\">,</span> rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span>  leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>leftSum<span class=\"token punctuation\">,</span> rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span>  leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> rightSum<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> bigFather<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bigFather <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> bigFather<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span>rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span>rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> bigFather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a Binary Search Tree (BST), convert it to a Greater Tree such \nthat every key of the original BST is changed to the original key plus the sum \nof all keys greater than the original key in BST. \n\n As a reminder, a binary search tree is a tree that satisfies these constraints:\n \n\n \n The left subtree of a node contains only nodes with keys less than the node's \nkey. \n The right subtree of a node contains only nodes with keys greater than the \nnode's key. \n Both the left and right subtrees must also be binary search trees. \n \n\n \n Example 1: \n\n \nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n \n\n Example 2: \n\n \nInput: root = [0,null,1]\nOutput: [1,null,1]\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [0, 10⁴]. \n -10⁴ &lt;= Node.val &lt;= 10⁴ \n All the values in the tree are unique. \n root is guaranteed to be a valid binary search tree. \n \n\n \n Note: This question is the same as 1038: https://leetcode.com/problems/binary-\nsearch-tree-to-greater-sum-tree/ \n Related Topics树 | 深度优先搜索 | 二叉搜索树 | 二叉树 \n\n 👍 800, 👎 0 \n\n*/</span>\t\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">convertBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> leftSum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rightSum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>leftSum<span class=\"token punctuation\">,</span> rightSum<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span>rightSum<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> leftSum<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rightSum<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>leftSum<span class=\"token punctuation\">,</span> rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span>  leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>leftSum<span class=\"token punctuation\">,</span> rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span>  leftSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rightSum<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> bigFather<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> rightSum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bigFather <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> bigFather<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span>rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">doPlus</span><span class=\"token punctuation\">(</span>rightSum<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> bigFather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-29","author":"倪春恩","top":false,"hide":false,"cover":false,"toc":false,"date":"2022-06-28T03:51:03.000Z","_content":"\n```java\n//Given two integers dividend and divisor, divide two integers without using mul\n//tiplication, division, and mod operator. \n//\n// The integer division should truncate toward zero, which means losing its frac\n//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr\n//uncated to -2. \n//\n// Return the quotient after dividing dividend by divisor. \n//\n// Note: Assume we are dealing with an environment that could only store integer\n//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if \n//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q\n//uotient is strictly less than -231, then return -231. \n//\n// \n// Example 1: \n//\n// \n//Input: dividend = 10, divisor = 3\n//Output: 3\n//Explanation: 10/3 = 3.33333.. which is truncated to 3.\n// \n//\n// Example 2: \n//\n// \n//Input: dividend = 7, divisor = -3\n//Output: -2\n//Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n// \n//\n// \n// Constraints: \n//\n// \n// -231 <= dividend, divisor <= 231 - 1 \n// divisor != 0 \n// \n// Related Topics Math Bit Manipulation \n// 👍 3208 👎 10948\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int divide(int dividend, int divisor) {\n        boolean minus = (dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0);\n\n        if (divisor == 1) {\n            return dividend;\n        }\n\n        long dividendLong = (long)dividend;\n        long divisorLong = (long)divisor;\n\n\n        if (dividend == Integer.MIN_VALUE && divisor == -1) {\n            return Integer.MAX_VALUE;\n        }\n\n\n        if (dividend < 0) {\n            dividendLong = -dividendLong;\n        }\n\n        if (divisor < 0) {\n            divisorLong = -divisorLong;\n        }\n\n        long times = 1l;\n        int result = 0;\n\n        while (divisorLong < dividendLong && divisorLong < Integer.MAX_VALUE) {\n            divisorLong = divisorLong << 1;\n            times = times << 1;\n        }\n\n        if (divisorLong > dividendLong) {\n            divisorLong = divisorLong >> 1;\n            times = times >> 1;\n        }\n\n        while (times > 0) {\n            if (dividendLong >= divisorLong) {\n                dividendLong -= divisorLong;\n                result+=times;\n            }\n\n            if (dividendLong < divisorLong) {\n                divisorLong = divisorLong >> 1;\n                times = times >> 1;\n            }\n        }\n        if (minus) {\n            return -result;\n        } else {\n            return result;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","source":"_posts/lc-29.md","raw":"---\ntitle: lc-29\nauthor: 倪春恩\ntop: false\nhide: false\ncover: false\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-06-28 11:51:03\n---\n\n```java\n//Given two integers dividend and divisor, divide two integers without using mul\n//tiplication, division, and mod operator. \n//\n// The integer division should truncate toward zero, which means losing its frac\n//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr\n//uncated to -2. \n//\n// Return the quotient after dividing dividend by divisor. \n//\n// Note: Assume we are dealing with an environment that could only store integer\n//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if \n//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q\n//uotient is strictly less than -231, then return -231. \n//\n// \n// Example 1: \n//\n// \n//Input: dividend = 10, divisor = 3\n//Output: 3\n//Explanation: 10/3 = 3.33333.. which is truncated to 3.\n// \n//\n// Example 2: \n//\n// \n//Input: dividend = 7, divisor = -3\n//Output: -2\n//Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n// \n//\n// \n// Constraints: \n//\n// \n// -231 <= dividend, divisor <= 231 - 1 \n// divisor != 0 \n// \n// Related Topics Math Bit Manipulation \n// 👍 3208 👎 10948\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int divide(int dividend, int divisor) {\n        boolean minus = (dividend > 0 && divisor < 0) || (dividend < 0 && divisor > 0);\n\n        if (divisor == 1) {\n            return dividend;\n        }\n\n        long dividendLong = (long)dividend;\n        long divisorLong = (long)divisor;\n\n\n        if (dividend == Integer.MIN_VALUE && divisor == -1) {\n            return Integer.MAX_VALUE;\n        }\n\n\n        if (dividend < 0) {\n            dividendLong = -dividendLong;\n        }\n\n        if (divisor < 0) {\n            divisorLong = -divisorLong;\n        }\n\n        long times = 1l;\n        int result = 0;\n\n        while (divisorLong < dividendLong && divisorLong < Integer.MAX_VALUE) {\n            divisorLong = divisorLong << 1;\n            times = times << 1;\n        }\n\n        if (divisorLong > dividendLong) {\n            divisorLong = divisorLong >> 1;\n            times = times >> 1;\n        }\n\n        while (times > 0) {\n            if (dividendLong >= divisorLong) {\n                dividendLong -= divisorLong;\n                result+=times;\n            }\n\n            if (dividendLong < divisorLong) {\n                divisorLong = divisorLong >> 1;\n                times = times >> 1;\n            }\n        }\n        if (minus) {\n            return -result;\n        } else {\n            return result;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n","slug":"lc-29","published":1,"updated":"2023-02-01T13:20:28.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzv005f3suuawhe5l9j","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two integers dividend and divisor, divide two integers without using mul</span>\n<span class=\"token comment\">//tiplication, division, and mod operator. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The integer division should truncate toward zero, which means losing its frac</span>\n<span class=\"token comment\">//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr</span>\n<span class=\"token comment\">//uncated to -2. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the quotient after dividing dividend by divisor. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: Assume we are dealing with an environment that could only store integer</span>\n<span class=\"token comment\">//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if </span>\n<span class=\"token comment\">//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q</span>\n<span class=\"token comment\">//uotient is strictly less than -231, then return -231. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 10, divisor = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: 10/3 = 3.33333.. which is truncated to 3.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 7, divisor = -3</span>\n<span class=\"token comment\">//Output: -2</span>\n<span class=\"token comment\">//Explanation: 7/-3 = -2.33333.. which is truncated to -2.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -231 &lt;= dividend, divisor &lt;= 231 - 1 </span>\n<span class=\"token comment\">// divisor != 0 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Bit Manipulation </span>\n<span class=\"token comment\">// 👍 3208 👎 10948</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dividend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> minus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">long</span> dividendLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> divisorLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>divisor<span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dividendLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>dividendLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divisorLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>divisorLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">long</span> times <span class=\"token operator\">=</span> <span class=\"token number\">1l</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">&lt;</span> dividendLong <span class=\"token operator\">&amp;&amp;</span> divisorLong <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">&gt;</span> dividendLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>times <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">&gt;=</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dividendLong <span class=\"token operator\">-=</span> divisorLong<span class=\"token punctuation\">;</span>\n                result<span class=\"token operator\">+=</span>times<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">&lt;</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                times <span class=\"token operator\">=</span> times <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two integers dividend and divisor, divide two integers without using mul</span>\n<span class=\"token comment\">//tiplication, division, and mod operator. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The integer division should truncate toward zero, which means losing its frac</span>\n<span class=\"token comment\">//tional part. For example, 8.345 would be truncated to 8, and -2.7335 would be tr</span>\n<span class=\"token comment\">//uncated to -2. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return the quotient after dividing dividend by divisor. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: Assume we are dealing with an environment that could only store integer</span>\n<span class=\"token comment\">//s within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if </span>\n<span class=\"token comment\">//the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the q</span>\n<span class=\"token comment\">//uotient is strictly less than -231, then return -231. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 10, divisor = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: 10/3 = 3.33333.. which is truncated to 3.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: dividend = 7, divisor = -3</span>\n<span class=\"token comment\">//Output: -2</span>\n<span class=\"token comment\">//Explanation: 7/-3 = -2.33333.. which is truncated to -2.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -231 &lt;= dividend, divisor &lt;= 231 - 1 </span>\n<span class=\"token comment\">// divisor != 0 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Bit Manipulation </span>\n<span class=\"token comment\">// 👍 3208 👎 10948</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dividend<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> divisor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> minus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">long</span> dividendLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>dividend<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> divisorLong <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>divisor<span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE <span class=\"token operator\">&amp;&amp;</span> divisor <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividend <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dividendLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>dividendLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisor <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            divisorLong <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>divisorLong<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">long</span> times <span class=\"token operator\">=</span> <span class=\"token number\">1l</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">&lt;</span> dividendLong <span class=\"token operator\">&amp;&amp;</span> divisorLong <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>divisorLong <span class=\"token operator\">></span> dividendLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            times <span class=\"token operator\">=</span> times <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>times <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">>=</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                dividendLong <span class=\"token operator\">-=</span> divisorLong<span class=\"token punctuation\">;</span>\n                result<span class=\"token operator\">+=</span>times<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dividendLong <span class=\"token operator\">&lt;</span> divisorLong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                divisorLong <span class=\"token operator\">=</span> divisorLong <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                times <span class=\"token operator\">=</span> times <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-50","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-19T02:34:30.000Z","_content":"\n```java\n//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). \n//\n// \n// Example 1: \n//\n// \n//Input: x = 2.00000, n = 10\n//Output: 1024.00000\n// \n//\n// Example 2: \n//\n// \n//Input: x = 2.10000, n = 3\n//Output: 9.26100\n// \n//\n// Example 3: \n//\n// \n//Input: x = 2.00000, n = -2\n//Output: 0.25000\n//Explanation: 2-2 = 1/22 = 1/4 = 0.25\n// \n//\n// \n// Constraints: \n//\n// \n// -100.0 < x < 100.0 \n// -231 <= n <= 231-1 \n// -104 <= xn <= 104 \n// \n// Related Topics Math Recursion \n// 👍 5102 👎 5875\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double myPow(double x, int n) {\n        if (n == 0 || x == 1.0) {\n            return 1.0;\n        }\n\n        if (n == Integer.MIN_VALUE) {\n            if (x == -1.0) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        }\n\n        boolean isMinus = n < 0;\n\n        if (isMinus) {\n            n = -n;\n        }\n\n        double result = 1.0;\n\n        while (n > 0) {\n            int i = n & 0x01;\n\n            if (i == 1) {\n                result *= x;\n            }\n\n            x = x * x;\n            n = n >> 1;\n        }\n\n        if (isMinus) {\n            result = 1.0 / result;\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-50.md","raw":"---\ntitle: lc-50\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-19 10:34:30\n---\n\n```java\n//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). \n//\n// \n// Example 1: \n//\n// \n//Input: x = 2.00000, n = 10\n//Output: 1024.00000\n// \n//\n// Example 2: \n//\n// \n//Input: x = 2.10000, n = 3\n//Output: 9.26100\n// \n//\n// Example 3: \n//\n// \n//Input: x = 2.00000, n = -2\n//Output: 0.25000\n//Explanation: 2-2 = 1/22 = 1/4 = 0.25\n// \n//\n// \n// Constraints: \n//\n// \n// -100.0 < x < 100.0 \n// -231 <= n <= 231-1 \n// -104 <= xn <= 104 \n// \n// Related Topics Math Recursion \n// 👍 5102 👎 5875\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double myPow(double x, int n) {\n        if (n == 0 || x == 1.0) {\n            return 1.0;\n        }\n\n        if (n == Integer.MIN_VALUE) {\n            if (x == -1.0) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        }\n\n        boolean isMinus = n < 0;\n\n        if (isMinus) {\n            n = -n;\n        }\n\n        double result = 1.0;\n\n        while (n > 0) {\n            int i = n & 0x01;\n\n            if (i == 1) {\n                result *= x;\n            }\n\n            x = x * x;\n            n = n >> 1;\n        }\n\n        if (isMinus) {\n            result = 1.0 / result;\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-50","published":1,"updated":"2022-07-19T06:10:58.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzv005i3suucxyv3mdc","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = 10</span>\n<span class=\"token comment\">//Output: 1024.00000</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.10000, n = 3</span>\n<span class=\"token comment\">//Output: 9.26100</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = -2</span>\n<span class=\"token comment\">//Output: 0.25000</span>\n<span class=\"token comment\">//Explanation: 2-2 = 1/22 = 1/4 = 0.25</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -100.0 &lt; x &lt; 100.0 </span>\n<span class=\"token comment\">// -231 &lt;= n &lt;= 231-1 </span>\n<span class=\"token comment\">// -104 &lt;= xn &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 5875</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">myPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span> isMinus <span class=\"token operator\">=</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">*=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Implement pow(x, n), which calculates x raised to the power n (i.e., xn). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = 10</span>\n<span class=\"token comment\">//Output: 1024.00000</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.10000, n = 3</span>\n<span class=\"token comment\">//Output: 9.26100</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 2.00000, n = -2</span>\n<span class=\"token comment\">//Output: 0.25000</span>\n<span class=\"token comment\">//Explanation: 2-2 = 1/22 = 1/4 = 0.25</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// -100.0 &lt; x &lt; 100.0 </span>\n<span class=\"token comment\">// -231 &lt;= n &lt;= 231-1 </span>\n<span class=\"token comment\">// -104 &lt;= xn &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Recursion </span>\n<span class=\"token comment\">// 👍 5102 👎 5875</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">myPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span> isMinus <span class=\"token operator\">=</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">*=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMinus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-54","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-21T02:05:40.000Z","_content":"\n```java\n//Given an m x n matrix, return all elements of the matrix in spiral order.\n//\n//\n// Example 1:\n//\n//\n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [1,2,3,6,9,8,7,4,5]\n//\n//\n// Example 2:\n//\n//\n//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n//Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n//\n//\n//\n// Constraints:\n//\n//\n// m == matrix.length\n// n == matrix[i].length\n// 1 <= m, n <= 10\n// -100 <= matrix[i][j] <= 100\n//\n// Related Topics Array Matrix Simulation\n// 👍 7991 👎 873\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        int[][] dirs = {{0,1}, {1,0}, {0, -1}, {-1, 0}};\n        if (matrix == null || matrix[0] == null || matrix.length == 0 || matrix[0].length == 0) {\n            return null;\n        }\n\n        boolean[][] visited = new boolean[matrix.length][matrix[0].length];\n        int curDirIndex = 0;\n\n        int i = 0, j = 0;\n        List<Integer> result = new ArrayList<>();\n\n        while (i >= 0 && i < matrix.length && j >= 0 && j < matrix[0].length && !visited[i][j]) {\n            result.add(matrix[i][j]);\n            visited[i][j] = true;\n            curDirIndex = getNextDirIndex(curDirIndex, i, j, matrix, visited);\n            i = i + dirs[curDirIndex][0];\n            j = j + dirs[curDirIndex][1];\n        }\n        return result;\n    }\n\n    private int getNextDirIndex(int curDirIndex, int i, int j, int[][] matrix, boolean[][] visited) {\n        if (curDirIndex == 0 && (j == matrix[0].length - 1 || visited[i][j + 1])) {\n            return 1;\n        } else if (curDirIndex == 1 && (i == matrix.length - 1 || visited[i + 1][j])) {\n            return 2;\n        } else if (curDirIndex == 2 && (j == 0 || visited[i][j - 1])) {\n            return 3;\n        } else if (curDirIndex == 3 && (i == 0 || visited[i - 1][j])) {\n            return 0;\n        } else {\n            return curDirIndex;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-54.md","raw":"---\ntitle: lc-54\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-21 10:05:40\n---\n\n```java\n//Given an m x n matrix, return all elements of the matrix in spiral order.\n//\n//\n// Example 1:\n//\n//\n//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n//Output: [1,2,3,6,9,8,7,4,5]\n//\n//\n// Example 2:\n//\n//\n//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n//Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n//\n//\n//\n// Constraints:\n//\n//\n// m == matrix.length\n// n == matrix[i].length\n// 1 <= m, n <= 10\n// -100 <= matrix[i][j] <= 100\n//\n// Related Topics Array Matrix Simulation\n// 👍 7991 👎 873\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        int[][] dirs = {{0,1}, {1,0}, {0, -1}, {-1, 0}};\n        if (matrix == null || matrix[0] == null || matrix.length == 0 || matrix[0].length == 0) {\n            return null;\n        }\n\n        boolean[][] visited = new boolean[matrix.length][matrix[0].length];\n        int curDirIndex = 0;\n\n        int i = 0, j = 0;\n        List<Integer> result = new ArrayList<>();\n\n        while (i >= 0 && i < matrix.length && j >= 0 && j < matrix[0].length && !visited[i][j]) {\n            result.add(matrix[i][j]);\n            visited[i][j] = true;\n            curDirIndex = getNextDirIndex(curDirIndex, i, j, matrix, visited);\n            i = i + dirs[curDirIndex][0];\n            j = j + dirs[curDirIndex][1];\n        }\n        return result;\n    }\n\n    private int getNextDirIndex(int curDirIndex, int i, int j, int[][] matrix, boolean[][] visited) {\n        if (curDirIndex == 0 && (j == matrix[0].length - 1 || visited[i][j + 1])) {\n            return 1;\n        } else if (curDirIndex == 1 && (i == matrix.length - 1 || visited[i + 1][j])) {\n            return 2;\n        } else if (curDirIndex == 2 && (j == 0 || visited[i][j - 1])) {\n            return 3;\n        } else if (curDirIndex == 3 && (i == 0 || visited[i - 1][j])) {\n            return 0;\n        } else {\n            return curDirIndex;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-54","published":1,"updated":"2022-07-21T05:55:46.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzw005l3suu06697rs9","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n matrix, return all elements of the matrix in spiral order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [1,2,3,6,9,8,7,4,5]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span>\n<span class=\"token comment\">//Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// m == matrix.length</span>\n<span class=\"token comment\">// n == matrix[i].length</span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 10</span>\n<span class=\"token comment\">// -100 &lt;= matrix[i][j] &lt;= 100</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Matrix Simulation</span>\n<span class=\"token comment\">// 👍 7991 👎 873</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curDirIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            curDirIndex <span class=\"token operator\">=</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span>curDirIndex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            j <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curDirIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> curDirIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n matrix, return all elements of the matrix in spiral order.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]</span>\n<span class=\"token comment\">//Output: [1,2,3,6,9,8,7,4,5]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span>\n<span class=\"token comment\">//Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// m == matrix.length</span>\n<span class=\"token comment\">// n == matrix[i].length</span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 10</span>\n<span class=\"token comment\">// -100 &lt;= matrix[i][j] &lt;= 100</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Matrix Simulation</span>\n<span class=\"token comment\">// 👍 7991 👎 873</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dirs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curDirIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            curDirIndex <span class=\"token operator\">=</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span>curDirIndex<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            j <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> dirs<span class=\"token punctuation\">[</span>curDirIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextDirIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curDirIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curDirIndex <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visited<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> curDirIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-42","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-08T03:27:17.000Z","_content":"\n```java\n//Given n non-negative integers representing an elevation map where the width of\n// each bar is 1, compute how much water it can trap after raining. \n//\n// \n// Example 1: \n//\n// \n//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n//Output: 6\n//Explanation: The above elevation map (black section) is represented by array [\n//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are\n// being trapped.\n// \n//\n// Example 2: \n//\n// \n//Input: height = [4,2,0,3,2,5]\n//Output: 9\n// \n//\n// \n// Constraints: \n//\n// \n// n == height.length \n// 1 <= n <= 2 * 104 \n// 0 <= height[i] <= 105 \n// \n// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack \n// 👍 19838 👎 279\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int trap(int[] height) {\n        if (height == null || height.length == 0) {\n            return 0;\n        }\n        int[] leftMax = new int[height.length];\n        int[] rightMax = new int[height.length];\n\n        for (int i = 1; i < height.length; i++) {\n            if (height[i - 1] > leftMax[i - 1]) {\n                leftMax[i] = height[i - 1];\n            } else {\n                leftMax[i] = leftMax[i - 1];\n            }\n        }\n\n        for (int i = height.length - 2; i >= 0; i--) {\n            if (height[i + 1] > rightMax[i + 1]) {\n                rightMax[i] = height[i + 1];\n            } else {\n                rightMax[i] = rightMax[i + 1];\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < height.length; i++) {\n            int lower = Math.min(leftMax[i], rightMax[i]);\n\n            if (height[i] < lower) {\n                result += (lower - height[i]);\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-42.md","raw":"---\ntitle: lc-42\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-08 11:27:17\n---\n\n```java\n//Given n non-negative integers representing an elevation map where the width of\n// each bar is 1, compute how much water it can trap after raining. \n//\n// \n// Example 1: \n//\n// \n//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n//Output: 6\n//Explanation: The above elevation map (black section) is represented by array [\n//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are\n// being trapped.\n// \n//\n// Example 2: \n//\n// \n//Input: height = [4,2,0,3,2,5]\n//Output: 9\n// \n//\n// \n// Constraints: \n//\n// \n// n == height.length \n// 1 <= n <= 2 * 104 \n// 0 <= height[i] <= 105 \n// \n// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack \n// 👍 19838 👎 279\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int trap(int[] height) {\n        if (height == null || height.length == 0) {\n            return 0;\n        }\n        int[] leftMax = new int[height.length];\n        int[] rightMax = new int[height.length];\n\n        for (int i = 1; i < height.length; i++) {\n            if (height[i - 1] > leftMax[i - 1]) {\n                leftMax[i] = height[i - 1];\n            } else {\n                leftMax[i] = leftMax[i - 1];\n            }\n        }\n\n        for (int i = height.length - 2; i >= 0; i--) {\n            if (height[i + 1] > rightMax[i + 1]) {\n                rightMax[i] = height[i + 1];\n            } else {\n                rightMax[i] = rightMax[i + 1];\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < height.length; i++) {\n            int lower = Math.min(leftMax[i], rightMax[i]);\n\n            if (height[i] < lower) {\n                result += (lower - height[i]);\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-42","published":1,"updated":"2022-07-08T05:50:43.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzx005o3suucq7r2pq4","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n non-negative integers representing an elevation map where the width of</span>\n<span class=\"token comment\">// each bar is 1, compute how much water it can trap after raining. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: The above elevation map (black section) is represented by array [</span>\n<span class=\"token comment\">//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are</span>\n<span class=\"token comment\">// being trapped.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [4,2,0,3,2,5]</span>\n<span class=\"token comment\">//Output: 9</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == height.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 2 * 104 </span>\n<span class=\"token comment\">// 0 &lt;= height[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack </span>\n<span class=\"token comment\">// 👍 19838 👎 279</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> leftMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rightMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> lower <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> lower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>lower <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given n non-negative integers representing an elevation map where the width of</span>\n<span class=\"token comment\">// each bar is 1, compute how much water it can trap after raining. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span>\n<span class=\"token comment\">//Output: 6</span>\n<span class=\"token comment\">//Explanation: The above elevation map (black section) is represented by array [</span>\n<span class=\"token comment\">//0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are</span>\n<span class=\"token comment\">// being trapped.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: height = [4,2,0,3,2,5]</span>\n<span class=\"token comment\">//Output: 9</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == height.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 2 * 104 </span>\n<span class=\"token comment\">// 0 &lt;= height[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Dynamic Programming Stack Monotonic Stack </span>\n<span class=\"token comment\">// 👍 19838 👎 279</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> leftMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rightMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> leftMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rightMax<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> lower <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>leftMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> lower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>lower <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-55","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-22T02:38:46.000Z","_content":"\n```java\n//You are given an integer array nums. You are initially positioned at the array\n//'s first index, and each element in the array represents your maximum jump lengt\n//h at that position. \n//\n// Return true if you can reach the last index, or false otherwise. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,3,1,1,4]\n//Output: true\n//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [3,2,1,0,4]\n//Output: false\n//Explanation: You will always arrive at index 3 no matter what. Its maximum jum\n//p length is 0, which makes it impossible to reach the last index.\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 104 \n// 0 <= nums[i] <= 105 \n// \n// Related Topics Array Dynamic Programming Greedy \n// 👍 12064 👎 656\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean canJump(int[] nums) {\n        if (nums == null) {\n            return false;\n        }\n\n        if (nums.length == 0) {\n            return true;\n        }\n\n        int[] maxJump = new int[nums.length];\n\n        for (int i = 0; i < nums.length; i++) {\n            maxJump[i] = i + nums[i];\n        }\n\n        Boolean[] canJumpBool = new Boolean[nums.length];\n\n        return canJumpInner(maxJump, canJumpBool, nums.length - 1);\n    }\n\n\n    private boolean canJumpInner(int[] maxJump, Boolean[] canJumpBool, int index) {\n        if (canJumpBool[index] != null) {\n            return canJumpBool[index];\n        }\n\n        if (index == 0) {\n            canJumpBool[index] = true;\n            return true;\n        }\n\n        for (int i = 0; i < index; i++) {\n            if (maxJump[i] >= index && canJumpInner(maxJump, canJumpBool, i)) {\n                canJumpBool[index] = true;\n                return true;\n            }\n        }\n\n        canJumpBool[index] = false;\n        return false;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-55.md","raw":"---\ntitle: lc-55\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-22 10:38:46\n---\n\n```java\n//You are given an integer array nums. You are initially positioned at the array\n//'s first index, and each element in the array represents your maximum jump lengt\n//h at that position. \n//\n// Return true if you can reach the last index, or false otherwise. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,3,1,1,4]\n//Output: true\n//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [3,2,1,0,4]\n//Output: false\n//Explanation: You will always arrive at index 3 no matter what. Its maximum jum\n//p length is 0, which makes it impossible to reach the last index.\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 104 \n// 0 <= nums[i] <= 105 \n// \n// Related Topics Array Dynamic Programming Greedy \n// 👍 12064 👎 656\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean canJump(int[] nums) {\n        if (nums == null) {\n            return false;\n        }\n\n        if (nums.length == 0) {\n            return true;\n        }\n\n        int[] maxJump = new int[nums.length];\n\n        for (int i = 0; i < nums.length; i++) {\n            maxJump[i] = i + nums[i];\n        }\n\n        Boolean[] canJumpBool = new Boolean[nums.length];\n\n        return canJumpInner(maxJump, canJumpBool, nums.length - 1);\n    }\n\n\n    private boolean canJumpInner(int[] maxJump, Boolean[] canJumpBool, int index) {\n        if (canJumpBool[index] != null) {\n            return canJumpBool[index];\n        }\n\n        if (index == 0) {\n            canJumpBool[index] = true;\n            return true;\n        }\n\n        for (int i = 0; i < index; i++) {\n            if (maxJump[i] >= index && canJumpInner(maxJump, canJumpBool, i)) {\n                canJumpBool[index] = true;\n                return true;\n            }\n        }\n\n        canJumpBool[index] = false;\n        return false;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-55","published":1,"updated":"2022-07-26T03:21:26.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzx005r3suu8mn4do7j","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an integer array nums. You are initially positioned at the array</span>\n<span class=\"token comment\">//'s first index, and each element in the array represents your maximum jump lengt</span>\n<span class=\"token comment\">//h at that position. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return true if you can reach the last index, or false otherwise. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,3,1,1,4]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [3,2,1,0,4]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: You will always arrive at index 3 no matter what. Its maximum jum</span>\n<span class=\"token comment\">//p length is 0, which makes it impossible to reach the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Dynamic Programming Greedy </span>\n<span class=\"token comment\">// 👍 12064 👎 656</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> index <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given an integer array nums. You are initially positioned at the array</span>\n<span class=\"token comment\">//'s first index, and each element in the array represents your maximum jump lengt</span>\n<span class=\"token comment\">//h at that position. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return true if you can reach the last index, or false otherwise. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,3,1,1,4]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">//Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [3,2,1,0,4]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: You will always arrive at index 3 no matter what. Its maximum jum</span>\n<span class=\"token comment\">//p length is 0, which makes it impossible to reach the last index.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 104 </span>\n<span class=\"token comment\">// 0 &lt;= nums[i] &lt;= 105 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Dynamic Programming Greedy </span>\n<span class=\"token comment\">// 👍 12064 👎 656</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxJump<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> canJumpBool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> index <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">canJumpInner</span><span class=\"token punctuation\">(</span>maxJump<span class=\"token punctuation\">,</span> canJumpBool<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        canJumpBool<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-543","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-28T07:45:27.000Z","_content":"\n```java\n/**\nGiven the root of a binary tree, return the length of the diameter of the tree. \n\n\n The diameter of a binary tree is the length of the longest path between any \ntwo nodes in a tree. This path may or may not pass through the root. \n\n The length of a path between two nodes is represented by the number of edges \nbetween them. \n\n \n Example 1: \n\n \nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n \n\n Example 2: \n\n \nInput: root = [1,2]\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 10⁴]. \n -100 <= Node.val <= 100 \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1179, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int diameterOfBinaryTree(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        Map<TreeNode, Integer> rootLenMap = new HashMap<>();\n        Map<TreeNode, Integer> maxLenMap = new HashMap<>();\n\n\n        return getMaxLen(maxLenMap, rootLenMap, root) - 1;\n    }\n\n    private int getRootLen(Map<TreeNode, Integer> rootLenMap, TreeNode root) {\n        int len = 0;\n        if (root != null) {\n            int leftLen = getRootLen(rootLenMap, root.left);\n            int rightLen = getRootLen(rootLenMap, root.right);\n\n            len = Math.max(leftLen, rightLen) + 1;\n        }\n\n        rootLenMap.put(root, len);\n        return len;\n    }\n\n    private int getMaxLen(Map<TreeNode, Integer> maxLenMap, Map<TreeNode, Integer> rootLenMap, TreeNode root) {\n        int len = 0;\n        if (root != null) {\n            int leftLen = getRootLen(rootLenMap, root.left);\n            int rightLen = getRootLen(rootLenMap, root.right);\n\n            int leftMax = getMaxLen(maxLenMap, rootLenMap, root.left);\n            int rightMax = getMaxLen(maxLenMap, rootLenMap, root.right);\n\n            len = Math.max(leftLen + rightLen + 1, Math.max(leftMax, rightMax));\n        }\n\n        maxLenMap.put(root, len);\n        return len;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-543.md","raw":"---\ntitle: lc-543\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-28 15:45:27\n---\n\n```java\n/**\nGiven the root of a binary tree, return the length of the diameter of the tree. \n\n\n The diameter of a binary tree is the length of the longest path between any \ntwo nodes in a tree. This path may or may not pass through the root. \n\n The length of a path between two nodes is represented by the number of edges \nbetween them. \n\n \n Example 1: \n\n \nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n \n\n Example 2: \n\n \nInput: root = [1,2]\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 10⁴]. \n -100 <= Node.val <= 100 \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1179, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int diameterOfBinaryTree(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        Map<TreeNode, Integer> rootLenMap = new HashMap<>();\n        Map<TreeNode, Integer> maxLenMap = new HashMap<>();\n\n\n        return getMaxLen(maxLenMap, rootLenMap, root) - 1;\n    }\n\n    private int getRootLen(Map<TreeNode, Integer> rootLenMap, TreeNode root) {\n        int len = 0;\n        if (root != null) {\n            int leftLen = getRootLen(rootLenMap, root.left);\n            int rightLen = getRootLen(rootLenMap, root.right);\n\n            len = Math.max(leftLen, rightLen) + 1;\n        }\n\n        rootLenMap.put(root, len);\n        return len;\n    }\n\n    private int getMaxLen(Map<TreeNode, Integer> maxLenMap, Map<TreeNode, Integer> rootLenMap, TreeNode root) {\n        int len = 0;\n        if (root != null) {\n            int leftLen = getRootLen(rootLenMap, root.left);\n            int rightLen = getRootLen(rootLenMap, root.right);\n\n            int leftMax = getMaxLen(maxLenMap, rootLenMap, root.left);\n            int rightMax = getMaxLen(maxLenMap, rootLenMap, root.right);\n\n            len = Math.max(leftLen + rightLen + 1, Math.max(leftMax, rightMax));\n        }\n\n        maxLenMap.put(root, len);\n        return len;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-543","published":1,"updated":"2022-10-28T09:48:44.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzy005u3suuezvmcsag","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a binary tree, return the length of the diameter of the tree. \n\n\n The diameter of a binary tree is the length of the longest path between any \ntwo nodes in a tree. This path may or may not pass through the root. \n\n The length of a path between two nodes is represented by the number of edges \nbetween them. \n\n \n Example 1: \n\n \nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n \n\n Example 2: \n\n \nInput: root = [1,2]\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 10⁴]. \n -100 &lt;= Node.val &lt;= 100 \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1179, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> rootLenMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> maxLenMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>maxLenMap<span class=\"token punctuation\">,</span> rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> rootLenMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> leftLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rightLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            len <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftLen<span class=\"token punctuation\">,</span> rightLen<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        rootLenMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> maxLenMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> rootLenMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> leftLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rightLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>maxLenMap<span class=\"token punctuation\">,</span> rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rightMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>maxLenMap<span class=\"token punctuation\">,</span> rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            len <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftLen <span class=\"token operator\">+</span> rightLen <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftMax<span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        maxLenMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven the root of a binary tree, return the length of the diameter of the tree. \n\n\n The diameter of a binary tree is the length of the longest path between any \ntwo nodes in a tree. This path may or may not pass through the root. \n\n The length of a path between two nodes is represented by the number of edges \nbetween them. \n\n \n Example 1: \n\n \nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n \n\n Example 2: \n\n \nInput: root = [1,2]\nOutput: 1\n \n\n \n Constraints: \n\n \n The number of nodes in the tree is in the range [1, 10⁴]. \n -100 &lt;= Node.val &lt;= 100 \n \n Related Topics树 | 深度优先搜索 | 二叉树 \n\n 👍 1179, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">diameterOfBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rootLenMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> maxLenMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>maxLenMap<span class=\"token punctuation\">,</span> rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rootLenMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> leftLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rightLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            len <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftLen<span class=\"token punctuation\">,</span> rightLen<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        rootLenMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> maxLenMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rootLenMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> leftLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rightLen <span class=\"token operator\">=</span> <span class=\"token function\">getRootLen</span><span class=\"token punctuation\">(</span>rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>maxLenMap<span class=\"token punctuation\">,</span> rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> rightMax <span class=\"token operator\">=</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>maxLenMap<span class=\"token punctuation\">,</span> rootLenMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            len <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftLen <span class=\"token operator\">+</span> rightLen <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftMax<span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        maxLenMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-56","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-26T03:20:51.000Z","_content":"\n```java\n//Given an array of intervals where intervals[i] = [starti, endi], merge all ove\n//rlapping intervals, and return an array of the non-overlapping intervals that co\n//ver all the intervals in the input.\n//\n//\n// Example 1:\n//\n//\n//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n//Output: [[1,6],[8,10],[15,18]]\n//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n//\n//\n// Example 2:\n//\n//\n//Input: intervals = [[1,4],[4,5]]\n//Output: [[1,5]]\n//Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n//\n//\n//\n// Constraints:\n//\n//\n// 1 <= intervals.length <= 104\n// intervals[i].length == 2\n// 0 <= starti <= endi <= 104\n//\n// Related Topics Array Sorting\n// 👍 14993 👎 549\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals == null || intervals.length <= 1) {\n            return intervals;\n        }\n\n        Arrays.sort(intervals, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] arr1, int[] arr2) {\n                if (arr1[0] < arr2[0]) {\n                    return -1;\n                } else if (arr1[0] > arr2[0]) {\n                    return 1;\n                } else {\n                    return arr1[1] - arr2[1];\n                }\n            }\n        });\n\n        List<int[]> resultList = new ArrayList<>();\n        int[] curMergedInterval = null;\n\n        for (int[] interval : intervals) {\n            if (curMergedInterval == null) {\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n                continue;\n            }\n\n            if (interval[0] <= curMergedInterval[1]) {\n                if (interval[1] > curMergedInterval[1]) {\n                    curMergedInterval[1] = interval[1];\n                }\n            } else {\n                resultList.add(curMergedInterval);\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n            }\n        }\n\n        resultList.add(curMergedInterval);\n        return resultList.toArray(new int[resultList.size()][]);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-56.md","raw":"---\ntitle: lc-56\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-26 11:20:51\n---\n\n```java\n//Given an array of intervals where intervals[i] = [starti, endi], merge all ove\n//rlapping intervals, and return an array of the non-overlapping intervals that co\n//ver all the intervals in the input.\n//\n//\n// Example 1:\n//\n//\n//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n//Output: [[1,6],[8,10],[15,18]]\n//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n//\n//\n// Example 2:\n//\n//\n//Input: intervals = [[1,4],[4,5]]\n//Output: [[1,5]]\n//Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n//\n//\n//\n// Constraints:\n//\n//\n// 1 <= intervals.length <= 104\n// intervals[i].length == 2\n// 0 <= starti <= endi <= 104\n//\n// Related Topics Array Sorting\n// 👍 14993 👎 549\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals == null || intervals.length <= 1) {\n            return intervals;\n        }\n\n        Arrays.sort(intervals, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] arr1, int[] arr2) {\n                if (arr1[0] < arr2[0]) {\n                    return -1;\n                } else if (arr1[0] > arr2[0]) {\n                    return 1;\n                } else {\n                    return arr1[1] - arr2[1];\n                }\n            }\n        });\n\n        List<int[]> resultList = new ArrayList<>();\n        int[] curMergedInterval = null;\n\n        for (int[] interval : intervals) {\n            if (curMergedInterval == null) {\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n                continue;\n            }\n\n            if (interval[0] <= curMergedInterval[1]) {\n                if (interval[1] > curMergedInterval[1]) {\n                    curMergedInterval[1] = interval[1];\n                }\n            } else {\n                resultList.add(curMergedInterval);\n                curMergedInterval = new int[2];\n                curMergedInterval[0] = interval[0];\n                curMergedInterval[1] = interval[1];\n            }\n        }\n\n        resultList.add(curMergedInterval);\n        return resultList.toArray(new int[resultList.size()][]);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-56","published":1,"updated":"2022-07-26T13:15:26.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzy005x3suue048e37y","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of intervals where intervals[i] = [starti, endi], merge all ove</span>\n<span class=\"token comment\">//rlapping intervals, and return an array of the non-overlapping intervals that co</span>\n<span class=\"token comment\">//ver all the intervals in the input.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Output: [[1,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,4],[4,5]]</span>\n<span class=\"token comment\">//Output: [[1,5]]</span>\n<span class=\"token comment\">//Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 1 &lt;= intervals.length &lt;= 104</span>\n<span class=\"token comment\">// intervals[i].length == 2</span>\n<span class=\"token comment\">// 0 &lt;= starti &lt;= endi &lt;= 104</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Sorting</span>\n<span class=\"token comment\">// 👍 14993 👎 549</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> intervals<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interval <span class=\"token operator\">:</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMergedInterval <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of intervals where intervals[i] = [starti, endi], merge all ove</span>\n<span class=\"token comment\">//rlapping intervals, and return an array of the non-overlapping intervals that co</span>\n<span class=\"token comment\">//ver all the intervals in the input.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 1:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Output: [[1,6],[8,10],[15,18]]</span>\n<span class=\"token comment\">//Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//Input: intervals = [[1,4],[4,5]]</span>\n<span class=\"token comment\">//Output: [[1,5]]</span>\n<span class=\"token comment\">//Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Constraints:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 1 &lt;= intervals.length &lt;= 104</span>\n<span class=\"token comment\">// intervals[i].length == 2</span>\n<span class=\"token comment\">// 0 &lt;= starti &lt;= endi &lt;= 104</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Related Topics Array Sorting</span>\n<span class=\"token comment\">// 👍 14993 👎 549</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>intervals <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> intervals<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> intervals<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interval <span class=\"token operator\">:</span> intervals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMergedInterval <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curMergedInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curMergedInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> interval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curMergedInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-62","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-27T08:10:08.000Z","_content":"\n```java\n//There is a robot on an m x n grid. The robot is initially located at the top-l\n//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne\n//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an\n//y point in time. \n//\n// Given the two integers m and n, return the number of possible unique paths th\n//at the robot can take to reach the bottom-right corner. \n//\n// The test cases are generated so that the answer will be less than or equal to\n// 2 * 109. \n//\n// \n// Example 1: \n//\n// \n//Input: m = 3, n = 7\n//Output: 28\n// \n//\n// Example 2: \n//\n// \n//Input: m = 3, n = 2\n//Output: 3\n//Explanation: From the top-left corner, there are a total of 3 ways to reach th\n//e bottom-right corner:\n//1. Right -> Down -> Down\n//2. Down -> Down -> Right\n//3. Down -> Right -> Down\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= m, n <= 100 \n// \n// Related Topics Math Dynamic Programming Combinatorics \n// 👍 10034 👎 316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n\n    public int uniquePaths(int m, int n) {\n        if (m <= 0 || n <= 0) {\n            return 0;\n        }\n        if (m == 1 || n == 1) {\n            return 1;\n        }\n\n        int[][] f = new int[m][n];\n\n        for (int i = 0; i < m; i++) {\n            f[i][0] = 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            f[0][i] = 1;\n        }\n\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n            }\n        }\n\n        return f[m - 1][n - 1];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-62.md","raw":"---\ntitle: lc-62\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-27 16:10:08\n---\n\n```java\n//There is a robot on an m x n grid. The robot is initially located at the top-l\n//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne\n//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an\n//y point in time. \n//\n// Given the two integers m and n, return the number of possible unique paths th\n//at the robot can take to reach the bottom-right corner. \n//\n// The test cases are generated so that the answer will be less than or equal to\n// 2 * 109. \n//\n// \n// Example 1: \n//\n// \n//Input: m = 3, n = 7\n//Output: 28\n// \n//\n// Example 2: \n//\n// \n//Input: m = 3, n = 2\n//Output: 3\n//Explanation: From the top-left corner, there are a total of 3 ways to reach th\n//e bottom-right corner:\n//1. Right -> Down -> Down\n//2. Down -> Down -> Right\n//3. Down -> Right -> Down\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= m, n <= 100 \n// \n// Related Topics Math Dynamic Programming Combinatorics \n// 👍 10034 👎 316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n\n    public int uniquePaths(int m, int n) {\n        if (m <= 0 || n <= 0) {\n            return 0;\n        }\n        if (m == 1 || n == 1) {\n            return 1;\n        }\n\n        int[][] f = new int[m][n];\n\n        for (int i = 0; i < m; i++) {\n            f[i][0] = 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            f[0][i] = 1;\n        }\n\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n            }\n        }\n\n        return f[m - 1][n - 1];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-62","published":1,"updated":"2022-07-27T09:15:14.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tbzz00603suufel76h0l","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is a robot on an m x n grid. The robot is initially located at the top-l</span>\n<span class=\"token comment\">//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne</span>\n<span class=\"token comment\">//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an</span>\n<span class=\"token comment\">//y point in time. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the two integers m and n, return the number of possible unique paths th</span>\n<span class=\"token comment\">//at the robot can take to reach the bottom-right corner. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The test cases are generated so that the answer will be less than or equal to</span>\n<span class=\"token comment\">// 2 * 109. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 7</span>\n<span class=\"token comment\">//Output: 28</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 2</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: From the top-left corner, there are a total of 3 ways to reach th</span>\n<span class=\"token comment\">//e bottom-right corner:</span>\n<span class=\"token comment\">//1. Right -&gt; Down -&gt; Down</span>\n<span class=\"token comment\">//2. Down -&gt; Down -&gt; Right</span>\n<span class=\"token comment\">//3. Down -&gt; Right -&gt; Down</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Combinatorics </span>\n<span class=\"token comment\">// 👍 10034 👎 316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">uniquePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//There is a robot on an m x n grid. The robot is initially located at the top-l</span>\n<span class=\"token comment\">//eft corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corne</span>\n<span class=\"token comment\">//r (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at an</span>\n<span class=\"token comment\">//y point in time. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given the two integers m and n, return the number of possible unique paths th</span>\n<span class=\"token comment\">//at the robot can take to reach the bottom-right corner. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The test cases are generated so that the answer will be less than or equal to</span>\n<span class=\"token comment\">// 2 * 109. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 7</span>\n<span class=\"token comment\">//Output: 28</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: m = 3, n = 2</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: From the top-left corner, there are a total of 3 ways to reach th</span>\n<span class=\"token comment\">//e bottom-right corner:</span>\n<span class=\"token comment\">//1. Right -> Down -> Down</span>\n<span class=\"token comment\">//2. Down -> Down -> Right</span>\n<span class=\"token comment\">//3. Down -> Right -> Down</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Combinatorics </span>\n<span class=\"token comment\">// 👍 10034 👎 316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">uniquePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-617","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-02T03:39:55.000Z","_content":"\n```java\n/**\nYou are given two binary trees root1 and root2. \n\n Imagine that when you put one of them to cover the other, some nodes of the \ntwo trees are overlapped while the others are not. You need to merge the two trees \ninto a new binary tree. The merge rule is that if two nodes overlap, then sum \nnode values up as the new value of the merged node. Otherwise, the NOT null node \nwill be used as the node of the new tree. \n\n Return the merged tree. \n\n Note: The merging process must start from the root nodes of both trees. \n\n \n Example 1: \n\n \nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]\n \n\n Example 2: \n\n \nInput: root1 = [1], root2 = [1,2]\nOutput: [2,2]\n \n\n \n Constraints: \n\n \n The number of nodes in both trees is in the range [0, 2000]. \n -10⁴ <= Node.val <= 10⁴ \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1112, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if (root1 == null) {\n            return root2;\n        } else if (root2 == null) {\n            return root1;\n        }\n\n        root1.val += root2.val;\n\n        if (root1.left != null) {\n            root1.left = mergeTrees(root1.left, root2.left);\n        } else if (root2.left != null) {\n            root1.left = root2.left;\n        }\n\n\n        if (root1.right != null) {\n            root1.right = mergeTrees(root1.right, root2.right);\n        } else if (root2.right != null) {\n            root1.right = root2.right;\n        }\n\n        return root1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-617.md","raw":"---\ntitle: lc-617\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-02 11:39:55\n---\n\n```java\n/**\nYou are given two binary trees root1 and root2. \n\n Imagine that when you put one of them to cover the other, some nodes of the \ntwo trees are overlapped while the others are not. You need to merge the two trees \ninto a new binary tree. The merge rule is that if two nodes overlap, then sum \nnode values up as the new value of the merged node. Otherwise, the NOT null node \nwill be used as the node of the new tree. \n\n Return the merged tree. \n\n Note: The merging process must start from the root nodes of both trees. \n\n \n Example 1: \n\n \nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]\n \n\n Example 2: \n\n \nInput: root1 = [1], root2 = [1,2]\nOutput: [2,2]\n \n\n \n Constraints: \n\n \n The number of nodes in both trees is in the range [0, 2000]. \n -10⁴ <= Node.val <= 10⁴ \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1112, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if (root1 == null) {\n            return root2;\n        } else if (root2 == null) {\n            return root1;\n        }\n\n        root1.val += root2.val;\n\n        if (root1.left != null) {\n            root1.left = mergeTrees(root1.left, root2.left);\n        } else if (root2.left != null) {\n            root1.left = root2.left;\n        }\n\n\n        if (root1.right != null) {\n            root1.right = mergeTrees(root1.right, root2.right);\n        } else if (root2.right != null) {\n            root1.right = root2.right;\n        }\n\n        return root1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-617","published":1,"updated":"2022-11-03T02:53:33.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0000633suu86jrf0op","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nYou are given two binary trees root1 and root2. \n\n Imagine that when you put one of them to cover the other, some nodes of the \ntwo trees are overlapped while the others are not. You need to merge the two trees \ninto a new binary tree. The merge rule is that if two nodes overlap, then sum \nnode values up as the new value of the merged node. Otherwise, the NOT null node \nwill be used as the node of the new tree. \n\n Return the merged tree. \n\n Note: The merging process must start from the root nodes of both trees. \n\n \n Example 1: \n\n \nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]\n \n\n Example 2: \n\n \nInput: root1 = [1], root2 = [1,2]\nOutput: [2,2]\n \n\n \n Constraints: \n\n \n The number of nodes in both trees is in the range [0, 2000]. \n -10⁴ &lt;= Node.val &lt;= 10⁴ \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1112, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        root1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root2<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root2<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nYou are given two binary trees root1 and root2. \n\n Imagine that when you put one of them to cover the other, some nodes of the \ntwo trees are overlapped while the others are not. You need to merge the two trees \ninto a new binary tree. The merge rule is that if two nodes overlap, then sum \nnode values up as the new value of the merged node. Otherwise, the NOT null node \nwill be used as the node of the new tree. \n\n Return the merged tree. \n\n Note: The merging process must start from the root nodes of both trees. \n\n \n Example 1: \n\n \nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]\n \n\n Example 2: \n\n \nInput: root1 = [1], root2 = [1,2]\nOutput: [2,2]\n \n\n \n Constraints: \n\n \n The number of nodes in both trees is in the range [0, 2000]. \n -10⁴ &lt;= Node.val &lt;= 10⁴ \n \n Related Topics树 | 深度优先搜索 | 广度优先搜索 | 二叉树 \n\n 👍 1112, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        root1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> root2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root2<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            root1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> root2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root2<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            root1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> root2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-560","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-10-31T09:51:10.000Z","_content":"\n```java\n/**\nGiven an array of integers nums and an integer k, return the total number of \nsubarrays whose sum equals to k. \n\n A subarray is a contiguous non-empty sequence of elements within an array. \n\n \n Example 1: \n Input: nums = [1,1,1], k = 2\nOutput: 2\n Example 2: \n Input: nums = [1,2,3], k = 3\nOutput: 2\n \n \n Constraints: \n\n \n 1 <= nums.length <= 2 * 10⁴ \n -1000 <= nums[i] <= 1000 \n -10⁷ <= k <= 10⁷ \n \n Related Topics数组 | 哈希表 | 前缀和 \n\n 👍 1722, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int subarraySum(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int[] sum = new int[nums.length + 1];\n\n        for (int i = 0; i < nums.length; i++) {\n            sum[i + 1] = sum[i] + nums[i];\n        }\n\n        int result = 0;\n        for (int i = 0; i < sum.length - 1; i++) {\n            for (int j = i + 1; j < sum.length; j++) {\n                if (sum[j] - sum[i] == k) {\n                    result++;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-560.md","raw":"---\ntitle: lc-560\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-10-31 17:51:10\n---\n\n```java\n/**\nGiven an array of integers nums and an integer k, return the total number of \nsubarrays whose sum equals to k. \n\n A subarray is a contiguous non-empty sequence of elements within an array. \n\n \n Example 1: \n Input: nums = [1,1,1], k = 2\nOutput: 2\n Example 2: \n Input: nums = [1,2,3], k = 3\nOutput: 2\n \n \n Constraints: \n\n \n 1 <= nums.length <= 2 * 10⁴ \n -1000 <= nums[i] <= 1000 \n -10⁷ <= k <= 10⁷ \n \n Related Topics数组 | 哈希表 | 前缀和 \n\n 👍 1722, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int subarraySum(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int[] sum = new int[nums.length + 1];\n\n        for (int i = 0; i < nums.length; i++) {\n            sum[i + 1] = sum[i] + nums[i];\n        }\n\n        int result = 0;\n        for (int i = 0; i < sum.length - 1; i++) {\n            for (int j = i + 1; j < sum.length; j++) {\n                if (sum[j] - sum[i] == k) {\n                    result++;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-560","published":1,"updated":"2022-10-31T12:34:35.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0000663suuc3eh106h","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array of integers nums and an integer k, return the total number of \nsubarrays whose sum equals to k. \n\n A subarray is a contiguous non-empty sequence of elements within an array. \n\n \n Example 1: \n Input: nums = [1,1,1], k = 2\nOutput: 2\n Example 2: \n Input: nums = [1,2,3], k = 3\nOutput: 2\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 2 * 10⁴ \n -1000 &lt;= nums[i] &lt;= 1000 \n -10⁷ &lt;= k &lt;= 10⁷ \n \n Related Topics数组 | 哈希表 | 前缀和 \n\n 👍 1722, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array of integers nums and an integer k, return the total number of \nsubarrays whose sum equals to k. \n\n A subarray is a contiguous non-empty sequence of elements within an array. \n\n \n Example 1: \n Input: nums = [1,1,1], k = 2\nOutput: 2\n Example 2: \n Input: nums = [1,2,3], k = 3\nOutput: 2\n \n \n Constraints: \n\n \n 1 &lt;= nums.length &lt;= 2 * 10⁴ \n -1000 &lt;= nums[i] &lt;= 1000 \n -10⁷ &lt;= k &lt;= 10⁷ \n \n Related Topics数组 | 哈希表 | 前缀和 \n\n 👍 1722, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sum<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-581","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-01T06:45:51.000Z","_content":"\n```java\n/**\nGiven an integer array nums, you need to find one continuous subarray that if\nyou only sort this subarray in ascending order, then the whole array will be\nsorted in ascending order.\n\n Return the shortest such subarray and output its length.\n\n\n Example 1:\n\n\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the\nwhole array sorted in ascending order.\n\n\n Example 2:\n\n\nInput: nums = [1,2,3,4]\nOutput: 0\n\n\n Example 3:\n\n\nInput: nums = [1]\nOutput: 0\n\n\n\n Constraints:\n\n\n 1 <= nums.length <= 10⁴\n -10⁵ <= nums[i] <= 10⁵\n\n\n\nFollow up: Can you solve it in O(n) time complexity? Related Topics栈 | 贪心 | 数组 |\n 双指针 | 排序 | 单调栈\n\n 👍 952, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        if (nums == null || nums.length <= 1) {\n            return 0;\n        }\n        Stack<Integer> ascStack = new Stack<>();\n        Stack<Integer> descStack = new Stack<>();\n\n        boolean ascIn = true;\n        boolean descIn = true;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (ascIn && (ascStack.isEmpty() || nums[i] >= ascStack.peek())) {\n                ascStack.push(nums[i]);\n            } else {\n                ascIn = false;\n\n                while (!ascStack.isEmpty() && nums[i] < ascStack.peek()) {\n                    ascStack.pop();\n                }\n            }\n            if (descIn && (descStack.isEmpty() || nums[nums.length - 1 - i] <= descStack.peek())) {\n                descStack.push(nums[nums.length - 1 - i]);\n            } else {\n                descIn = false;\n\n                while (!descStack.isEmpty() && nums[nums.length - 1 - i] > descStack.peek()) {\n                    descStack.pop();\n                }\n            }\n        }\n\n        if (ascStack.size() == nums.length) {\n            return 0;\n        } else {\n            return nums.length - ascStack.size() - descStack.size();\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-581.md","raw":"---\ntitle: lc-581\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-01 14:45:51\n---\n\n```java\n/**\nGiven an integer array nums, you need to find one continuous subarray that if\nyou only sort this subarray in ascending order, then the whole array will be\nsorted in ascending order.\n\n Return the shortest such subarray and output its length.\n\n\n Example 1:\n\n\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the\nwhole array sorted in ascending order.\n\n\n Example 2:\n\n\nInput: nums = [1,2,3,4]\nOutput: 0\n\n\n Example 3:\n\n\nInput: nums = [1]\nOutput: 0\n\n\n\n Constraints:\n\n\n 1 <= nums.length <= 10⁴\n -10⁵ <= nums[i] <= 10⁵\n\n\n\nFollow up: Can you solve it in O(n) time complexity? Related Topics栈 | 贪心 | 数组 |\n 双指针 | 排序 | 单调栈\n\n 👍 952, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        if (nums == null || nums.length <= 1) {\n            return 0;\n        }\n        Stack<Integer> ascStack = new Stack<>();\n        Stack<Integer> descStack = new Stack<>();\n\n        boolean ascIn = true;\n        boolean descIn = true;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (ascIn && (ascStack.isEmpty() || nums[i] >= ascStack.peek())) {\n                ascStack.push(nums[i]);\n            } else {\n                ascIn = false;\n\n                while (!ascStack.isEmpty() && nums[i] < ascStack.peek()) {\n                    ascStack.pop();\n                }\n            }\n            if (descIn && (descStack.isEmpty() || nums[nums.length - 1 - i] <= descStack.peek())) {\n                descStack.push(nums[nums.length - 1 - i]);\n            } else {\n                descIn = false;\n\n                while (!descStack.isEmpty() && nums[nums.length - 1 - i] > descStack.peek()) {\n                    descStack.pop();\n                }\n            }\n        }\n\n        if (ascStack.size() == nums.length) {\n            return 0;\n        } else {\n            return nums.length - ascStack.size() - descStack.size();\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-581","published":1,"updated":"2022-11-01T15:27:32.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0100693suufm3peqyp","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, you need to find one continuous subarray that if\nyou only sort this subarray in ascending order, then the whole array will be\nsorted in ascending order.\n\n Return the shortest such subarray and output its length.\n\n\n Example 1:\n\n\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the\nwhole array sorted in ascending order.\n\n\n Example 2:\n\n\nInput: nums = [1,2,3,4]\nOutput: 0\n\n\n Example 3:\n\n\nInput: nums = [1]\nOutput: 0\n\n\n\n Constraints:\n\n\n 1 &lt;= nums.length &lt;= 10⁴\n -10⁵ &lt;= nums[i] &lt;= 10⁵\n\n\n\nFollow up: Can you solve it in O(n) time complexity? Related Topics栈 | 贪心 | 数组 |\n 双指针 | 排序 | 单调栈\n\n 👍 952, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findUnsortedSubarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> ascStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> descStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">boolean</span> ascIn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> descIn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ascIn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                ascIn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>descIn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>descStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> descStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                descStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                descIn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>descStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> descStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    descStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> descStack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an integer array nums, you need to find one continuous subarray that if\nyou only sort this subarray in ascending order, then the whole array will be\nsorted in ascending order.\n\n Return the shortest such subarray and output its length.\n\n\n Example 1:\n\n\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the\nwhole array sorted in ascending order.\n\n\n Example 2:\n\n\nInput: nums = [1,2,3,4]\nOutput: 0\n\n\n Example 3:\n\n\nInput: nums = [1]\nOutput: 0\n\n\n\n Constraints:\n\n\n 1 &lt;= nums.length &lt;= 10⁴\n -10⁵ &lt;= nums[i] &lt;= 10⁵\n\n\n\nFollow up: Can you solve it in O(n) time complexity? Related Topics栈 | 贪心 | 数组 |\n 双指针 | 排序 | 单调栈\n\n 👍 952, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findUnsortedSubarray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ascStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> descStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">boolean</span> ascIn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> descIn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ascIn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                ascIn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>descIn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>descStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> descStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                descStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                descIn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>descStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> descStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    descStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> ascStack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> descStack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-621","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-04T07:15:41.000Z","_content":"\n```java\n/**\nGiven a characters array tasks, representing the tasks a CPU needs to do, where\neach letter represents a different task. Tasks could be done in any order. Each\ntask is done in one unit of time. For each unit of time, the CPU could complete\neither one task or just be idle.\n\n However, there is a non-negative integer n that represents the cooldown period\nbetween two same tasks (the same letter in the array), that is that there must\nbe at least n units of time between any two same tasks.\n\n Return the least number of units of times that the CPU will take to finish all\nthe given tasks.\n\n\n Example 1:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation:\nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.\n\n\n Example 2:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on.\n\n\n Example 3:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation:\nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle ->\nidle -> A\n\n\n\n Constraints:\n\n\n 1 <= task.length <= 10⁴\n tasks[i] is upper-case English letter.\n The integer n is in the range [0, 100].\n\n Related Topics贪心 | 数组 | 哈希表 | 计数 | 排序 | 堆（优先队列）\n\n 👍 1050, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    class Task {\n        char taskCh;\n        int number;\n        int lastTime;\n    }\n\n    public int leastInterval(char[] tasks, int n) {\n        Map<Character, Task> taskMap = new HashMap<>();\n        PriorityQueue<Task> pq = new PriorityQueue<>(new Comparator<Task>() {\n            @Override\n            public int compare(Task t1, Task t2) {\n                return t2.number - t1.number;\n            }\n        });\n\n        for (char task : tasks) {\n            if (!taskMap.containsKey(task)) {\n                Task newTask = new Task();\n                newTask.taskCh = task;\n                newTask.number = 0;\n                newTask.lastTime = -1;\n                taskMap.put(task, newTask);\n            }\n\n            Task taskObj = taskMap.get(task);\n            taskObj.number = taskObj.number + 1;\n        }\n\n        for (Task taskObj : taskMap.values()) {\n            pq.add(taskObj);\n        }\n\n        int result = 0;\n\n        while (!pq.isEmpty()) {\n            List<Task> taskList = new ArrayList<>();\n            while (!pq.isEmpty()) {\n                Task curTask = pq.poll();\n\n                if (curTask.lastTime >= 0 && (result - curTask.lastTime) <= n) {\n                    taskList.add(curTask);\n                } else {\n                    curTask.lastTime = result;\n                    curTask.number = curTask.number - 1;\n\n                    if (curTask.number > 0) {\n                        taskList.add(curTask);\n                    }\n                    break;\n                }\n            }\n\n            if (taskList.size() > 0) {\n                for (Task curTask : taskList) {\n                    pq.add(curTask);\n                }\n            }\n\n            result++;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-621.md","raw":"---\ntitle: lc-621\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-04 15:15:41\n---\n\n```java\n/**\nGiven a characters array tasks, representing the tasks a CPU needs to do, where\neach letter represents a different task. Tasks could be done in any order. Each\ntask is done in one unit of time. For each unit of time, the CPU could complete\neither one task or just be idle.\n\n However, there is a non-negative integer n that represents the cooldown period\nbetween two same tasks (the same letter in the array), that is that there must\nbe at least n units of time between any two same tasks.\n\n Return the least number of units of times that the CPU will take to finish all\nthe given tasks.\n\n\n Example 1:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation:\nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.\n\n\n Example 2:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on.\n\n\n Example 3:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation:\nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle ->\nidle -> A\n\n\n\n Constraints:\n\n\n 1 <= task.length <= 10⁴\n tasks[i] is upper-case English letter.\n The integer n is in the range [0, 100].\n\n Related Topics贪心 | 数组 | 哈希表 | 计数 | 排序 | 堆（优先队列）\n\n 👍 1050, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    class Task {\n        char taskCh;\n        int number;\n        int lastTime;\n    }\n\n    public int leastInterval(char[] tasks, int n) {\n        Map<Character, Task> taskMap = new HashMap<>();\n        PriorityQueue<Task> pq = new PriorityQueue<>(new Comparator<Task>() {\n            @Override\n            public int compare(Task t1, Task t2) {\n                return t2.number - t1.number;\n            }\n        });\n\n        for (char task : tasks) {\n            if (!taskMap.containsKey(task)) {\n                Task newTask = new Task();\n                newTask.taskCh = task;\n                newTask.number = 0;\n                newTask.lastTime = -1;\n                taskMap.put(task, newTask);\n            }\n\n            Task taskObj = taskMap.get(task);\n            taskObj.number = taskObj.number + 1;\n        }\n\n        for (Task taskObj : taskMap.values()) {\n            pq.add(taskObj);\n        }\n\n        int result = 0;\n\n        while (!pq.isEmpty()) {\n            List<Task> taskList = new ArrayList<>();\n            while (!pq.isEmpty()) {\n                Task curTask = pq.poll();\n\n                if (curTask.lastTime >= 0 && (result - curTask.lastTime) <= n) {\n                    taskList.add(curTask);\n                } else {\n                    curTask.lastTime = result;\n                    curTask.number = curTask.number - 1;\n\n                    if (curTask.number > 0) {\n                        taskList.add(curTask);\n                    }\n                    break;\n                }\n            }\n\n            if (taskList.size() > 0) {\n                for (Task curTask : taskList) {\n                    pq.add(curTask);\n                }\n            }\n\n            result++;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-621","published":1,"updated":"2022-11-07T13:36:30.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc01006c3suu4phfgn4z","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a characters array tasks, representing the tasks a CPU needs to do, where\neach letter represents a different task. Tasks could be done in any order. Each\ntask is done in one unit of time. For each unit of time, the CPU could complete\neither one task or just be idle.\n\n However, there is a non-negative integer n that represents the cooldown period\nbetween two same tasks (the same letter in the array), that is that there must\nbe at least n units of time between any two same tasks.\n\n Return the least number of units of times that the CPU will take to finish all\nthe given tasks.\n\n\n Example 1:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation:\nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n\n\n Example 2:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on.\n\n\n Example 3:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation:\nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt;\nidle -&gt; A\n\n\n\n Constraints:\n\n\n 1 &lt;= task.length &lt;= 10⁴\n tasks[i] is upper-case English letter.\n The integer n is in the range [0, 100].\n\n Related Topics贪心 | 数组 | 哈希表 | 计数 | 排序 | 堆（优先队列）\n\n 👍 1050, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> taskCh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lastTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">leastInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tasks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">&gt;</span></span> taskMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">&gt;</span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> t1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Task</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> t2<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> task <span class=\"token operator\">:</span> tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Task</span> newTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                newTask<span class=\"token punctuation\">.</span>taskCh <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span>\n                newTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                newTask<span class=\"token punctuation\">.</span>lastTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> newTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">Task</span> taskObj <span class=\"token operator\">=</span> taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            taskObj<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> taskObj<span class=\"token punctuation\">.</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> taskObj <span class=\"token operator\">:</span> taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>taskObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">&gt;</span></span> taskList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Task</span> curTask <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">.</span>lastTime <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">-</span> curTask<span class=\"token punctuation\">.</span>lastTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    taskList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    curTask<span class=\"token punctuation\">.</span>lastTime <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n                    curTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> curTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        taskList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> curTask <span class=\"token operator\">:</span> taskList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a characters array tasks, representing the tasks a CPU needs to do, where\neach letter represents a different task. Tasks could be done in any order. Each\ntask is done in one unit of time. For each unit of time, the CPU could complete\neither one task or just be idle.\n\n However, there is a non-negative integer n that represents the cooldown period\nbetween two same tasks (the same letter in the array), that is that there must\nbe at least n units of time between any two same tasks.\n\n Return the least number of units of times that the CPU will take to finish all\nthe given tasks.\n\n\n Example 1:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation:\nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.\n\n\n Example 2:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on.\n\n\n Example 3:\n\n\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation:\nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle ->\nidle -> A\n\n\n\n Constraints:\n\n\n 1 &lt;= task.length &lt;= 10⁴\n tasks[i] is upper-case English letter.\n The integer n is in the range [0, 100].\n\n Related Topics贪心 | 数组 | 哈希表 | 计数 | 排序 | 堆（优先队列）\n\n 👍 1050, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">char</span> taskCh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lastTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">leastInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tasks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> taskMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> t1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Task</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> t2<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> t1<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> task <span class=\"token operator\">:</span> tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Task</span> newTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                newTask<span class=\"token punctuation\">.</span>taskCh <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span>\n                newTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                newTask<span class=\"token punctuation\">.</span>lastTime <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> newTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token class-name\">Task</span> taskObj <span class=\"token operator\">=</span> taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            taskObj<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> taskObj<span class=\"token punctuation\">.</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> taskObj <span class=\"token operator\">:</span> taskMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>taskObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Task</span><span class=\"token punctuation\">></span></span> taskList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Task</span> curTask <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">.</span>lastTime <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">-</span> curTask<span class=\"token punctuation\">.</span>lastTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    taskList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    curTask<span class=\"token punctuation\">.</span>lastTime <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n                    curTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> curTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">.</span>number <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        taskList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Task</span> curTask <span class=\"token operator\">:</span> taskList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-70","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-01T02:35:30.000Z","_content":"\n```java\n//You are climbing a staircase. It takes n steps to reach the top. \n//\n// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo\n//u climb to the top? \n//\n// \n// Example 1: \n//\n// \n//Input: n = 2\n//Output: 2\n//Explanation: There are two ways to climb to the top.\n//1. 1 step + 1 step\n//2. 2 steps\n// \n//\n// Example 2: \n//\n// \n//Input: n = 3\n//Output: 3\n//Explanation: There are three ways to climb to the top.\n//1. 1 step + 1 step + 1 step\n//2. 1 step + 2 steps\n//3. 2 steps + 1 step\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 45 \n// \n// Related Topics Math Dynamic Programming Memoization \n// 👍 13325 👎 398\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int climbStairs(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (n == 1) {\n            return 1;\n        }\n\n        if (n == 2) {\n            return 2;\n        }\n        int first = 1, second = 2, third = 0;\n\n        for (int i = 3; i <= n; i++) {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n\n        return third;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-70.md","raw":"---\ntitle: lc-70\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-01 10:35:30\n---\n\n```java\n//You are climbing a staircase. It takes n steps to reach the top. \n//\n// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo\n//u climb to the top? \n//\n// \n// Example 1: \n//\n// \n//Input: n = 2\n//Output: 2\n//Explanation: There are two ways to climb to the top.\n//1. 1 step + 1 step\n//2. 2 steps\n// \n//\n// Example 2: \n//\n// \n//Input: n = 3\n//Output: 3\n//Explanation: There are three ways to climb to the top.\n//1. 1 step + 1 step + 1 step\n//2. 1 step + 2 steps\n//3. 2 steps + 1 step\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= n <= 45 \n// \n// Related Topics Math Dynamic Programming Memoization \n// 👍 13325 👎 398\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int climbStairs(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n\n        if (n == 1) {\n            return 1;\n        }\n\n        if (n == 2) {\n            return 2;\n        }\n        int first = 1, second = 2, third = 0;\n\n        for (int i = 3; i <= n; i++) {\n            third = first + second;\n            first = second;\n            second = third;\n        }\n\n        return third;\n    }\n\n\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-70","published":1,"updated":"2022-08-01T07:53:26.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc02006f3suudun5hwio","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are climbing a staircase. It takes n steps to reach the top. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo</span>\n<span class=\"token comment\">//u climb to the top? </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 2</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: There are two ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step</span>\n<span class=\"token comment\">//2. 2 steps</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: There are three ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step + 1 step</span>\n<span class=\"token comment\">//2. 1 step + 2 steps</span>\n<span class=\"token comment\">//3. 2 steps + 1 step</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 45 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Memoization </span>\n<span class=\"token comment\">// 👍 13325 👎 398</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> third <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            third <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> third<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> third<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are climbing a staircase. It takes n steps to reach the top. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Each time you can either climb 1 or 2 steps. In how many distinct ways can yo</span>\n<span class=\"token comment\">//u climb to the top? </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 2</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: There are two ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step</span>\n<span class=\"token comment\">//2. 2 steps</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: n = 3</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: There are three ways to climb to the top.</span>\n<span class=\"token comment\">//1. 1 step + 1 step + 1 step</span>\n<span class=\"token comment\">//2. 1 step + 2 steps</span>\n<span class=\"token comment\">//3. 2 steps + 1 step</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 45 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Dynamic Programming Memoization </span>\n<span class=\"token comment\">// 👍 13325 👎 398</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> third <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            third <span class=\"token operator\">=</span> first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> third<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> third<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-73","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-02T06:01:20.000Z","_content":"\n```java\n//Given an m x n integer matrix matrix, if an element is 0, set its entire row a\n//nd column to 0's. \n//\n// You must do it in place. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n//Output: [[1,0,1],[0,0,0],[1,0,1]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n// \n//\n// \n// Constraints: \n//\n// \n// m == matrix.length \n// n == matrix[0].length \n// 1 <= m, n <= 200 \n// -231 <= matrix[i][j] <= 231 - 1 \n// \n//\n// \n// Follow up: \n//\n// \n// A straightforward solution using O(mn) space is probably a bad idea. \n// A simple improvement uses O(m + n) space, but still not the best solution. \n// Could you devise a constant space solution? \n// \n// Related Topics Array Hash Table Matrix \n// 👍 8364 👎 526\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void setZeroes(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return;\n        }\n\n        boolean[] rowBools = new boolean[matrix.length];\n        boolean[] columnBools = new boolean[matrix[0].length];\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (matrix[i][j] == 0) {\n                    rowBools[i] = true;\n                    columnBools[j] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (rowBools[i] || columnBools[j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-73.md","raw":"---\ntitle: lc-73\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-02 14:01:20\n---\n\n```java\n//Given an m x n integer matrix matrix, if an element is 0, set its entire row a\n//nd column to 0's. \n//\n// You must do it in place. \n//\n// \n// Example 1: \n//\n// \n//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n//Output: [[1,0,1],[0,0,0],[1,0,1]]\n// \n//\n// Example 2: \n//\n// \n//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n// \n//\n// \n// Constraints: \n//\n// \n// m == matrix.length \n// n == matrix[0].length \n// 1 <= m, n <= 200 \n// -231 <= matrix[i][j] <= 231 - 1 \n// \n//\n// \n// Follow up: \n//\n// \n// A straightforward solution using O(mn) space is probably a bad idea. \n// A simple improvement uses O(m + n) space, but still not the best solution. \n// Could you devise a constant space solution? \n// \n// Related Topics Array Hash Table Matrix \n// 👍 8364 👎 526\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void setZeroes(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return;\n        }\n\n        boolean[] rowBools = new boolean[matrix.length];\n        boolean[] columnBools = new boolean[matrix[0].length];\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (matrix[i][j] == 0) {\n                    rowBools[i] = true;\n                    columnBools[j] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (rowBools[i] || columnBools[j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-73","published":1,"updated":"2022-08-02T09:45:34.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc02006i3suuh0cc0ctn","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n integer matrix matrix, if an element is 0, set its entire row a</span>\n<span class=\"token comment\">//nd column to 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must do it in place. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]</span>\n<span class=\"token comment\">//Output: [[1,0,1],[0,0,0],[1,0,1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span>\n<span class=\"token comment\">//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == matrix.length </span>\n<span class=\"token comment\">// n == matrix[0].length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 200 </span>\n<span class=\"token comment\">// -231 &lt;= matrix[i][j] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A straightforward solution using O(mn) space is probably a bad idea. </span>\n<span class=\"token comment\">// A simple improvement uses O(m + n) space, but still not the best solution. </span>\n<span class=\"token comment\">// Could you devise a constant space solution? </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 8364 👎 526</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> columnBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n integer matrix matrix, if an element is 0, set its entire row a</span>\n<span class=\"token comment\">//nd column to 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must do it in place. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]</span>\n<span class=\"token comment\">//Output: [[1,0,1],[0,0,0],[1,0,1]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span>\n<span class=\"token comment\">//Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == matrix.length </span>\n<span class=\"token comment\">// n == matrix[0].length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 200 </span>\n<span class=\"token comment\">// -231 &lt;= matrix[i][j] &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// A straightforward solution using O(mn) space is probably a bad idea. </span>\n<span class=\"token comment\">// A simple improvement uses O(m + n) space, but still not the best solution. </span>\n<span class=\"token comment\">// Could you devise a constant space solution? </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Hash Table Matrix </span>\n<span class=\"token comment\">// 👍 8364 👎 526</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setZeroes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> columnBools <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rowBools<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> columnBools<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-69","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-29T03:42:21.000Z","_content":"\n```java\n//Given a non-negative integer x, compute and return the square root of x. \n//\n// Since the return type is an integer, the decimal digits are truncated, and on\n//ly the integer part of the result is returned. \n//\n// Note: You are not allowed to use any built-in exponent function or operator, \n//such as pow(x, 0.5) or x ** 0.5. \n//\n// \n// Example 1: \n//\n// \n//Input: x = 4\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: x = 8\n//Output: 2\n//Explanation: The square root of 8 is 2.82842..., and since the decimal part is\n// truncated, 2 is returned. \n//\n// \n// Constraints: \n//\n// \n// 0 <= x <= 231 - 1 \n// \n// Related Topics Math Binary Search \n// 👍 4388 👎 3407\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int mySqrt(int x) {\n        if (x == 0 || x == 1) {\n            return x;\n        }\n\n        if (x < 4) {\n            return 1;\n        }\n\n        long start = 2l, end = x / 2;\n\n        while (start <= end) {\n            if (start == end) {\n                return (int)start;\n            }\n\n            if (start + 1 == end) {\n                if (end * end <= x) {\n                    return (int)end;\n                } else {\n                    return (int)start;\n                }\n            }\n\n            long mid = start + (end - start) / 2;\n\n            if (mid * mid == x) {\n                return (int)mid;\n            } else if (mid * mid < x) {\n                start = mid;\n            } else {\n                end = mid;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-69.md","raw":"---\ntitle: lc-69\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-29 11:42:21\n---\n\n```java\n//Given a non-negative integer x, compute and return the square root of x. \n//\n// Since the return type is an integer, the decimal digits are truncated, and on\n//ly the integer part of the result is returned. \n//\n// Note: You are not allowed to use any built-in exponent function or operator, \n//such as pow(x, 0.5) or x ** 0.5. \n//\n// \n// Example 1: \n//\n// \n//Input: x = 4\n//Output: 2\n// \n//\n// Example 2: \n//\n// \n//Input: x = 8\n//Output: 2\n//Explanation: The square root of 8 is 2.82842..., and since the decimal part is\n// truncated, 2 is returned. \n//\n// \n// Constraints: \n//\n// \n// 0 <= x <= 231 - 1 \n// \n// Related Topics Math Binary Search \n// 👍 4388 👎 3407\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int mySqrt(int x) {\n        if (x == 0 || x == 1) {\n            return x;\n        }\n\n        if (x < 4) {\n            return 1;\n        }\n\n        long start = 2l, end = x / 2;\n\n        while (start <= end) {\n            if (start == end) {\n                return (int)start;\n            }\n\n            if (start + 1 == end) {\n                if (end * end <= x) {\n                    return (int)end;\n                } else {\n                    return (int)start;\n                }\n            }\n\n            long mid = start + (end - start) / 2;\n\n            if (mid * mid == x) {\n                return (int)mid;\n            } else if (mid * mid < x) {\n                start = mid;\n            } else {\n                end = mid;\n            }\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-69","published":1,"updated":"2022-07-29T05:47:46.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc03006l3suu7nnr60tc","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a non-negative integer x, compute and return the square root of x. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since the return type is an integer, the decimal digits are truncated, and on</span>\n<span class=\"token comment\">//ly the integer part of the result is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: You are not allowed to use any built-in exponent function or operator, </span>\n<span class=\"token comment\">//such as pow(x, 0.5) or x ** 0.5. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 4</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 8</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: The square root of 8 is 2.82842..., and since the decimal part is</span>\n<span class=\"token comment\">// truncated, 2 is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= x &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Binary Search </span>\n<span class=\"token comment\">// 👍 4388 👎 3407</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token number\">2l</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">*</span> end <span class=\"token operator\">&lt;=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">long</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given a non-negative integer x, compute and return the square root of x. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Since the return type is an integer, the decimal digits are truncated, and on</span>\n<span class=\"token comment\">//ly the integer part of the result is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note: You are not allowed to use any built-in exponent function or operator, </span>\n<span class=\"token comment\">//such as pow(x, 0.5) or x ** 0.5. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 4</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: x = 8</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: The square root of 8 is 2.82842..., and since the decimal part is</span>\n<span class=\"token comment\">// truncated, 2 is returned. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 0 &lt;= x &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Math Binary Search </span>\n<span class=\"token comment\">// 👍 4388 👎 3407</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token number\">2l</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">*</span> end <span class=\"token operator\">&lt;=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>end<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">long</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">*</span> mid <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-739","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-10T09:04:09.000Z","_content":"\n```java\n/**\nGiven an array of integers temperatures represents the daily temperatures, \nreturn an array answer such that answer[i] is the number of days you have to wait \nafter the iᵗʰ day to get a warmer temperature. If there is no future day for which \nthis is possible, keep answer[i] == 0 instead. \n\n \n Example 1: \n Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\n Example 2: \n Input: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\n Example 3: \n Input: temperatures = [30,60,90]\nOutput: [1,1,0]\n \n \n Constraints: \n\n \n 1 <= temperatures.length <= 10⁵ \n 30 <= temperatures[i] <= 100 \n \n Related Topics栈 | 数组 | 单调栈 \n\n 👍 1343, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    class Temperature {\n        int day;\n        int value;\n    }\n\n    public int[] dailyTemperatures(int[] temperatures) {\n        if (temperatures == null || temperatures.length == 0) {\n            return temperatures;\n        }\n        Stack<Temperature> tStack = new Stack<>();\n        int[] result = new int[temperatures.length];\n\n        for (int i = 0; i < temperatures.length; i++) {\n            while(!tStack.isEmpty()) {\n                if (tStack.peek().value < temperatures[i]) {\n                    Temperature t = tStack.pop();\n                    result[t.day] = i - t.day;\n                } else {\n                    break;\n                }\n            }\n            Temperature nt = new Temperature();\n            nt.day = i;\n            nt.value = temperatures[i];\n            tStack.push(nt);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-739.md","raw":"---\ntitle: lc-739\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-10 17:04:09\n---\n\n```java\n/**\nGiven an array of integers temperatures represents the daily temperatures, \nreturn an array answer such that answer[i] is the number of days you have to wait \nafter the iᵗʰ day to get a warmer temperature. If there is no future day for which \nthis is possible, keep answer[i] == 0 instead. \n\n \n Example 1: \n Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\n Example 2: \n Input: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\n Example 3: \n Input: temperatures = [30,60,90]\nOutput: [1,1,0]\n \n \n Constraints: \n\n \n 1 <= temperatures.length <= 10⁵ \n 30 <= temperatures[i] <= 100 \n \n Related Topics栈 | 数组 | 单调栈 \n\n 👍 1343, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    class Temperature {\n        int day;\n        int value;\n    }\n\n    public int[] dailyTemperatures(int[] temperatures) {\n        if (temperatures == null || temperatures.length == 0) {\n            return temperatures;\n        }\n        Stack<Temperature> tStack = new Stack<>();\n        int[] result = new int[temperatures.length];\n\n        for (int i = 0; i < temperatures.length; i++) {\n            while(!tStack.isEmpty()) {\n                if (tStack.peek().value < temperatures[i]) {\n                    Temperature t = tStack.pop();\n                    result[t.day] = i - t.day;\n                } else {\n                    break;\n                }\n            }\n            Temperature nt = new Temperature();\n            nt.day = i;\n            nt.value = temperatures[i];\n            tStack.push(nt);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-739","published":1,"updated":"2022-11-11T12:10:29.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc03006o3suu2xhecd29","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array of integers temperatures represents the daily temperatures, \nreturn an array answer such that answer[i] is the number of days you have to wait \nafter the iᵗʰ day to get a warmer temperature. If there is no future day for which \nthis is possible, keep answer[i] == 0 instead. \n\n \n Example 1: \n Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\n Example 2: \n Input: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\n Example 3: \n Input: temperatures = [30,60,90]\nOutput: [1,1,0]\n \n \n Constraints: \n\n \n 1 &lt;= temperatures.length &lt;= 10⁵ \n 30 &lt;= temperatures[i] &lt;= 100 \n \n Related Topics栈 | 数组 | 单调栈 \n\n 👍 1343, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Temperature</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">dailyTemperatures</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temperatures<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temperatures <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temperatures<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> temperatures<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Temperature</span><span class=\"token punctuation\">&gt;</span></span> tStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>temperatures<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> temperatures<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> temperatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Temperature</span> t <span class=\"token operator\">=</span> tStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    result<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> t<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Temperature</span> nt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Temperature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nt<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            nt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> temperatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven an array of integers temperatures represents the daily temperatures, \nreturn an array answer such that answer[i] is the number of days you have to wait \nafter the iᵗʰ day to get a warmer temperature. If there is no future day for which \nthis is possible, keep answer[i] == 0 instead. \n\n \n Example 1: \n Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\n Example 2: \n Input: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\n Example 3: \n Input: temperatures = [30,60,90]\nOutput: [1,1,0]\n \n \n Constraints: \n\n \n 1 &lt;= temperatures.length &lt;= 10⁵ \n 30 &lt;= temperatures[i] &lt;= 100 \n \n Related Topics栈 | 数组 | 单调栈 \n\n 👍 1343, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Temperature</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> day<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">dailyTemperatures</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temperatures<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temperatures <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> temperatures<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> temperatures<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Temperature</span><span class=\"token punctuation\">></span></span> tStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>temperatures<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> temperatures<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> temperatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Temperature</span> t <span class=\"token operator\">=</span> tStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    result<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> t<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">Temperature</span> nt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Temperature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nt<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            nt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> temperatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            tStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-647","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-09T16:41:17.000Z","_content":"\n```java\n/**\nGiven a string s, return the number of palindromic substrings in it. \n\n A string is a palindrome when it reads the same backward as forward. \n\n A substring is a contiguous sequence of characters within the string. \n\n \n Example 1: \n\n \nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n \n\n Example 2: \n\n \nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n \n\n \n Constraints: \n\n \n 1 <= s.length <= 1000 \n s consists of lowercase English letters. \n \n Related Topics字符串 | 动态规划 \n\n 👍 1012, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int countSubstrings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int[] dp = new int[s.length()];\n\n        dp[0] = 1;\n\n        Boolean[][] isP = new Boolean[s.length()][s.length()];\n\n        for (int i = 0; i < s.length(); i++) {\n            isP[i][i] = true;\n        }\n\n        for (int i = 1; i < s.length(); i++) {\n            int cnt = 0;\n            for (int j = 0; j <= i; j++) {\n                if (isPalindromic(s, isP, j, i)) {\n                    cnt++;\n                }\n            }\n\n            dp[i] = dp[i - 1] + cnt;\n        }\n\n        return dp[s.length() - 1];\n    }\n\n    private boolean isPalindromic(String s, Boolean[][] isP, int from, int end) {\n        if (end < from) {\n            return true;\n        }\n        if (isP[from][end] != null) {\n            return isP[from][end];\n        }\n        if (s.charAt(from) == s.charAt(end) && isPalindromic(s, isP, from + 1, end - 1)) {\n            isP[from][end] = true;\n            return true;\n        } else {\n            isP[from][end] = false;\n            return false;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-647.md","raw":"---\ntitle: lc-647\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-10 00:41:17\n---\n\n```java\n/**\nGiven a string s, return the number of palindromic substrings in it. \n\n A string is a palindrome when it reads the same backward as forward. \n\n A substring is a contiguous sequence of characters within the string. \n\n \n Example 1: \n\n \nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n \n\n Example 2: \n\n \nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n \n\n \n Constraints: \n\n \n 1 <= s.length <= 1000 \n s consists of lowercase English letters. \n \n Related Topics字符串 | 动态规划 \n\n 👍 1012, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int countSubstrings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int[] dp = new int[s.length()];\n\n        dp[0] = 1;\n\n        Boolean[][] isP = new Boolean[s.length()][s.length()];\n\n        for (int i = 0; i < s.length(); i++) {\n            isP[i][i] = true;\n        }\n\n        for (int i = 1; i < s.length(); i++) {\n            int cnt = 0;\n            for (int j = 0; j <= i; j++) {\n                if (isPalindromic(s, isP, j, i)) {\n                    cnt++;\n                }\n            }\n\n            dp[i] = dp[i - 1] + cnt;\n        }\n\n        return dp[s.length() - 1];\n    }\n\n    private boolean isPalindromic(String s, Boolean[][] isP, int from, int end) {\n        if (end < from) {\n            return true;\n        }\n        if (isP[from][end] != null) {\n            return isP[from][end];\n        }\n        if (s.charAt(from) == s.charAt(end) && isPalindromic(s, isP, from + 1, end - 1)) {\n            isP[from][end] = true;\n            return true;\n        } else {\n            isP[from][end] = false;\n            return false;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-647","published":1,"updated":"2022-11-09T17:12:38.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc04006r3suud3ux0jh9","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s, return the number of palindromic substrings in it. \n\n A string is a palindrome when it reads the same backward as forward. \n\n A substring is a contiguous sequence of characters within the string. \n\n \n Example 1: \n\n \nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n \n\n Example 2: \n\n \nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n \n\n \n Constraints: \n\n \n 1 &lt;= s.length &lt;= 1000 \n s consists of lowercase English letters. \n \n Related Topics字符串 | 动态规划 \n\n 👍 1012, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countSubstrings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isP <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            isP<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPalindromic</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> isP<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cnt<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindromic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isP<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPalindromic</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> isP<span class=\"token punctuation\">,</span> from <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\nGiven a string s, return the number of palindromic substrings in it. \n\n A string is a palindrome when it reads the same backward as forward. \n\n A substring is a contiguous sequence of characters within the string. \n\n \n Example 1: \n\n \nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n \n\n Example 2: \n\n \nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n \n\n \n Constraints: \n\n \n 1 &lt;= s.length &lt;= 1000 \n s consists of lowercase English letters. \n \n Related Topics字符串 | 动态规划 \n\n 👍 1012, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countSubstrings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isP <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            isP<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPalindromic</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> isP<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cnt<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindromic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isP<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPalindromic</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> isP<span class=\"token punctuation\">,</span> from <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            isP<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-76","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-04T07:08:53.000Z","_content":"\n```java\n//Given two strings s and t of lengths m and n respectively, return the minimum \n//window substring of s such that every character in t (including duplicates) is i\n//ncluded in the window. If there is no such substring, return the empty string \"\"\n//. \n//\n// The testcases will be generated such that the answer is unique. \n//\n// A substring is a contiguous sequence of characters within the string. \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n//Output: \"BANC\"\n//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr\n//om string t.\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"a\", t = \"a\"\n//Output: \"a\"\n//Explanation: The entire string s is the minimum window.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"a\", t = \"aa\"\n//Output: \"\"\n//Explanation: Both 'a's from t must be included in the window.\n//Since the largest window of s only has one 'a', return empty string.\n// \n//\n// \n// Constraints: \n//\n// \n// m == s.length \n// n == t.length \n// 1 <= m, n <= 105 \n// s and t consist of uppercase and lowercase English letters. \n// \n//\n// \n//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top\n//ics Hash Table String Sliding Window \n// 👍 11543 👎 553\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String minWindow(String s, String t) {\n        if (s == null || s.length() == 0 || t == null || t.length() == 0) {\n            return \"\";\n        }\n\n        int bestStart = 0, left = 0, right = 0, matchNum = 0, length = Integer.MAX_VALUE;\n\n        Map<Character, Integer> curMap = new HashMap<>();\n        Map<Character, Integer> neededMap = new HashMap<>();\n\n\n        for (char ch : t.toCharArray()) {\n            neededMap.putIfAbsent(ch, 0);\n            neededMap.put(ch, neededMap.get(ch) + 1);\n        }\n\n        while (right < s.length()) {\n            char ch = s.charAt(right);\n\n            if (neededMap.containsKey(ch)) {\n                curMap.putIfAbsent(ch, 0);\n                int cur = curMap.get(ch);\n                cur++;\n                curMap.put(ch, cur);\n\n                if (cur == neededMap.get(ch)) {\n                    matchNum++;\n                }\n            }\n\n            while (matchNum == neededMap.size()) {\n                if (right - left < length) {\n                    length = right - left + 1;\n                    bestStart = left;\n                }\n\n                char curCh = s.charAt(left);\n\n                if (curMap.containsKey(curCh)) {\n                    curMap.put(curCh, curMap.get(curCh) - 1);\n\n                    if (curMap.get(curCh) < neededMap.get(curCh)) {\n                        matchNum--;\n                    }\n                }\n\n                left++;\n            }\n\n            right++;\n        }\n\n        return length == Integer.MAX_VALUE ? \"\" : s.substring(bestStart, bestStart + length);\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-76.md","raw":"---\ntitle: lc-76\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-04 15:08:53\n---\n\n```java\n//Given two strings s and t of lengths m and n respectively, return the minimum \n//window substring of s such that every character in t (including duplicates) is i\n//ncluded in the window. If there is no such substring, return the empty string \"\"\n//. \n//\n// The testcases will be generated such that the answer is unique. \n//\n// A substring is a contiguous sequence of characters within the string. \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n//Output: \"BANC\"\n//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr\n//om string t.\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"a\", t = \"a\"\n//Output: \"a\"\n//Explanation: The entire string s is the minimum window.\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"a\", t = \"aa\"\n//Output: \"\"\n//Explanation: Both 'a's from t must be included in the window.\n//Since the largest window of s only has one 'a', return empty string.\n// \n//\n// \n// Constraints: \n//\n// \n// m == s.length \n// n == t.length \n// 1 <= m, n <= 105 \n// s and t consist of uppercase and lowercase English letters. \n// \n//\n// \n//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top\n//ics Hash Table String Sliding Window \n// 👍 11543 👎 553\n\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String minWindow(String s, String t) {\n        if (s == null || s.length() == 0 || t == null || t.length() == 0) {\n            return \"\";\n        }\n\n        int bestStart = 0, left = 0, right = 0, matchNum = 0, length = Integer.MAX_VALUE;\n\n        Map<Character, Integer> curMap = new HashMap<>();\n        Map<Character, Integer> neededMap = new HashMap<>();\n\n\n        for (char ch : t.toCharArray()) {\n            neededMap.putIfAbsent(ch, 0);\n            neededMap.put(ch, neededMap.get(ch) + 1);\n        }\n\n        while (right < s.length()) {\n            char ch = s.charAt(right);\n\n            if (neededMap.containsKey(ch)) {\n                curMap.putIfAbsent(ch, 0);\n                int cur = curMap.get(ch);\n                cur++;\n                curMap.put(ch, cur);\n\n                if (cur == neededMap.get(ch)) {\n                    matchNum++;\n                }\n            }\n\n            while (matchNum == neededMap.size()) {\n                if (right - left < length) {\n                    length = right - left + 1;\n                    bestStart = left;\n                }\n\n                char curCh = s.charAt(left);\n\n                if (curMap.containsKey(curCh)) {\n                    curMap.put(curCh, curMap.get(curCh) - 1);\n\n                    if (curMap.get(curCh) < neededMap.get(curCh)) {\n                        matchNum--;\n                    }\n                }\n\n                left++;\n            }\n\n            right++;\n        }\n\n        return length == Integer.MAX_VALUE ? \"\" : s.substring(bestStart, bestStart + length);\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-76","published":1,"updated":"2022-08-04T15:53:48.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc04006u3suu1zbr2o1v","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two strings s and t of lengths m and n respectively, return the minimum </span>\n<span class=\"token comment\">//window substring of s such that every character in t (including duplicates) is i</span>\n<span class=\"token comment\">//ncluded in the window. If there is no such substring, return the empty string \"\"</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The testcases will be generated such that the answer is unique. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A substring is a contiguous sequence of characters within the string. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"ADOBECODEBANC\", t = \"ABC\"</span>\n<span class=\"token comment\">//Output: \"BANC\"</span>\n<span class=\"token comment\">//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr</span>\n<span class=\"token comment\">//om string t.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"a\"</span>\n<span class=\"token comment\">//Output: \"a\"</span>\n<span class=\"token comment\">//Explanation: The entire string s is the minimum window.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"aa\"</span>\n<span class=\"token comment\">//Output: \"\"</span>\n<span class=\"token comment\">//Explanation: Both 'a's from t must be included in the window.</span>\n<span class=\"token comment\">//Since the largest window of s only has one 'a', return empty string.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == s.length </span>\n<span class=\"token comment\">// n == t.length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 105 </span>\n<span class=\"token comment\">// s and t consist of uppercase and lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top</span>\n<span class=\"token comment\">//ics Hash Table String Sliding Window </span>\n<span class=\"token comment\">// 👍 11543 👎 553</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">minWindow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> bestStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> matchNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> neededMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    matchNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>matchNum <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    length <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    bestStart <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">char</span> curCh <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">,</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        matchNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> length <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>bestStart<span class=\"token punctuation\">,</span> bestStart <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given two strings s and t of lengths m and n respectively, return the minimum </span>\n<span class=\"token comment\">//window substring of s such that every character in t (including duplicates) is i</span>\n<span class=\"token comment\">//ncluded in the window. If there is no such substring, return the empty string \"\"</span>\n<span class=\"token comment\">//. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The testcases will be generated such that the answer is unique. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A substring is a contiguous sequence of characters within the string. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"ADOBECODEBANC\", t = \"ABC\"</span>\n<span class=\"token comment\">//Output: \"BANC\"</span>\n<span class=\"token comment\">//Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' fr</span>\n<span class=\"token comment\">//om string t.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"a\"</span>\n<span class=\"token comment\">//Output: \"a\"</span>\n<span class=\"token comment\">//Explanation: The entire string s is the minimum window.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"a\", t = \"aa\"</span>\n<span class=\"token comment\">//Output: \"\"</span>\n<span class=\"token comment\">//Explanation: Both 'a's from t must be included in the window.</span>\n<span class=\"token comment\">//Since the largest window of s only has one 'a', return empty string.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == s.length </span>\n<span class=\"token comment\">// n == t.length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 105 </span>\n<span class=\"token comment\">// s and t consist of uppercase and lowercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Could you find an algorithm that runs in O(m + n) time? Related Top</span>\n<span class=\"token comment\">//ics Hash Table String Sliding Window </span>\n<span class=\"token comment\">// 👍 11543 👎 553</span>\n\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">minWindow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> bestStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> matchNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> neededMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    matchNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>matchNum <span class=\"token operator\">==</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    length <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    bestStart <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">char</span> curCh <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    curMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">,</span> curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> neededMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>curCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        matchNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> length <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>bestStart<span class=\"token punctuation\">,</span> bestStart <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-79","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-08T03:34:25.000Z","_content":"\n```java\n//Given an m x n grid of characters board and a string word, return true if word\n// exists in the grid. \n//\n// The word can be constructed from letters of sequentially adjacent cells, wher\n//e adjacent cells are horizontally or vertically neighboring. The same letter cel\n//l may not be used more than once. \n//\n// \n// Example 1: \n//\n// \n//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =\n// \"ABCCED\"\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =\n// \"SEE\"\n//Output: true\n// \n//\n// Example 3: \n//\n// \n//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =\n// \"ABCB\"\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// m == board.length \n// n = board[i].length \n// 1 <= m, n <= 6 \n// 1 <= word.length <= 15 \n// board and word consists of only lowercase and uppercase English letters. \n// \n//\n// \n// Follow up: Could you use search pruning to make your solution faster with a l\n//arger board? \n// Related Topics Array Backtracking Matrix \n// 👍 10362 👎 389\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean exist(char[][] board, String word) {\n        if (board == null) {\n            return false;\n        }\n\n        boolean[][] used = new boolean[board.length][];\n        for (int i = 0; i < board.length; i++) {\n            used[i] = new boolean[board[i].length];\n        }\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[i].length; j++) {\n                used[i][j] = true;\n                if (existFunc(board, used, word, 0, i, j)) {\n                    return true;\n                }\n                used[i][j] = false;\n            }\n        }\n        return false;\n    }\n\n    private boolean existFunc(char[][] board, boolean[][] used, String word, int index, int i, int j) {\n        if (board[i][j] != word.charAt(index)) {\n            return false;\n        }\n\n        if (index == word.length() - 1) {\n            return true;\n        }\n\n        boolean left = false, right = false, up = false, down = false;\n        if (i > 0 && !used[i - 1][j]) {\n            used[i - 1][j] = true;\n            up = existFunc(board, used, word, index + 1, i - 1, j);\n            used[i - 1][j] = false;\n        }\n        if (i < board.length - 1 && !used[i + 1][j]) {\n            used[i + 1][j] = true;\n            down = existFunc(board, used, word, index + 1, i + 1, j);\n            used[i + 1][j] = false;\n        }\n        if (j > 0 && !used[i][j - 1]) {\n            used[i][j - 1] = true;\n            left = existFunc(board, used, word, index + 1, i, j - 1);\n            used[i][j - 1] = false;\n        }\n        if (j < board[0].length - 1 && !used[i][j + 1]) {\n            used[i][j + 1] = true;\n            right = existFunc(board, used, word, index + 1, i, j + 1);\n            used[i][j + 1] = false;\n        }\n\n        return left || right || up || down;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-79.md","raw":"---\ntitle: lc-79\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-08 11:34:25\n---\n\n```java\n//Given an m x n grid of characters board and a string word, return true if word\n// exists in the grid. \n//\n// The word can be constructed from letters of sequentially adjacent cells, wher\n//e adjacent cells are horizontally or vertically neighboring. The same letter cel\n//l may not be used more than once. \n//\n// \n// Example 1: \n//\n// \n//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =\n// \"ABCCED\"\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =\n// \"SEE\"\n//Output: true\n// \n//\n// Example 3: \n//\n// \n//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =\n// \"ABCB\"\n//Output: false\n// \n//\n// \n// Constraints: \n//\n// \n// m == board.length \n// n = board[i].length \n// 1 <= m, n <= 6 \n// 1 <= word.length <= 15 \n// board and word consists of only lowercase and uppercase English letters. \n// \n//\n// \n// Follow up: Could you use search pruning to make your solution faster with a l\n//arger board? \n// Related Topics Array Backtracking Matrix \n// 👍 10362 👎 389\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean exist(char[][] board, String word) {\n        if (board == null) {\n            return false;\n        }\n\n        boolean[][] used = new boolean[board.length][];\n        for (int i = 0; i < board.length; i++) {\n            used[i] = new boolean[board[i].length];\n        }\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[i].length; j++) {\n                used[i][j] = true;\n                if (existFunc(board, used, word, 0, i, j)) {\n                    return true;\n                }\n                used[i][j] = false;\n            }\n        }\n        return false;\n    }\n\n    private boolean existFunc(char[][] board, boolean[][] used, String word, int index, int i, int j) {\n        if (board[i][j] != word.charAt(index)) {\n            return false;\n        }\n\n        if (index == word.length() - 1) {\n            return true;\n        }\n\n        boolean left = false, right = false, up = false, down = false;\n        if (i > 0 && !used[i - 1][j]) {\n            used[i - 1][j] = true;\n            up = existFunc(board, used, word, index + 1, i - 1, j);\n            used[i - 1][j] = false;\n        }\n        if (i < board.length - 1 && !used[i + 1][j]) {\n            used[i + 1][j] = true;\n            down = existFunc(board, used, word, index + 1, i + 1, j);\n            used[i + 1][j] = false;\n        }\n        if (j > 0 && !used[i][j - 1]) {\n            used[i][j - 1] = true;\n            left = existFunc(board, used, word, index + 1, i, j - 1);\n            used[i][j - 1] = false;\n        }\n        if (j < board[0].length - 1 && !used[i][j + 1]) {\n            used[i][j + 1] = true;\n            right = existFunc(board, used, word, index + 1, i, j + 1);\n            used[i][j + 1] = false;\n        }\n\n        return left || right || up || down;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-79","published":1,"updated":"2022-08-08T06:07:31.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc05006x3suu2ye7d5fy","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n grid of characters board and a string word, return true if word</span>\n<span class=\"token comment\">// exists in the grid. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The word can be constructed from letters of sequentially adjacent cells, wher</span>\n<span class=\"token comment\">//e adjacent cells are horizontally or vertically neighboring. The same letter cel</span>\n<span class=\"token comment\">//l may not be used more than once. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =</span>\n<span class=\"token comment\">// \"ABCCED\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =</span>\n<span class=\"token comment\">// \"SEE\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =</span>\n<span class=\"token comment\">// \"ABCB\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == board.length </span>\n<span class=\"token comment\">// n = board[i].length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 6 </span>\n<span class=\"token comment\">// 1 &lt;= word.length &lt;= 15 </span>\n<span class=\"token comment\">// board and word consists of only lowercase and uppercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you use search pruning to make your solution faster with a l</span>\n<span class=\"token comment\">//arger board? </span>\n<span class=\"token comment\">// Related Topics Array Backtracking Matrix </span>\n<span class=\"token comment\">// 👍 10362 👎 389</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> used <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>board<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> used<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span> left <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> up <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> down <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            up <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            down <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            left <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            right <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> left <span class=\"token operator\">||</span> right <span class=\"token operator\">||</span> up <span class=\"token operator\">||</span> down<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an m x n grid of characters board and a string word, return true if word</span>\n<span class=\"token comment\">// exists in the grid. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The word can be constructed from letters of sequentially adjacent cells, wher</span>\n<span class=\"token comment\">//e adjacent cells are horizontally or vertically neighboring. The same letter cel</span>\n<span class=\"token comment\">//l may not be used more than once. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =</span>\n<span class=\"token comment\">// \"ABCCED\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =</span>\n<span class=\"token comment\">// \"SEE\"</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word =</span>\n<span class=\"token comment\">// \"ABCB\"</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// m == board.length </span>\n<span class=\"token comment\">// n = board[i].length </span>\n<span class=\"token comment\">// 1 &lt;= m, n &lt;= 6 </span>\n<span class=\"token comment\">// 1 &lt;= word.length &lt;= 15 </span>\n<span class=\"token comment\">// board and word consists of only lowercase and uppercase English letters. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you use search pruning to make your solution faster with a l</span>\n<span class=\"token comment\">//arger board? </span>\n<span class=\"token comment\">// Related Topics Array Backtracking Matrix </span>\n<span class=\"token comment\">// 👍 10362 👎 389</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> used <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>board<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> used<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span> left <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> up <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> down <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            up <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            down <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            left <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            right <span class=\"token operator\">=</span> <span class=\"token function\">existFunc</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> left <span class=\"token operator\">||</span> right <span class=\"token operator\">||</span> up <span class=\"token operator\">||</span> down<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-75","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-03T02:48:58.000Z","_content":"\n```java\n//Given an array nums with n objects colored red, white, or blue, sort them in-p\n//lace so that objects of the same color are adjacent, with the colors in the orde\n//r red, white, and blue. \n//\n// We will use the integers 0, 1, and 2 to represent the color red, white, and b\n//lue, respectively. \n//\n// You must solve this problem without using the library's sort function. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,0,2,1,1,0]\n//Output: [0,0,1,1,2,2]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [2,0,1]\n//Output: [0,1,2]\n// \n//\n// \n// Constraints: \n//\n// \n// n == nums.length \n// 1 <= n <= 300 \n// nums[i] is either 0, 1, or 2. \n// \n//\n// \n// Follow up: Could you come up with a one-pass algorithm using only constant ex\n//tra space? \n// Related Topics Array Two Pointers Sorting \n// 👍 11309 👎 439\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void sortColors(int[] nums) {\n        int zero, one, two, i;\n        zero = 0;\n        one = 0;\n        two = 0;\n\n        for(i = 0; i < nums.length; i++){\n            if(nums[i] == 0){\n                zero ++;\n                continue;\n            }\n            if(nums[i] == 1){\n                one ++;\n                continue;\n            }\n            if(nums[i] == 2){\n                two ++;\n                continue;\n            }\n        }\n\n        for(i = 0; i < zero; i++){\n            nums[i] = 0;\n        }\n        for(i = 0; i < one; i++){\n            nums[i + zero] = 1;\n        }\n        for(i = 0; i < two; i++){\n            nums[i + zero + one] = 2;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-75.md","raw":"---\ntitle: lc-75\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-03 10:48:58\n---\n\n```java\n//Given an array nums with n objects colored red, white, or blue, sort them in-p\n//lace so that objects of the same color are adjacent, with the colors in the orde\n//r red, white, and blue. \n//\n// We will use the integers 0, 1, and 2 to represent the color red, white, and b\n//lue, respectively. \n//\n// You must solve this problem without using the library's sort function. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [2,0,2,1,1,0]\n//Output: [0,0,1,1,2,2]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [2,0,1]\n//Output: [0,1,2]\n// \n//\n// \n// Constraints: \n//\n// \n// n == nums.length \n// 1 <= n <= 300 \n// nums[i] is either 0, 1, or 2. \n// \n//\n// \n// Follow up: Could you come up with a one-pass algorithm using only constant ex\n//tra space? \n// Related Topics Array Two Pointers Sorting \n// 👍 11309 👎 439\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void sortColors(int[] nums) {\n        int zero, one, two, i;\n        zero = 0;\n        one = 0;\n        two = 0;\n\n        for(i = 0; i < nums.length; i++){\n            if(nums[i] == 0){\n                zero ++;\n                continue;\n            }\n            if(nums[i] == 1){\n                one ++;\n                continue;\n            }\n            if(nums[i] == 2){\n                two ++;\n                continue;\n            }\n        }\n\n        for(i = 0; i < zero; i++){\n            nums[i] = 0;\n        }\n        for(i = 0; i < one; i++){\n            nums[i + zero] = 1;\n        }\n        for(i = 0; i < two; i++){\n            nums[i + zero + one] = 2;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-75","published":1,"updated":"2022-08-03T09:17:02.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0500703suu9f2v68pr","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums with n objects colored red, white, or blue, sort them in-p</span>\n<span class=\"token comment\">//lace so that objects of the same color are adjacent, with the colors in the orde</span>\n<span class=\"token comment\">//r red, white, and blue. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// We will use the integers 0, 1, and 2 to represent the color red, white, and b</span>\n<span class=\"token comment\">//lue, respectively. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must solve this problem without using the library's sort function. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,2,1,1,0]</span>\n<span class=\"token comment\">//Output: [0,0,1,1,2,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,1]</span>\n<span class=\"token comment\">//Output: [0,1,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == nums.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 300 </span>\n<span class=\"token comment\">// nums[i] is either 0, 1, or 2. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you come up with a one-pass algorithm using only constant ex</span>\n<span class=\"token comment\">//tra space? </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 11309 👎 439</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortColors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> zero<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n        zero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        one <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        two <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                zero <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                one <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                two <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> zero<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> one<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> two<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero <span class=\"token operator\">+</span> one<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array nums with n objects colored red, white, or blue, sort them in-p</span>\n<span class=\"token comment\">//lace so that objects of the same color are adjacent, with the colors in the orde</span>\n<span class=\"token comment\">//r red, white, and blue. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// We will use the integers 0, 1, and 2 to represent the color red, white, and b</span>\n<span class=\"token comment\">//lue, respectively. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// You must solve this problem without using the library's sort function. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,2,1,1,0]</span>\n<span class=\"token comment\">//Output: [0,0,1,1,2,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [2,0,1]</span>\n<span class=\"token comment\">//Output: [0,1,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// n == nums.length </span>\n<span class=\"token comment\">// 1 &lt;= n &lt;= 300 </span>\n<span class=\"token comment\">// nums[i] is either 0, 1, or 2. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Could you come up with a one-pass algorithm using only constant ex</span>\n<span class=\"token comment\">//tra space? </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 11309 👎 439</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortColors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> zero<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n        zero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        one <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        two <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                zero <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                one <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                two <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> zero<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> one<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> two<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> zero <span class=\"token operator\">+</span> one<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-84","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-09T02:49:08.000Z","_content":"\n```java\n//Given an array of integers heights representing the histogram's bar height whe\n//re the width of each bar is 1, return the area of the largest rectangle in the h\n//istogram. \n//\n// \n// Example 1: \n//\n// \n//Input: heights = [2,1,5,6,2,3]\n//Output: 10\n//Explanation: The above is a histogram where width of each bar is 1.\n//The largest rectangle is shown in the red area, which has an area = 10 units.\n// \n//\n// Example 2: \n//\n// \n//Input: heights = [2,4]\n//Output: 4\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= heights.length <= 105 \n// 0 <= heights[i] <= 104 \n// \n// Related Topics Array Stack Monotonic Stack \n// 👍 11428 👎 160\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int largestRectangleArea(int[] receive){\n        int maxArea = 0;\n        int[] left = new int[receive.length];\n        int[] right = new int[receive.length];\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < receive.length; i++) {\n            while (!stack.isEmpty() && receive[stack.peek()] >= receive[i]) {\n                stack.pop();\n            }\n            if (stack.isEmpty()) {\n                left[i] = -1;\n            } else {\n                left[i] = stack.peek();\n            }\n            stack.push(i);\n        }\n        stack.clear();\n        for (int i = receive.length - 1; i >= 0; i--) {\n            while (!stack.isEmpty() && receive[stack.peek()] >= receive[i]) {\n                stack.pop();\n            }\n            if (stack.isEmpty()) {\n                right[i] = receive.length;\n            } else {\n                right[i] = stack.peek();\n            }\n            stack.push(i);\n        }\n        for (int i = 0; i < receive.length; i++) {\n            maxArea = Math.max(maxArea, (right[i] - left[i] - 1) * receive[i]);\n        }\n        return maxArea;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-84.md","raw":"---\ntitle: lc-84\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-09 10:49:08\n---\n\n```java\n//Given an array of integers heights representing the histogram's bar height whe\n//re the width of each bar is 1, return the area of the largest rectangle in the h\n//istogram. \n//\n// \n// Example 1: \n//\n// \n//Input: heights = [2,1,5,6,2,3]\n//Output: 10\n//Explanation: The above is a histogram where width of each bar is 1.\n//The largest rectangle is shown in the red area, which has an area = 10 units.\n// \n//\n// Example 2: \n//\n// \n//Input: heights = [2,4]\n//Output: 4\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= heights.length <= 105 \n// 0 <= heights[i] <= 104 \n// \n// Related Topics Array Stack Monotonic Stack \n// 👍 11428 👎 160\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int largestRectangleArea(int[] receive){\n        int maxArea = 0;\n        int[] left = new int[receive.length];\n        int[] right = new int[receive.length];\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < receive.length; i++) {\n            while (!stack.isEmpty() && receive[stack.peek()] >= receive[i]) {\n                stack.pop();\n            }\n            if (stack.isEmpty()) {\n                left[i] = -1;\n            } else {\n                left[i] = stack.peek();\n            }\n            stack.push(i);\n        }\n        stack.clear();\n        for (int i = receive.length - 1; i >= 0; i--) {\n            while (!stack.isEmpty() && receive[stack.peek()] >= receive[i]) {\n                stack.pop();\n            }\n            if (stack.isEmpty()) {\n                right[i] = receive.length;\n            } else {\n                right[i] = stack.peek();\n            }\n            stack.push(i);\n        }\n        for (int i = 0; i < receive.length; i++) {\n            maxArea = Math.max(maxArea, (right[i] - left[i] - 1) * receive[i]);\n        }\n        return maxArea;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-84","published":1,"updated":"2022-08-09T07:14:02.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0600733suu0s5ngk95","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of integers heights representing the histogram's bar height whe</span>\n<span class=\"token comment\">//re the width of each bar is 1, return the area of the largest rectangle in the h</span>\n<span class=\"token comment\">//istogram. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: heights = [2,1,5,6,2,3]</span>\n<span class=\"token comment\">//Output: 10</span>\n<span class=\"token comment\">//Explanation: The above is a histogram where width of each bar is 1.</span>\n<span class=\"token comment\">//The largest rectangle is shown in the red area, which has an area = 10 units.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: heights = [2,4]</span>\n<span class=\"token comment\">//Output: 4</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= heights.length &lt;= 105 </span>\n<span class=\"token comment\">// 0 &lt;= heights[i] &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Stack Monotonic Stack </span>\n<span class=\"token comment\">// 👍 11428 👎 160</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">largestRectangleArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> receive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> maxArea <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> receive<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> receive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> receive<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> receive<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> receive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxArea <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> receive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> maxArea<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an array of integers heights representing the histogram's bar height whe</span>\n<span class=\"token comment\">//re the width of each bar is 1, return the area of the largest rectangle in the h</span>\n<span class=\"token comment\">//istogram. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: heights = [2,1,5,6,2,3]</span>\n<span class=\"token comment\">//Output: 10</span>\n<span class=\"token comment\">//Explanation: The above is a histogram where width of each bar is 1.</span>\n<span class=\"token comment\">//The largest rectangle is shown in the red area, which has an area = 10 units.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: heights = [2,4]</span>\n<span class=\"token comment\">//Output: 4</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= heights.length &lt;= 105 </span>\n<span class=\"token comment\">// 0 &lt;= heights[i] &lt;= 104 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Stack Monotonic Stack </span>\n<span class=\"token comment\">// 👍 11428 👎 160</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">largestRectangleArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> receive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> maxArea <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> receive<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> receive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> receive<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> receive<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> receive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> receive<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxArea <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> receive<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> maxArea<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-66","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-07-28T05:47:09.000Z","_content":"\n```java\n//You are given a large integer represented as an integer array digits, where ea\n//ch digits[i] is the ith digit of the integer. The digits are ordered from most s\n//ignificant to least significant in left-to-right order. The large integer does n\n//ot contain any leading 0's. \n//\n// Increment the large integer by one and return the resulting array of digits. \n//\n//\n// \n// Example 1: \n//\n// \n//Input: digits = [1,2,3]\n//Output: [1,2,4]\n//Explanation: The array represents the integer 123.\n//Incrementing by one gives 123 + 1 = 124.\n//Thus, the result should be [1,2,4].\n// \n//\n// Example 2: \n//\n// \n//Input: digits = [4,3,2,1]\n//Output: [4,3,2,2]\n//Explanation: The array represents the integer 4321.\n//Incrementing by one gives 4321 + 1 = 4322.\n//Thus, the result should be [4,3,2,2].\n// \n//\n// Example 3: \n//\n// \n//Input: digits = [9]\n//Output: [1,0]\n//Explanation: The array represents the integer 9.\n//Incrementing by one gives 9 + 1 = 10.\n//Thus, the result should be [1,0].\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= digits.length <= 100 \n// 0 <= digits[i] <= 9 \n// digits does not contain any leading 0's. \n// \n// Related Topics Array Math \n// 👍 4783 👎 4316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        if (digits == null || digits.length == 0) {\n            return digits;\n        }\n\n        boolean all9 = true;\n\n        for (int digit : digits) {\n            if (digit != 9) {\n                all9 = false;\n                break;\n            }\n        }\n\n        if (all9) {\n            int[] result = new int[digits.length + 1];\n\n            result[0] = 1;\n\n            for (int i = 0; i < digits.length; i++) {\n                result[i + 1] = 0;\n            }\n\n            return result;\n        } else {\n            boolean carry = true;\n            int i = digits.length - 1;\n            while (carry) {\n                digits[i] = digits[i] + 1;\n\n                if (digits[i] == 10) {\n                    digits[i] = 0;\n                } else {\n                    carry = false;\n                }\n                i--;\n            }\n\n            return digits;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-66.md","raw":"---\ntitle: lc-66\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-07-28 13:47:09\n---\n\n```java\n//You are given a large integer represented as an integer array digits, where ea\n//ch digits[i] is the ith digit of the integer. The digits are ordered from most s\n//ignificant to least significant in left-to-right order. The large integer does n\n//ot contain any leading 0's. \n//\n// Increment the large integer by one and return the resulting array of digits. \n//\n//\n// \n// Example 1: \n//\n// \n//Input: digits = [1,2,3]\n//Output: [1,2,4]\n//Explanation: The array represents the integer 123.\n//Incrementing by one gives 123 + 1 = 124.\n//Thus, the result should be [1,2,4].\n// \n//\n// Example 2: \n//\n// \n//Input: digits = [4,3,2,1]\n//Output: [4,3,2,2]\n//Explanation: The array represents the integer 4321.\n//Incrementing by one gives 4321 + 1 = 4322.\n//Thus, the result should be [4,3,2,2].\n// \n//\n// Example 3: \n//\n// \n//Input: digits = [9]\n//Output: [1,0]\n//Explanation: The array represents the integer 9.\n//Incrementing by one gives 9 + 1 = 10.\n//Thus, the result should be [1,0].\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= digits.length <= 100 \n// 0 <= digits[i] <= 9 \n// digits does not contain any leading 0's. \n// \n// Related Topics Array Math \n// 👍 4783 👎 4316\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        if (digits == null || digits.length == 0) {\n            return digits;\n        }\n\n        boolean all9 = true;\n\n        for (int digit : digits) {\n            if (digit != 9) {\n                all9 = false;\n                break;\n            }\n        }\n\n        if (all9) {\n            int[] result = new int[digits.length + 1];\n\n            result[0] = 1;\n\n            for (int i = 0; i < digits.length; i++) {\n                result[i + 1] = 0;\n            }\n\n            return result;\n        } else {\n            boolean carry = true;\n            int i = digits.length - 1;\n            while (carry) {\n                digits[i] = digits[i] + 1;\n\n                if (digits[i] == 10) {\n                    digits[i] = 0;\n                } else {\n                    carry = false;\n                }\n                i--;\n            }\n\n            return digits;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-66","published":1,"updated":"2022-07-28T07:53:37.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0600763suuf9pxfh6x","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given a large integer represented as an integer array digits, where ea</span>\n<span class=\"token comment\">//ch digits[i] is the ith digit of the integer. The digits are ordered from most s</span>\n<span class=\"token comment\">//ignificant to least significant in left-to-right order. The large integer does n</span>\n<span class=\"token comment\">//ot contain any leading 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Increment the large integer by one and return the resulting array of digits. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [1,2,3]</span>\n<span class=\"token comment\">//Output: [1,2,4]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 123.</span>\n<span class=\"token comment\">//Incrementing by one gives 123 + 1 = 124.</span>\n<span class=\"token comment\">//Thus, the result should be [1,2,4].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [4,3,2,1]</span>\n<span class=\"token comment\">//Output: [4,3,2,2]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 4321.</span>\n<span class=\"token comment\">//Incrementing by one gives 4321 + 1 = 4322.</span>\n<span class=\"token comment\">//Thus, the result should be [4,3,2,2].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [9]</span>\n<span class=\"token comment\">//Output: [1,0]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 9.</span>\n<span class=\"token comment\">//Incrementing by one gives 9 + 1 = 10.</span>\n<span class=\"token comment\">//Thus, the result should be [1,0].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= digits.length &lt;= 100 </span>\n<span class=\"token comment\">// 0 &lt;= digits[i] &lt;= 9 </span>\n<span class=\"token comment\">// digits does not contain any leading 0's. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math </span>\n<span class=\"token comment\">// 👍 4783 👎 4316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span> all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> digit <span class=\"token operator\">:</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>all9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">boolean</span> carry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    carry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given a large integer represented as an integer array digits, where ea</span>\n<span class=\"token comment\">//ch digits[i] is the ith digit of the integer. The digits are ordered from most s</span>\n<span class=\"token comment\">//ignificant to least significant in left-to-right order. The large integer does n</span>\n<span class=\"token comment\">//ot contain any leading 0's. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Increment the large integer by one and return the resulting array of digits. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [1,2,3]</span>\n<span class=\"token comment\">//Output: [1,2,4]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 123.</span>\n<span class=\"token comment\">//Incrementing by one gives 123 + 1 = 124.</span>\n<span class=\"token comment\">//Thus, the result should be [1,2,4].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [4,3,2,1]</span>\n<span class=\"token comment\">//Output: [4,3,2,2]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 4321.</span>\n<span class=\"token comment\">//Incrementing by one gives 4321 + 1 = 4322.</span>\n<span class=\"token comment\">//Thus, the result should be [4,3,2,2].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: digits = [9]</span>\n<span class=\"token comment\">//Output: [1,0]</span>\n<span class=\"token comment\">//Explanation: The array represents the integer 9.</span>\n<span class=\"token comment\">//Incrementing by one gives 9 + 1 = 10.</span>\n<span class=\"token comment\">//Thus, the result should be [1,0].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= digits.length &lt;= 100 </span>\n<span class=\"token comment\">// 0 &lt;= digits[i] &lt;= 9 </span>\n<span class=\"token comment\">// digits does not contain any leading 0's. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Math </span>\n<span class=\"token comment\">// 👍 4783 👎 4316</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">boolean</span> all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> digit <span class=\"token operator\">:</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digit <span class=\"token operator\">!=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                all9 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>all9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">boolean</span> carry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    carry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-88","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-10T02:45:10.000Z","_content":"\n```java\n//You are given two integer arrays nums1 and nums2, sorted in non-decreasing ord\n//er, and two integers m and n, representing the number of elements in nums1 and n\n//ums2 respectively. \n//\n// Merge nums1 and nums2 into a single array sorted in non-decreasing order. \n//\n// The final sorted array should not be returned by the function, but instead be\n// stored inside the array nums1. To accommodate this, nums1 has a length of m + n\n//, where the first m elements denote the elements that should be merged, and the \n//last n elements are set to 0 and should be ignored. nums2 has a length of n. \n//\n// \n// Example 1: \n//\n// \n//Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n//Output: [1,2,2,3,5,6]\n//Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n//The result of the merge is [1,2,2,3,5,6] with the underlined elements coming f\n//rom nums1.\n// \n//\n// Example 2: \n//\n// \n//Input: nums1 = [1], m = 1, nums2 = [], n = 0\n//Output: [1]\n//Explanation: The arrays we are merging are [1] and [].\n//The result of the merge is [1].\n// \n//\n// Example 3: \n//\n// \n//Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n//Output: [1]\n//Explanation: The arrays we are merging are [] and [1].\n//The result of the merge is [1].\n//Note that because m = 0, there are no elements in nums1. The 0 is only there t\n//o ensure the merge result can fit in nums1.\n// \n//\n// \n// Constraints: \n//\n// \n// nums1.length == m + n \n// nums2.length == n \n// 0 <= m, n <= 200 \n// 1 <= m + n <= 200 \n// -109 <= nums1[i], nums2[j] <= 109 \n// \n//\n// \n// Follow up: Can you come up with an algorithm that runs in O(m + n) time? \n// Related Topics Array Two Pointers Sorting \n// 👍 6787 👎 599\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        if (n == 0) {\n            return;\n        }\n\n        if (m == 0) {\n            for (int i = 0; i < n; i++) {\n                nums1[i] = nums2[i];\n            }\n\n            return;\n        }\n\n        int index1 = m + n - 1, index2 = m - 1;\n        while(index2 >= 0) {\n            nums1[index1--] = nums1[index2--];\n        }\n\n        index1++;\n        index2 = 0;\n        int index = 0;\n\n        while (index < m + n) {\n            if (index1 == m + n) {\n                nums1[index++] = nums2[index2++];\n                continue;\n            }\n\n            if (index2 == n) {\n                nums1[index++] = nums1[index1++];\n                continue;\n            }\n\n            if (nums1[index1] < nums2[index2]) {\n                nums1[index++] = nums1[index1++];\n            } else {\n                nums1[index++] = nums2[index2++];\n            }\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n\n\n\n","source":"_posts/lc-88.md","raw":"---\ntitle: lc-88\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-10 10:45:10\n---\n\n```java\n//You are given two integer arrays nums1 and nums2, sorted in non-decreasing ord\n//er, and two integers m and n, representing the number of elements in nums1 and n\n//ums2 respectively. \n//\n// Merge nums1 and nums2 into a single array sorted in non-decreasing order. \n//\n// The final sorted array should not be returned by the function, but instead be\n// stored inside the array nums1. To accommodate this, nums1 has a length of m + n\n//, where the first m elements denote the elements that should be merged, and the \n//last n elements are set to 0 and should be ignored. nums2 has a length of n. \n//\n// \n// Example 1: \n//\n// \n//Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n//Output: [1,2,2,3,5,6]\n//Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\n//The result of the merge is [1,2,2,3,5,6] with the underlined elements coming f\n//rom nums1.\n// \n//\n// Example 2: \n//\n// \n//Input: nums1 = [1], m = 1, nums2 = [], n = 0\n//Output: [1]\n//Explanation: The arrays we are merging are [1] and [].\n//The result of the merge is [1].\n// \n//\n// Example 3: \n//\n// \n//Input: nums1 = [0], m = 0, nums2 = [1], n = 1\n//Output: [1]\n//Explanation: The arrays we are merging are [] and [1].\n//The result of the merge is [1].\n//Note that because m = 0, there are no elements in nums1. The 0 is only there t\n//o ensure the merge result can fit in nums1.\n// \n//\n// \n// Constraints: \n//\n// \n// nums1.length == m + n \n// nums2.length == n \n// 0 <= m, n <= 200 \n// 1 <= m + n <= 200 \n// -109 <= nums1[i], nums2[j] <= 109 \n// \n//\n// \n// Follow up: Can you come up with an algorithm that runs in O(m + n) time? \n// Related Topics Array Two Pointers Sorting \n// 👍 6787 👎 599\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        if (n == 0) {\n            return;\n        }\n\n        if (m == 0) {\n            for (int i = 0; i < n; i++) {\n                nums1[i] = nums2[i];\n            }\n\n            return;\n        }\n\n        int index1 = m + n - 1, index2 = m - 1;\n        while(index2 >= 0) {\n            nums1[index1--] = nums1[index2--];\n        }\n\n        index1++;\n        index2 = 0;\n        int index = 0;\n\n        while (index < m + n) {\n            if (index1 == m + n) {\n                nums1[index++] = nums2[index2++];\n                continue;\n            }\n\n            if (index2 == n) {\n                nums1[index++] = nums1[index1++];\n                continue;\n            }\n\n            if (nums1[index1] < nums2[index2]) {\n                nums1[index++] = nums1[index1++];\n            } else {\n                nums1[index++] = nums2[index2++];\n            }\n        }\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n\n\n\n","slug":"lc-88","published":1,"updated":"2022-08-11T07:53:09.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0700793suu8h1o0a8y","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given two integer arrays nums1 and nums2, sorted in non-decreasing ord</span>\n<span class=\"token comment\">//er, and two integers m and n, representing the number of elements in nums1 and n</span>\n<span class=\"token comment\">//ums2 respectively. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge nums1 and nums2 into a single array sorted in non-decreasing order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The final sorted array should not be returned by the function, but instead be</span>\n<span class=\"token comment\">// stored inside the array nums1. To accommodate this, nums1 has a length of m + n</span>\n<span class=\"token comment\">//, where the first m elements denote the elements that should be merged, and the </span>\n<span class=\"token comment\">//last n elements are set to 0 and should be ignored. nums2 has a length of n. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span>\n<span class=\"token comment\">//Output: [1,2,2,3,5,6]</span>\n<span class=\"token comment\">//Explanation: The arrays we are merging are [1,2,3] and [2,5,6].</span>\n<span class=\"token comment\">//The result of the merge is [1,2,2,3,5,6] with the underlined elements coming f</span>\n<span class=\"token comment\">//rom nums1.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums1 = [1], m = 1, nums2 = [], n = 0</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">//Explanation: The arrays we are merging are [1] and [].</span>\n<span class=\"token comment\">//The result of the merge is [1].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums1 = [0], m = 0, nums2 = [1], n = 1</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">//Explanation: The arrays we are merging are [] and [1].</span>\n<span class=\"token comment\">//The result of the merge is [1].</span>\n<span class=\"token comment\">//Note that because m = 0, there are no elements in nums1. The 0 is only there t</span>\n<span class=\"token comment\">//o ensure the merge result can fit in nums1.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// nums1.length == m + n </span>\n<span class=\"token comment\">// nums2.length == n </span>\n<span class=\"token comment\">// 0 &lt;= m, n &lt;= 200 </span>\n<span class=\"token comment\">// 1 &lt;= m + n &lt;= 200 </span>\n<span class=\"token comment\">// -109 &lt;= nums1[i], nums2[j] &lt;= 109 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Can you come up with an algorithm that runs in O(m + n) time? </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 6787 👎 599</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> index1 <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index2 <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index2 <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nums1<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        index1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        index2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">==</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index2 <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums2<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//You are given two integer arrays nums1 and nums2, sorted in non-decreasing ord</span>\n<span class=\"token comment\">//er, and two integers m and n, representing the number of elements in nums1 and n</span>\n<span class=\"token comment\">//ums2 respectively. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Merge nums1 and nums2 into a single array sorted in non-decreasing order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The final sorted array should not be returned by the function, but instead be</span>\n<span class=\"token comment\">// stored inside the array nums1. To accommodate this, nums1 has a length of m + n</span>\n<span class=\"token comment\">//, where the first m elements denote the elements that should be merged, and the </span>\n<span class=\"token comment\">//last n elements are set to 0 and should be ignored. nums2 has a length of n. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span>\n<span class=\"token comment\">//Output: [1,2,2,3,5,6]</span>\n<span class=\"token comment\">//Explanation: The arrays we are merging are [1,2,3] and [2,5,6].</span>\n<span class=\"token comment\">//The result of the merge is [1,2,2,3,5,6] with the underlined elements coming f</span>\n<span class=\"token comment\">//rom nums1.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums1 = [1], m = 1, nums2 = [], n = 0</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">//Explanation: The arrays we are merging are [1] and [].</span>\n<span class=\"token comment\">//The result of the merge is [1].</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums1 = [0], m = 0, nums2 = [1], n = 1</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">//Explanation: The arrays we are merging are [] and [1].</span>\n<span class=\"token comment\">//The result of the merge is [1].</span>\n<span class=\"token comment\">//Note that because m = 0, there are no elements in nums1. The 0 is only there t</span>\n<span class=\"token comment\">//o ensure the merge result can fit in nums1.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// nums1.length == m + n </span>\n<span class=\"token comment\">// nums2.length == n </span>\n<span class=\"token comment\">// 0 &lt;= m, n &lt;= 200 </span>\n<span class=\"token comment\">// 1 &lt;= m + n &lt;= 200 </span>\n<span class=\"token comment\">// -109 &lt;= nums1[i], nums2[j] &lt;= 109 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Follow up: Can you come up with an algorithm that runs in O(m + n) time? </span>\n<span class=\"token comment\">// Related Topics Array Two Pointers Sorting </span>\n<span class=\"token comment\">// 👍 6787 👎 599</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> index1 <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> index2 <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index2 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nums1<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        index1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        index2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">==</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index2 <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums2<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                nums1<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"lc-78","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-05T03:36:34.000Z","_content":"\n```java\n//Given an integer array nums of unique elements, return all possible subsets (t\n//he power set). \n//\n// The solution set must not contain duplicate subsets. Return the solution in a\n//ny order. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,2,3]\n//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0]\n//Output: [[],[0]]\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 10 \n// -10 <= nums[i] <= 10 \n// All the numbers of nums are unique. \n// \n// Related Topics Array Backtracking Bit Manipulation \n// 👍 11287 👎 167\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        if (nums == null) {\n            return null;\n        }\n\n        Set<List<Integer>> resultSet = new HashSet<>();\n\n        Arrays.sort(nums);\n        List<Integer> curList = new ArrayList<>();\n        calSubset(resultSet, curList, nums, 0);\n        return new ArrayList<>(resultSet);\n\n    }\n\n    void calSubset(Set<List<Integer>> resultSet, List<Integer> curList, int[] nums, int index) {\n        if (index == nums.length) {\n            List<Integer> copyList = new ArrayList<>(curList);\n            resultSet.add(copyList);\n            return;\n        }\n\n        curList.add(nums[index]);\n        calSubset(resultSet, curList, nums, index + 1);\n        curList.remove(curList.size() - 1);\n        calSubset(resultSet, curList, nums, index + 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-78.md","raw":"---\ntitle: lc-78\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-05 11:36:34\n---\n\n```java\n//Given an integer array nums of unique elements, return all possible subsets (t\n//he power set). \n//\n// The solution set must not contain duplicate subsets. Return the solution in a\n//ny order. \n//\n// \n// Example 1: \n//\n// \n//Input: nums = [1,2,3]\n//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n// \n//\n// Example 2: \n//\n// \n//Input: nums = [0]\n//Output: [[],[0]]\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= nums.length <= 10 \n// -10 <= nums[i] <= 10 \n// All the numbers of nums are unique. \n// \n// Related Topics Array Backtracking Bit Manipulation \n// 👍 11287 👎 167\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        if (nums == null) {\n            return null;\n        }\n\n        Set<List<Integer>> resultSet = new HashSet<>();\n\n        Arrays.sort(nums);\n        List<Integer> curList = new ArrayList<>();\n        calSubset(resultSet, curList, nums, 0);\n        return new ArrayList<>(resultSet);\n\n    }\n\n    void calSubset(Set<List<Integer>> resultSet, List<Integer> curList, int[] nums, int index) {\n        if (index == nums.length) {\n            List<Integer> copyList = new ArrayList<>(curList);\n            resultSet.add(copyList);\n            return;\n        }\n\n        curList.add(nums[index]);\n        calSubset(resultSet, curList, nums, index + 1);\n        curList.remove(curList.size() - 1);\n        calSubset(resultSet, curList, nums, index + 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-78","published":1,"updated":"2022-08-05T05:57:01.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc08007c3suu18d85ah6","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums of unique elements, return all possible subsets (t</span>\n<span class=\"token comment\">//he power set). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The solution set must not contain duplicate subsets. Return the solution in a</span>\n<span class=\"token comment\">//ny order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0]</span>\n<span class=\"token comment\">//Output: [[],[0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 10 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the numbers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking Bit Manipulation </span>\n<span class=\"token comment\">// 👍 11287 👎 167</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> curList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> copyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>copyList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given an integer array nums of unique elements, return all possible subsets (t</span>\n<span class=\"token comment\">//he power set). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The solution set must not contain duplicate subsets. Return the solution in a</span>\n<span class=\"token comment\">//ny order. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [1,2,3]</span>\n<span class=\"token comment\">//Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: nums = [0]</span>\n<span class=\"token comment\">//Output: [[],[0]]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= nums.length &lt;= 10 </span>\n<span class=\"token comment\">// -10 &lt;= nums[i] &lt;= 10 </span>\n<span class=\"token comment\">// All the numbers of nums are unique. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Array Backtracking Bit Manipulation </span>\n<span class=\"token comment\">// 👍 11287 👎 167</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">subsets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultSet<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> curList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> copyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>copyList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        curList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>curList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">calSubset</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">,</span> curList<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-91","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-11T07:53:04.000Z","_content":"\n```java\n//A message containing letters from A-Z can be encoded into numbers using the fo\n//llowing mapping: \n//\n// \n//'A' -> \"1\"\n//'B' -> \"2\"\n//...\n//'Z' -> \"26\"\n// \n//\n// To decode an encoded message, all the digits must be grouped then mapped back\n// into letters using the reverse of the mapping above (there may be multiple ways\n//). For example, \"11106\" can be mapped into: \n//\n// \n// \"AAJF\" with the grouping (1 1 10 6) \n// \"KJF\" with the grouping (11 10 6) \n// \n//\n// Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped int\n//o 'F' since \"6\" is different from \"06\". \n//\n// Given a string s containing only digits, return the number of ways to decode \n//it. \n//\n// The test cases are generated so that the answer fits in a 32-bit integer. \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"12\"\n//Output: 2\n//Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"226\"\n//Output: 3\n//Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2\n// 6).\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"06\"\n//Output: 0\n//Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is \n//different from \"06\").\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= s.length <= 100 \n// s contains only digits and may contain leading zero(s). \n// \n// Related Topics String Dynamic Programming \n// 👍 7632 👎 3950\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numDecodings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n\n        int[] f = new int[s.length() + 1];\n\n        if (s.charAt(0) == '0') {\n            return 0;\n        }\n\n        f[0] = 1;\n        f[1] = 1;\n\n        for (int i = 2; i <= s.length(); i++) {\n            int last = s.charAt(i - 2) - '0';\n            int cur = s.charAt(i - 1) - '0';\n\n            if (cur > 0) {\n                f[i] += f[i - 1];\n            }\n\n            if (last != 0 && (last * 10 + cur <= 26)) {\n                f[i] += f[i - 2];\n            }\n\n            if (f[i] == 0) {\n                return 0;\n            }\n        }\n\n        return f[s.length()];\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-91.md","raw":"---\ntitle: lc-91\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-11 15:53:04\n---\n\n```java\n//A message containing letters from A-Z can be encoded into numbers using the fo\n//llowing mapping: \n//\n// \n//'A' -> \"1\"\n//'B' -> \"2\"\n//...\n//'Z' -> \"26\"\n// \n//\n// To decode an encoded message, all the digits must be grouped then mapped back\n// into letters using the reverse of the mapping above (there may be multiple ways\n//). For example, \"11106\" can be mapped into: \n//\n// \n// \"AAJF\" with the grouping (1 1 10 6) \n// \"KJF\" with the grouping (11 10 6) \n// \n//\n// Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped int\n//o 'F' since \"6\" is different from \"06\". \n//\n// Given a string s containing only digits, return the number of ways to decode \n//it. \n//\n// The test cases are generated so that the answer fits in a 32-bit integer. \n//\n// \n// Example 1: \n//\n// \n//Input: s = \"12\"\n//Output: 2\n//Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n// \n//\n// Example 2: \n//\n// \n//Input: s = \"226\"\n//Output: 3\n//Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2\n// 6).\n// \n//\n// Example 3: \n//\n// \n//Input: s = \"06\"\n//Output: 0\n//Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is \n//different from \"06\").\n// \n//\n// \n// Constraints: \n//\n// \n// 1 <= s.length <= 100 \n// s contains only digits and may contain leading zero(s). \n// \n// Related Topics String Dynamic Programming \n// 👍 7632 👎 3950\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numDecodings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n\n        int[] f = new int[s.length() + 1];\n\n        if (s.charAt(0) == '0') {\n            return 0;\n        }\n\n        f[0] = 1;\n        f[1] = 1;\n\n        for (int i = 2; i <= s.length(); i++) {\n            int last = s.charAt(i - 2) - '0';\n            int cur = s.charAt(i - 1) - '0';\n\n            if (cur > 0) {\n                f[i] += f[i - 1];\n            }\n\n            if (last != 0 && (last * 10 + cur <= 26)) {\n                f[i] += f[i - 2];\n            }\n\n            if (f[i] == 0) {\n                return 0;\n            }\n        }\n\n        return f[s.length()];\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-91","published":1,"updated":"2022-08-11T08:25:53.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc08007f3suu8btpbhpk","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//A message containing letters from A-Z can be encoded into numbers using the fo</span>\n<span class=\"token comment\">//llowing mapping: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//'A' -&gt; \"1\"</span>\n<span class=\"token comment\">//'B' -&gt; \"2\"</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token comment\">//'Z' -&gt; \"26\"</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// To decode an encoded message, all the digits must be grouped then mapped back</span>\n<span class=\"token comment\">// into letters using the reverse of the mapping above (there may be multiple ways</span>\n<span class=\"token comment\">//). For example, \"11106\" can be mapped into: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// \"AAJF\" with the grouping (1 1 10 6) </span>\n<span class=\"token comment\">// \"KJF\" with the grouping (11 10 6) </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped int</span>\n<span class=\"token comment\">//o 'F' since \"6\" is different from \"06\". </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given a string s containing only digits, return the number of ways to decode </span>\n<span class=\"token comment\">//it. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The test cases are generated so that the answer fits in a 32-bit integer. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"12\"</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"226\"</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2</span>\n<span class=\"token comment\">// 6).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"06\"</span>\n<span class=\"token comment\">//Output: 0</span>\n<span class=\"token comment\">//Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is </span>\n<span class=\"token comment\">//different from \"06\").</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= s.length &lt;= 100 </span>\n<span class=\"token comment\">// s contains only digits and may contain leading zero(s). </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming </span>\n<span class=\"token comment\">// 👍 7632 👎 3950</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numDecodings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> cur <span class=\"token operator\">&lt;=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//A message containing letters from A-Z can be encoded into numbers using the fo</span>\n<span class=\"token comment\">//llowing mapping: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//'A' -> \"1\"</span>\n<span class=\"token comment\">//'B' -> \"2\"</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token comment\">//'Z' -> \"26\"</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// To decode an encoded message, all the digits must be grouped then mapped back</span>\n<span class=\"token comment\">// into letters using the reverse of the mapping above (there may be multiple ways</span>\n<span class=\"token comment\">//). For example, \"11106\" can be mapped into: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// \"AAJF\" with the grouping (1 1 10 6) </span>\n<span class=\"token comment\">// \"KJF\" with the grouping (11 10 6) </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped int</span>\n<span class=\"token comment\">//o 'F' since \"6\" is different from \"06\". </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Given a string s containing only digits, return the number of ways to decode </span>\n<span class=\"token comment\">//it. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The test cases are generated so that the answer fits in a 32-bit integer. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"12\"</span>\n<span class=\"token comment\">//Output: 2</span>\n<span class=\"token comment\">//Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"226\"</span>\n<span class=\"token comment\">//Output: 3</span>\n<span class=\"token comment\">//Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2</span>\n<span class=\"token comment\">// 6).</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: s = \"06\"</span>\n<span class=\"token comment\">//Output: 0</span>\n<span class=\"token comment\">//Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is </span>\n<span class=\"token comment\">//different from \"06\").</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// 1 &lt;= s.length &lt;= 100 </span>\n<span class=\"token comment\">// s contains only digits and may contain leading zero(s). </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics String Dynamic Programming </span>\n<span class=\"token comment\">// 👍 7632 👎 3950</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numDecodings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> cur <span class=\"token operator\">&lt;=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-94","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-12T03:17:32.000Z","_content":"\n```java\n//Given the root of a binary tree, return the inorder traversal of its nodes' va\n//lues. \n//\n// \n// Example 1: \n//\n// \n//Input: root = [1,null,2,3]\n//Output: [1,3,2]\n// \n//\n// Example 2: \n//\n// \n//Input: root = []\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: root = [1]\n//Output: [1]\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the tree is in the range [0, 100]. \n// -100 <= Node.val <= 100 \n// \n//\n// \n//Follow up: Recursive solution is trivial, could you do it iteratively? Related\n// Topics Stack Tree Depth-First Search Binary Tree \n// 👍 8683 👎 405\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.Stack;\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        Stack<TreeNode> nodeStack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        Set<TreeNode> leftVisited = new HashSet<>();\n        if (root == null) {\n            return result;\n        }\n\n        nodeStack.push(root);\n\n        while (!nodeStack.isEmpty()) {\n            if (nodeStack.peek().left != null && !leftVisited.contains(nodeStack.peek().left)) {\n                nodeStack.push(nodeStack.peek().left);\n                leftVisited.add(nodeStack.peek());\n            } else {\n                TreeNode node = nodeStack.pop();\n                result.add(node.val);\n\n                if (node.right != null) {\n                    nodeStack.push(node.right);\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-94.md","raw":"---\ntitle: lc-94\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-12 11:17:32\n---\n\n```java\n//Given the root of a binary tree, return the inorder traversal of its nodes' va\n//lues. \n//\n// \n// Example 1: \n//\n// \n//Input: root = [1,null,2,3]\n//Output: [1,3,2]\n// \n//\n// Example 2: \n//\n// \n//Input: root = []\n//Output: []\n// \n//\n// Example 3: \n//\n// \n//Input: root = [1]\n//Output: [1]\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the tree is in the range [0, 100]. \n// -100 <= Node.val <= 100 \n// \n//\n// \n//Follow up: Recursive solution is trivial, could you do it iteratively? Related\n// Topics Stack Tree Depth-First Search Binary Tree \n// 👍 8683 👎 405\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.Stack;\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        Stack<TreeNode> nodeStack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        Set<TreeNode> leftVisited = new HashSet<>();\n        if (root == null) {\n            return result;\n        }\n\n        nodeStack.push(root);\n\n        while (!nodeStack.isEmpty()) {\n            if (nodeStack.peek().left != null && !leftVisited.contains(nodeStack.peek().left)) {\n                nodeStack.push(nodeStack.peek().left);\n                leftVisited.add(nodeStack.peek());\n            } else {\n                TreeNode node = nodeStack.pop();\n                result.add(node.val);\n\n                if (node.right != null) {\n                    nodeStack.push(node.right);\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-94","published":1,"updated":"2022-08-12T06:24:38.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc09007i3suu1v1gf2rc","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the root of a binary tree, return the inorder traversal of its nodes' va</span>\n<span class=\"token comment\">//lues. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1,null,2,3]</span>\n<span class=\"token comment\">//Output: [1,3,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1]</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the tree is in the range [0, 100]. </span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Recursive solution is trivial, could you do it iteratively? Related</span>\n<span class=\"token comment\">// Topics Stack Tree Depth-First Search Binary Tree </span>\n<span class=\"token comment\">// 👍 8683 👎 405</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> leftVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>leftVisited<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                leftVisited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the root of a binary tree, return the inorder traversal of its nodes' va</span>\n<span class=\"token comment\">//lues. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1,null,2,3]</span>\n<span class=\"token comment\">//Output: [1,3,2]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = []</span>\n<span class=\"token comment\">//Output: []</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 3: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [1]</span>\n<span class=\"token comment\">//Output: [1]</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the tree is in the range [0, 100]. </span>\n<span class=\"token comment\">// -100 &lt;= Node.val &lt;= 100 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Follow up: Recursive solution is trivial, could you do it iteratively? Related</span>\n<span class=\"token comment\">// Topics Stack Tree Depth-First Search Binary Tree </span>\n<span class=\"token comment\">// 👍 8683 👎 405</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> leftVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>leftVisited<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                leftVisited<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"lc-98","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-08-15T03:32:43.000Z","_content":"\n```java\n//Given the root of a binary tree, determine if it is a valid binary search tree\n// (BST). \n//\n// A valid BST is defined as follows: \n//\n// \n// The left subtree of a node contains only nodes with keys less than the node's\n// key. \n// The right subtree of a node contains only nodes with keys greater than the no\n//de's key. \n// Both the left and right subtrees must also be binary search trees. \n// \n//\n// \n// Example 1: \n//\n// \n//Input: root = [2,1,3]\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: root = [5,1,4,null,null,3,6]\n//Output: false\n//Explanation: The root node's value is 5 but its right child's value is 4.\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the tree is in the range [1, 104]. \n// -231 <= Node.val <= 231 - 1 \n// \n// Related Topics Tree Depth-First Search Binary Search Tree Binary Tree \n// 👍 11931 👎 978\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        Map<TreeNode, Integer> maxMap = new HashMap<>();\n        Map<TreeNode, Integer> minMap = new HashMap<>();\n\n\n        return isValidBST(root, maxMap, minMap);\n    }\n\n    boolean isValidBST(TreeNode node, Map<TreeNode, Integer> maxMap, Map<TreeNode, Integer> minMap) {\n        if (node.left != null) {\n            int leftMax = getMax(node.left, maxMap);\n\n            if (leftMax >= node.val) {\n                return false;\n            }\n\n            if (!isValidBST(node.left, maxMap, minMap)) {\n                return false;\n            }\n        }\n        if (node.right != null) {\n            int rightMin = getMin(node.right, minMap);\n\n            if (rightMin <= node.val) {\n                return false;\n            }\n\n            if (!isValidBST(node.right, maxMap, minMap)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n    int getMax(TreeNode node, Map<TreeNode, Integer> maxMap) {\n        if (maxMap.containsKey(node)) {\n            maxMap.get(node);\n        }\n\n        int leftMax = node.left != null ? getMax(node.left, maxMap) : Integer.MIN_VALUE;\n        int rightMax = node.right != null ? getMax(node.right, maxMap) : Integer.MIN_VALUE;\n\n        int max = Math.max(Math.max(node.val, leftMax), rightMax);\n\n        maxMap.put(node, max);\n        return max;\n    }\n\n    int getMin(TreeNode node, Map<TreeNode, Integer> minMap) {\n        if (minMap.containsKey(node)) {\n            minMap.get(node);\n        }\n\n        int leftMin = node.left != null ? getMin(node.left, minMap) : Integer.MAX_VALUE;\n        int rightMin = node.right != null ? getMin(node.right, minMap) : Integer.MAX_VALUE;\n\n        int min = Math.min(Math.min(node.val, leftMin), rightMin);\n\n        minMap.put(node, min);\n        return min;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/lc-98.md","raw":"---\ntitle: lc-98\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-08-15 11:32:43\n---\n\n```java\n//Given the root of a binary tree, determine if it is a valid binary search tree\n// (BST). \n//\n// A valid BST is defined as follows: \n//\n// \n// The left subtree of a node contains only nodes with keys less than the node's\n// key. \n// The right subtree of a node contains only nodes with keys greater than the no\n//de's key. \n// Both the left and right subtrees must also be binary search trees. \n// \n//\n// \n// Example 1: \n//\n// \n//Input: root = [2,1,3]\n//Output: true\n// \n//\n// Example 2: \n//\n// \n//Input: root = [5,1,4,null,null,3,6]\n//Output: false\n//Explanation: The root node's value is 5 but its right child's value is 4.\n// \n//\n// \n// Constraints: \n//\n// \n// The number of nodes in the tree is in the range [1, 104]. \n// -231 <= Node.val <= 231 - 1 \n// \n// Related Topics Tree Depth-First Search Binary Search Tree Binary Tree \n// 👍 11931 👎 978\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        Map<TreeNode, Integer> maxMap = new HashMap<>();\n        Map<TreeNode, Integer> minMap = new HashMap<>();\n\n\n        return isValidBST(root, maxMap, minMap);\n    }\n\n    boolean isValidBST(TreeNode node, Map<TreeNode, Integer> maxMap, Map<TreeNode, Integer> minMap) {\n        if (node.left != null) {\n            int leftMax = getMax(node.left, maxMap);\n\n            if (leftMax >= node.val) {\n                return false;\n            }\n\n            if (!isValidBST(node.left, maxMap, minMap)) {\n                return false;\n            }\n        }\n        if (node.right != null) {\n            int rightMin = getMin(node.right, minMap);\n\n            if (rightMin <= node.val) {\n                return false;\n            }\n\n            if (!isValidBST(node.right, maxMap, minMap)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n    int getMax(TreeNode node, Map<TreeNode, Integer> maxMap) {\n        if (maxMap.containsKey(node)) {\n            maxMap.get(node);\n        }\n\n        int leftMax = node.left != null ? getMax(node.left, maxMap) : Integer.MIN_VALUE;\n        int rightMax = node.right != null ? getMax(node.right, maxMap) : Integer.MIN_VALUE;\n\n        int max = Math.max(Math.max(node.val, leftMax), rightMax);\n\n        maxMap.put(node, max);\n        return max;\n    }\n\n    int getMin(TreeNode node, Map<TreeNode, Integer> minMap) {\n        if (minMap.containsKey(node)) {\n            minMap.get(node);\n        }\n\n        int leftMin = node.left != null ? getMin(node.left, minMap) : Integer.MAX_VALUE;\n        int rightMin = node.right != null ? getMin(node.right, minMap) : Integer.MAX_VALUE;\n\n        int min = Math.min(Math.min(node.val, leftMin), rightMin);\n\n        minMap.put(node, min);\n        return min;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"lc-98","published":1,"updated":"2022-08-15T06:10:54.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc09007l3suu61xvbw94","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the root of a binary tree, determine if it is a valid binary search tree</span>\n<span class=\"token comment\">// (BST). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A valid BST is defined as follows: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The left subtree of a node contains only nodes with keys less than the node's</span>\n<span class=\"token comment\">// key. </span>\n<span class=\"token comment\">// The right subtree of a node contains only nodes with keys greater than the no</span>\n<span class=\"token comment\">//de's key. </span>\n<span class=\"token comment\">// Both the left and right subtrees must also be binary search trees. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [2,1,3]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [5,1,4,null,null,3,6]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: The root node's value is 5 but its right child's value is 4.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the tree is in the range [1, 104]. </span>\n<span class=\"token comment\">// -231 &lt;= Node.val &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Tree Depth-First Search Binary Search Tree Binary Tree </span>\n<span class=\"token comment\">// 👍 11931 👎 978</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> maxMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> minMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> maxMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> minMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">&gt;=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> rightMin <span class=\"token operator\">=</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightMin <span class=\"token operator\">&lt;=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> maxMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightMax <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> leftMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        maxMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> minMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            minMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> leftMin <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightMin <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> leftMin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rightMin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        minMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//Given the root of a binary tree, determine if it is a valid binary search tree</span>\n<span class=\"token comment\">// (BST). </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A valid BST is defined as follows: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The left subtree of a node contains only nodes with keys less than the node's</span>\n<span class=\"token comment\">// key. </span>\n<span class=\"token comment\">// The right subtree of a node contains only nodes with keys greater than the no</span>\n<span class=\"token comment\">//de's key. </span>\n<span class=\"token comment\">// Both the left and right subtrees must also be binary search trees. </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Example 1: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [2,1,3]</span>\n<span class=\"token comment\">//Output: true</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Example 2: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//Input: root = [5,1,4,null,null,3,6]</span>\n<span class=\"token comment\">//Output: false</span>\n<span class=\"token comment\">//Explanation: The root node's value is 5 but its right child's value is 4.</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Constraints: </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// The number of nodes in the tree is in the range [1, 104]. </span>\n<span class=\"token comment\">// -231 &lt;= Node.val &lt;= 231 - 1 </span>\n<span class=\"token comment\">// </span>\n<span class=\"token comment\">// Related Topics Tree Depth-First Search Binary Search Tree Binary Tree </span>\n<span class=\"token comment\">// 👍 11931 👎 978</span>\n\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> maxMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> minMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> maxMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> minMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftMax <span class=\"token operator\">>=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> rightMin <span class=\"token operator\">=</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightMin <span class=\"token operator\">&lt;=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidBST</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> maxMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> leftMax <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightMax <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> maxMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> leftMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rightMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        maxMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> minMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            minMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> leftMin <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightMin <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> minMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> leftMin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rightMin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        minMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-06","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-02T03:33:54.000Z","_content":"\n```java\n/**\n输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 \n\n \n\n 示例 1： \n\n 输入：head = [1,3,2]\n输出：[2,3,1] \n\n \n\n 限制： \n\n 0 <= 链表长度 <= 10000 \n Related Topics栈 | 递归 | 链表 | 双指针 \n\n 👍 354, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] reversePrint(ListNode head) {\n        int len = 0;\n        ListNode node = head;\n        while (node != null) {\n            len++;\n            node = node.next;\n        }\n\n        int[] result = new int[len];\n        doReverse(head, result, len - 1);\n        return result;\n    }\n\n    private void doReverse(ListNode node, int[] result, int curIndex) {\n        if (node == null) {\n            return;\n        }\n\n        doReverse(node.next, result, curIndex - 1);\n        result[curIndex] = node.val;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-06.md","raw":"---\ntitle: offer-06\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-02 11:33:54\n---\n\n```java\n/**\n输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 \n\n \n\n 示例 1： \n\n 输入：head = [1,3,2]\n输出：[2,3,1] \n\n \n\n 限制： \n\n 0 <= 链表长度 <= 10000 \n Related Topics栈 | 递归 | 链表 | 双指针 \n\n 👍 354, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] reversePrint(ListNode head) {\n        int len = 0;\n        ListNode node = head;\n        while (node != null) {\n            len++;\n            node = node.next;\n        }\n\n        int[] result = new int[len];\n        doReverse(head, result, len - 1);\n        return result;\n    }\n\n    private void doReverse(ListNode node, int[] result, int curIndex) {\n        if (node == null) {\n            return;\n        }\n\n        doReverse(node.next, result, curIndex - 1);\n        result[curIndex] = node.val;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-06","published":1,"updated":"2022-12-02T06:54:33.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0a007o3suuhsaw8dx0","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 \n\n \n\n 示例 1： \n\n 输入：head = [1,3,2]\n输出：[2,3,1] \n\n \n\n 限制： \n\n 0 &lt;= 链表长度 &lt;= 10000 \n Related Topics栈 | 递归 | 链表 | 双指针 \n\n 👍 354, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reversePrint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doReverse</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doReverse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">doReverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> curIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 \n\n \n\n 示例 1： \n\n 输入：head = [1,3,2]\n输出：[2,3,1] \n\n \n\n 限制： \n\n 0 &lt;= 链表长度 &lt;= 10000 \n Related Topics栈 | 递归 | 链表 | 双指针 \n\n 👍 354, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reversePrint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doReverse</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doReverse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">doReverse</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> curIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-04","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-29T02:52:52.000Z","_content":"\n```java\n/**\n在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数\n组和一个整数，判断数组中是否含有该整数。 \n\n \n\n 示例: \n\n 现有矩阵 matrix 如下： \n\n \n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n \n\n 给定 target = 5，返回 true。 \n\n 给定 target = 20，返回 false。 \n\n \n\n 限制： \n\n 0 <= n <= 1000 \n\n 0 <= m <= 1000 \n\n \n\n 注意：本题与主站 240 题相同：https://leetcode-cn.com/problems/search-a-2d-matrix-ii/ \n Related Topics数组 | 二分查找 | 分治 | 矩阵 \n\n 👍 826, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean findNumberIn2DArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return false;\n        }\n\n        int i = matrix.length - 1, j = 0;\n\n        while (i >= 0 && j < matrix[0].length) {\n            if (matrix[i][j] == target) {\n                return true;\n            } else if (matrix[i][j] < target) {\n                j++;\n            } else {\n                i--;\n            }\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-04.md","raw":"---\ntitle: offer-04\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-29 10:52:52\n---\n\n```java\n/**\n在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数\n组和一个整数，判断数组中是否含有该整数。 \n\n \n\n 示例: \n\n 现有矩阵 matrix 如下： \n\n \n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n \n\n 给定 target = 5，返回 true。 \n\n 给定 target = 20，返回 false。 \n\n \n\n 限制： \n\n 0 <= n <= 1000 \n\n 0 <= m <= 1000 \n\n \n\n 注意：本题与主站 240 题相同：https://leetcode-cn.com/problems/search-a-2d-matrix-ii/ \n Related Topics数组 | 二分查找 | 分治 | 矩阵 \n\n 👍 826, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean findNumberIn2DArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return false;\n        }\n\n        int i = matrix.length - 1, j = 0;\n\n        while (i >= 0 && j < matrix[0].length) {\n            if (matrix[i][j] == target) {\n                return true;\n            } else if (matrix[i][j] < target) {\n                j++;\n            } else {\n                i--;\n            }\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-04","published":1,"updated":"2022-11-30T03:54:45.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0a007r3suu5kn4aact","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数\n组和一个整数，判断数组中是否含有该整数。 \n\n \n\n 示例: \n\n 现有矩阵 matrix 如下： \n\n \n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n \n\n 给定 target = 5，返回 true。 \n\n 给定 target = 20，返回 false。 \n\n \n\n 限制： \n\n 0 &lt;= n &lt;= 1000 \n\n 0 &lt;= m &lt;= 1000 \n\n \n\n 注意：本题与主站 240 题相同：https://leetcode-cn.com/problems/search-a-2d-matrix-ii/ \n Related Topics数组 | 二分查找 | 分治 | 矩阵 \n\n 👍 826, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">findNumberIn2DArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数\n组和一个整数，判断数组中是否含有该整数。 \n\n \n\n 示例: \n\n 现有矩阵 matrix 如下： \n\n \n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n \n\n 给定 target = 5，返回 true。 \n\n 给定 target = 20，返回 false。 \n\n \n\n 限制： \n\n 0 &lt;= n &lt;= 1000 \n\n 0 &lt;= m &lt;= 1000 \n\n \n\n 注意：本题与主站 240 题相同：https://leetcode-cn.com/problems/search-a-2d-matrix-ii/ \n Related Topics数组 | 二分查找 | 分治 | 矩阵 \n\n 👍 826, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">findNumberIn2DArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-03","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-11-24T15:38:00.000Z","_content":"\n```java\n/**\n找出数组中重复的数字。 \n\n \n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出\n数组中任意一个重复的数字。 \n\n 示例 1： \n\n 输入：\n[2, 3, 1, 0, 2, 5, 3]\n输出：2 或 3 \n \n\n \n\n 限制： \n\n 2 <= n <= 100000 \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 1007, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findRepeatNumber(int[] nums) {\n        for (int i = 0; i < nums.length; i++) {\n            int targetIndex = nums[i] < 0 ? -(nums[i] + 1) : nums[i];\n\n            if (nums[targetIndex] < 0) {\n                return targetIndex;\n            }\n\n            nums[targetIndex] = -(nums[targetIndex] + 1);\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-03.md","raw":"---\ntitle: offer-03\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-11-24 23:38:00\n---\n\n```java\n/**\n找出数组中重复的数字。 \n\n \n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出\n数组中任意一个重复的数字。 \n\n 示例 1： \n\n 输入：\n[2, 3, 1, 0, 2, 5, 3]\n输出：2 或 3 \n \n\n \n\n 限制： \n\n 2 <= n <= 100000 \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 1007, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findRepeatNumber(int[] nums) {\n        for (int i = 0; i < nums.length; i++) {\n            int targetIndex = nums[i] < 0 ? -(nums[i] + 1) : nums[i];\n\n            if (nums[targetIndex] < 0) {\n                return targetIndex;\n            }\n\n            nums[targetIndex] = -(nums[targetIndex] + 1);\n        }\n\n        return -1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-03","published":1,"updated":"2022-11-28T15:40:47.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0b007u3suub14a41rv","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n找出数组中重复的数字。 \n\n \n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出\n数组中任意一个重复的数字。 \n\n 示例 1： \n\n 输入：\n[2, 3, 1, 0, 2, 5, 3]\n输出：2 或 3 \n \n\n \n\n 限制： \n\n 2 &lt;= n &lt;= 100000 \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 1007, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findRepeatNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> targetIndex <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> targetIndex<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            nums<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n找出数组中重复的数字。 \n\n \n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出\n数组中任意一个重复的数字。 \n\n 示例 1： \n\n 输入：\n[2, 3, 1, 0, 2, 5, 3]\n输出：2 或 3 \n \n\n \n\n 限制： \n\n 2 &lt;= n &lt;= 100000 \n Related Topics数组 | 哈希表 | 排序 \n\n 👍 1007, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findRepeatNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> targetIndex <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> targetIndex<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            nums<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-05","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-01T03:21:27.000Z","_content":"\n```java\n/**\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。 \n\n \n\n 示例 1： \n\n 输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\" \n\n \n\n 限制： \n\n 0 <= s 的长度 <= 10000 \n Related Topics字符串 \n\n 👍 375, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String replaceSpace(String s) {\n        StringBuilder sBuilder = new StringBuilder();\n\n        for (char ch : s.toCharArray()) {\n            if (ch == ' ') {\n                sBuilder.append(\"%20\");\n            } else {\n                sBuilder.append(ch);\n            }\n        }\n\n        return sBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-05.md","raw":"---\ntitle: offer-05\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-01 11:21:27\n---\n\n```java\n/**\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。 \n\n \n\n 示例 1： \n\n 输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\" \n\n \n\n 限制： \n\n 0 <= s 的长度 <= 10000 \n Related Topics字符串 \n\n 👍 375, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String replaceSpace(String s) {\n        StringBuilder sBuilder = new StringBuilder();\n\n        for (char ch : s.toCharArray()) {\n            if (ch == ' ') {\n                sBuilder.append(\"%20\");\n            } else {\n                sBuilder.append(ch);\n            }\n        }\n\n        return sBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-05","published":1,"updated":"2022-12-01T06:20:43.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0b007x3suu6bqcfv3r","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。 \n\n \n\n 示例 1： \n\n 输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\" \n\n \n\n 限制： \n\n 0 &lt;= s 的长度 &lt;= 10000 \n Related Topics字符串 \n\n 👍 375, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceSpace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> sBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。 \n\n \n\n 示例 1： \n\n 输入：s = \"We are happy.\"\n输出：\"We%20are%20happy.\" \n\n \n\n 限制： \n\n 0 &lt;= s 的长度 &lt;= 10000 \n Related Topics字符串 \n\n 👍 375, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replaceSpace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> sBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-07","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-05T03:21:06.000Z","_content":"\n```java\n/**\n输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。\n\n 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n\n\n\n 示例 1:\n\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\n\n 示例 2:\n\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n\n\n\n 限制：\n\n 0 <= 节点个数 <= 5000\n\n\n\n 注意：本题与主站 105 题重复：https://leetcode-cn.com/problems/construct-binary-tree-from-\npreorder-and-inorder-traversal/\n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树\n\n 👍 943, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return build(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);\n    }\n\n    private TreeNode build(int[] preorder, int[] inorder, int preStart, int preEnd, int inStart, int inEnd) {\n        if (preEnd < preStart || inEnd < inStart || preStart < 0 || inStart < 0 || preEnd >= preorder.length || inEnd >= inorder.length) {\n            return null;\n        }\n\n        TreeNode node = new TreeNode();\n        node.val = preorder[preStart];\n        if (preEnd == preStart || inEnd == inStart) {\n            return node;\n        }\n        int leftNum = 0;\n        for (leftNum = inStart; leftNum <= inEnd; leftNum++) {\n            if (preorder[preStart] == inorder[leftNum]) {\n                break;\n            }\n        }\n        leftNum = (leftNum - inStart);\n\n\n        node.left = build(preorder, inorder, preStart + 1, preStart + leftNum, inStart, inStart + leftNum - 1);\n        node.right = build(preorder, inorder, preStart + leftNum + 1, preEnd, inStart + leftNum + 1, inEnd);\n        return node;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-07.md","raw":"---\ntitle: offer-07\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-05 11:21:06\n---\n\n```java\n/**\n输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。\n\n 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n\n\n\n 示例 1:\n\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\n\n 示例 2:\n\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n\n\n\n 限制：\n\n 0 <= 节点个数 <= 5000\n\n\n\n 注意：本题与主站 105 题重复：https://leetcode-cn.com/problems/construct-binary-tree-from-\npreorder-and-inorder-traversal/\n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树\n\n 👍 943, 👎 0\n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return build(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);\n    }\n\n    private TreeNode build(int[] preorder, int[] inorder, int preStart, int preEnd, int inStart, int inEnd) {\n        if (preEnd < preStart || inEnd < inStart || preStart < 0 || inStart < 0 || preEnd >= preorder.length || inEnd >= inorder.length) {\n            return null;\n        }\n\n        TreeNode node = new TreeNode();\n        node.val = preorder[preStart];\n        if (preEnd == preStart || inEnd == inStart) {\n            return node;\n        }\n        int leftNum = 0;\n        for (leftNum = inStart; leftNum <= inEnd; leftNum++) {\n            if (preorder[preStart] == inorder[leftNum]) {\n                break;\n            }\n        }\n        leftNum = (leftNum - inStart);\n\n\n        node.left = build(preorder, inorder, preStart + 1, preStart + leftNum, inStart, inStart + leftNum - 1);\n        node.right = build(preorder, inorder, preStart + leftNum + 1, preEnd, inStart + leftNum + 1, inEnd);\n        return node;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-07","published":1,"updated":"2022-12-05T08:24:14.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0c00803suuf0r08oy9","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。\n\n 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n\n\n\n 示例 1:\n\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\n\n 示例 2:\n\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n\n\n\n 限制：\n\n 0 &lt;= 节点个数 &lt;= 5000\n\n\n\n 注意：本题与主站 105 题重复：https://leetcode-cn.com/problems/construct-binary-tree-from-\npreorder-and-inorder-traversal/\n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树\n\n 👍 943, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preEnd <span class=\"token operator\">&lt;</span> preStart <span class=\"token operator\">||</span> inEnd <span class=\"token operator\">&lt;</span> inStart <span class=\"token operator\">||</span> preStart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> inStart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> preEnd <span class=\"token operator\">&gt;=</span> preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> inEnd <span class=\"token operator\">&gt;=</span> inorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> preorder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preEnd <span class=\"token operator\">==</span> preStart <span class=\"token operator\">||</span> inEnd <span class=\"token operator\">==</span> inStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> leftNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">=</span> inStart<span class=\"token punctuation\">;</span> leftNum <span class=\"token operator\">&lt;=</span> inEnd<span class=\"token punctuation\">;</span> leftNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> inorder<span class=\"token punctuation\">[</span>leftNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        leftNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">-</span> inStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> leftNum<span class=\"token punctuation\">,</span> inStart<span class=\"token punctuation\">,</span> inStart <span class=\"token operator\">+</span> leftNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> leftNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preEnd<span class=\"token punctuation\">,</span> inStart <span class=\"token operator\">+</span> leftNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。\n\n 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n\n\n\n 示例 1:\n\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\n\n 示例 2:\n\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n\n\n\n 限制：\n\n 0 &lt;= 节点个数 &lt;= 5000\n\n\n\n 注意：本题与主站 105 题重复：https://leetcode-cn.com/problems/construct-binary-tree-from-\npreorder-and-inorder-traversal/\n Related Topics树 | 数组 | 哈希表 | 分治 | 二叉树\n\n 👍 943, 👎 0\n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preEnd <span class=\"token operator\">&lt;</span> preStart <span class=\"token operator\">||</span> inEnd <span class=\"token operator\">&lt;</span> inStart <span class=\"token operator\">||</span> preStart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> inStart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> preEnd <span class=\"token operator\">>=</span> preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> inEnd <span class=\"token operator\">>=</span> inorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> preorder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preEnd <span class=\"token operator\">==</span> preStart <span class=\"token operator\">||</span> inEnd <span class=\"token operator\">==</span> inStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> leftNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">=</span> inStart<span class=\"token punctuation\">;</span> leftNum <span class=\"token operator\">&lt;=</span> inEnd<span class=\"token punctuation\">;</span> leftNum<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> inorder<span class=\"token punctuation\">[</span>leftNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        leftNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">-</span> inStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> leftNum<span class=\"token punctuation\">,</span> inStart<span class=\"token punctuation\">,</span> inStart <span class=\"token operator\">+</span> leftNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> leftNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preEnd<span class=\"token punctuation\">,</span> inStart <span class=\"token operator\">+</span> leftNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-09","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-06T02:56:44.000Z","_content":"\n```java\n/**\n用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能\n。(若队列中没有元素，deleteHead 操作返回 -1 ) \n\n \n\n 示例 1： \n\n \n输入：\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[],[]]\n输出：[null,null,3,-1,-1]\n \n\n 示例 2： \n\n \n输入：\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n输出：[null,-1,null,null,5,2]\n \n\n 提示： \n\n \n 1 <= values <= 10000 \n 最多会对 appendTail、deleteHead 进行 10000 次调用 \n \n Related Topics栈 | 设计 | 队列 \n\n 👍 633, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass CQueue {\n\n    private Stack<Integer> stackAppend;\n    private Stack<Integer> stackDelete;\n\n    public CQueue() {\n        this.stackAppend = new Stack<>();\n        this.stackDelete = new Stack<>();\n    }\n\n    public void appendTail(int value) {\n        this.stackAppend.push(value);\n    }\n\n    public int deleteHead() {\n        if (this.stackAppend.isEmpty() && this.stackDelete.isEmpty()) {\n            return -1;\n        }\n\n        if (!stackDelete.isEmpty()) {\n            return stackDelete.pop();\n        }\n\n        while (!stackAppend.isEmpty()) {\n            stackDelete.push(stackAppend.pop());\n        }\n        return stackDelete.pop();\n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue obj = new CQueue();\n * obj.appendTail(value);\n * int param_2 = obj.deleteHead();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```","source":"_posts/offer-09.md","raw":"---\ntitle: offer-09\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-06 10:56:44\n---\n\n```java\n/**\n用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能\n。(若队列中没有元素，deleteHead 操作返回 -1 ) \n\n \n\n 示例 1： \n\n \n输入：\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[],[]]\n输出：[null,null,3,-1,-1]\n \n\n 示例 2： \n\n \n输入：\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n输出：[null,-1,null,null,5,2]\n \n\n 提示： \n\n \n 1 <= values <= 10000 \n 最多会对 appendTail、deleteHead 进行 10000 次调用 \n \n Related Topics栈 | 设计 | 队列 \n\n 👍 633, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass CQueue {\n\n    private Stack<Integer> stackAppend;\n    private Stack<Integer> stackDelete;\n\n    public CQueue() {\n        this.stackAppend = new Stack<>();\n        this.stackDelete = new Stack<>();\n    }\n\n    public void appendTail(int value) {\n        this.stackAppend.push(value);\n    }\n\n    public int deleteHead() {\n        if (this.stackAppend.isEmpty() && this.stackDelete.isEmpty()) {\n            return -1;\n        }\n\n        if (!stackDelete.isEmpty()) {\n            return stackDelete.pop();\n        }\n\n        while (!stackAppend.isEmpty()) {\n            stackDelete.push(stackAppend.pop());\n        }\n        return stackDelete.pop();\n    }\n}\n\n/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue obj = new CQueue();\n * obj.appendTail(value);\n * int param_2 = obj.deleteHead();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```","slug":"offer-09","published":1,"updated":"2022-12-07T03:29:36.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0d00833suu2dex2dvi","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能\n。(若队列中没有元素，deleteHead 操作返回 -1 ) \n\n \n\n 示例 1： \n\n \n输入：\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[],[]]\n输出：[null,null,3,-1,-1]\n \n\n 示例 2： \n\n \n输入：\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n输出：[null,-1,null,null,5,2]\n \n\n 提示： \n\n \n 1 &lt;= values &lt;= 10000 \n 最多会对 appendTail、deleteHead 进行 10000 次调用 \n \n Related Topics栈 | 设计 | 队列 \n\n 👍 633, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CQueue</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stackAppend<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> stackDelete<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackAppend <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackDelete <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue obj = new CQueue();\n * obj.appendTail(value);\n * int param_2 = obj.deleteHead();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能\n。(若队列中没有元素，deleteHead 操作返回 -1 ) \n\n \n\n 示例 1： \n\n \n输入：\n[\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\",\"deleteHead\"]\n[[],[3],[],[],[]]\n输出：[null,null,3,-1,-1]\n \n\n 示例 2： \n\n \n输入：\n[\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"]\n[[],[],[5],[2],[],[]]\n输出：[null,-1,null,null,5,2]\n \n\n 提示： \n\n \n 1 &lt;= values &lt;= 10000 \n 最多会对 appendTail、deleteHead 进行 10000 次调用 \n \n Related Topics栈 | 设计 | 队列 \n\n 👍 633, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CQueue</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stackAppend<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stackDelete<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackAppend <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackDelete <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">appendTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">deleteHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>stackAppend<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> stackDelete<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your CQueue object will be instantiated and called as such:\n * CQueue obj = new CQueue();\n * obj.appendTail(value);\n * int param_2 = obj.deleteHead();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"offer-11","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-09T03:38:32.000Z","_content":"\n```java\n/**\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 \n\n 给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4\n,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。 \n\n 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..\n., a[n-2]] 。 \n\n \n\n 示例 1： \n\n \n输入：numbers = [3,4,5,1,2]\n输出：1\n \n\n 示例 2： \n\n \n输入：numbers = [2,2,2,0,1]\n输出：0\n \n\n \n\n 提示： \n\n \n n == numbers.length \n 1 <= n <= 5000 \n -5000 <= numbers[i] <= 5000 \n numbers 原来是一个升序排序的数组，并进行了 1 至 n 次旋转 \n \n\n 注意：本题与主站 154 题相同：https://leetcode-cn.com/problems/find-minimum-in-rotated-\nsorted-array-ii/ \n Related Topics数组 | 二分查找 \n\n 👍 732, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int minArray(int[] numbers) {\n        return getMin(numbers, 0, numbers.length - 1);\n    }\n\n    private int getMin(int[] numbers, int start, int end) {\n        if (start == end) {\n            return numbers[start];\n        }\n\n        if (start + 1 == end) {\n            return Math.min(numbers[start], numbers[end]);\n        }\n\n        int mid = start + (end - start) / 2;\n\n\n        if (numbers[start] < numbers[mid] && numbers[mid] > numbers[end]) {\n            return getMin(numbers, mid, end);\n        } else if (numbers[start] > numbers[mid] && numbers[mid] < numbers[end]) {\n            return getMin(numbers, start, mid);\n        } else {\n            return Math.min(getMin(numbers, mid, end), getMin(numbers, start, mid));\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-11.md","raw":"---\ntitle: offer-11\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: 默认\ntags:\n  - 其他\ndate: 2022-12-09 11:38:32\n---\n\n```java\n/**\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 \n\n 给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4\n,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。 \n\n 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..\n., a[n-2]] 。 \n\n \n\n 示例 1： \n\n \n输入：numbers = [3,4,5,1,2]\n输出：1\n \n\n 示例 2： \n\n \n输入：numbers = [2,2,2,0,1]\n输出：0\n \n\n \n\n 提示： \n\n \n n == numbers.length \n 1 <= n <= 5000 \n -5000 <= numbers[i] <= 5000 \n numbers 原来是一个升序排序的数组，并进行了 1 至 n 次旋转 \n \n\n 注意：本题与主站 154 题相同：https://leetcode-cn.com/problems/find-minimum-in-rotated-\nsorted-array-ii/ \n Related Topics数组 | 二分查找 \n\n 👍 732, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int minArray(int[] numbers) {\n        return getMin(numbers, 0, numbers.length - 1);\n    }\n\n    private int getMin(int[] numbers, int start, int end) {\n        if (start == end) {\n            return numbers[start];\n        }\n\n        if (start + 1 == end) {\n            return Math.min(numbers[start], numbers[end]);\n        }\n\n        int mid = start + (end - start) / 2;\n\n\n        if (numbers[start] < numbers[mid] && numbers[mid] > numbers[end]) {\n            return getMin(numbers, mid, end);\n        } else if (numbers[start] > numbers[mid] && numbers[mid] < numbers[end]) {\n            return getMin(numbers, start, mid);\n        } else {\n            return Math.min(getMin(numbers, mid, end), getMin(numbers, start, mid));\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-11","published":1,"updated":"2022-12-09T12:37:16.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0f00863suue2erhur0","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 \n\n 给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4\n,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。 \n\n 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..\n., a[n-2]] 。 \n\n \n\n 示例 1： \n\n \n输入：numbers = [3,4,5,1,2]\n输出：1\n \n\n 示例 2： \n\n \n输入：numbers = [2,2,2,0,1]\n输出：0\n \n\n \n\n 提示： \n\n \n n == numbers.length \n 1 &lt;= n &lt;= 5000 \n -5000 &lt;= numbers[i] &lt;= 5000 \n numbers 原来是一个升序排序的数组，并进行了 1 至 n 次旋转 \n \n\n 注意：本题与主站 154 题相同：https://leetcode-cn.com/problems/find-minimum-in-rotated-\nsorted-array-ii/ \n Related Topics数组 | 二分查找 \n\n 👍 732, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 \n\n 给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3,4\n,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。 \n\n 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..\n., a[n-2]] 。 \n\n \n\n 示例 1： \n\n \n输入：numbers = [3,4,5,1,2]\n输出：1\n \n\n 示例 2： \n\n \n输入：numbers = [2,2,2,0,1]\n输出：0\n \n\n \n\n 提示： \n\n \n n == numbers.length \n 1 &lt;= n &lt;= 5000 \n -5000 &lt;= numbers[i] &lt;= 5000 \n numbers 原来是一个升序排序的数组，并进行了 1 至 n 次旋转 \n \n\n 注意：本题与主站 154 题相同：https://leetcode-cn.com/problems/find-minimum-in-rotated-\nsorted-array-ii/ \n Related Topics数组 | 二分查找 \n\n 👍 732, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> numbers<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-10-1","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-07T03:29:31.000Z","_content":"\n```java\n/**\n写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下： \n\n \nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1. \n\n 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n \n\n 示例 1： \n\n \n输入：n = 2\n输出：1\n \n\n 示例 2： \n\n \n输入：n = 5\n输出：5\n \n\n \n\n 提示： \n\n \n 0 <= n <= 100 \n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 424, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n\n        int first = 0, second = 1;\n        int result = 0;\n\n        for (int i = 2; i <= n; i++) {\n            result = (first + second) % 1000000007;\n            first = second;\n            second = result;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-10-1.md","raw":"---\ntitle: offer-10-1\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-07 11:29:31\n---\n\n```java\n/**\n写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下： \n\n \nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1. \n\n 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n \n\n 示例 1： \n\n \n输入：n = 2\n输出：1\n \n\n 示例 2： \n\n \n输入：n = 5\n输出：5\n \n\n \n\n 提示： \n\n \n 0 <= n <= 100 \n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 424, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int fib(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n\n        int first = 0, second = 1;\n        int result = 0;\n\n        for (int i = 2; i <= n; i++) {\n            result = (first + second) % 1000000007;\n            first = second;\n            second = result;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-10-1","published":1,"updated":"2022-12-07T06:45:37.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0g00893suu8cqj8sp6","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下： \n\n \nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1. \n\n 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n \n\n 示例 1： \n\n \n输入：n = 2\n输出：1\n \n\n 示例 2： \n\n \n输入：n = 5\n输出：5\n \n\n \n\n 提示： \n\n \n 0 &lt;= n &lt;= 100 \n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 424, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下： \n\n \nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1. \n\n 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n \n\n 示例 1： \n\n \n输入：n = 2\n输出：1\n \n\n 示例 2： \n\n \n输入：n = 5\n输出：5\n \n\n \n\n 提示： \n\n \n 0 &lt;= n &lt;= 100 \n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 424, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-10-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-08T03:24:50.000Z","_content":"\n```java\n/**\n一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n 示例 1： \n\n 输入：n = 2\n输出：2\n \n\n 示例 2： \n\n 输入：n = 7\n输出：21\n \n\n 示例 3： \n\n 输入：n = 0\n输出：1 \n\n 提示： \n\n \n 0 <= n <= 100 \n \n\n 注意：本题与主站 70 题相同：https://leetcode-cn.com/problems/climbing-stairs/ \n\n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 342, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numWays(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        int first = 1, second = 1;\n        int result = 0;\n\n        for (int i = 2; i <= n; i++) {\n            result = (first + second) % 1000000007;\n            first = second;\n            second = result;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-10-2.md","raw":"---\ntitle: offer-10-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-08 11:24:50\n---\n\n```java\n/**\n一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n 示例 1： \n\n 输入：n = 2\n输出：2\n \n\n 示例 2： \n\n 输入：n = 7\n输出：21\n \n\n 示例 3： \n\n 输入：n = 0\n输出：1 \n\n 提示： \n\n \n 0 <= n <= 100 \n \n\n 注意：本题与主站 70 题相同：https://leetcode-cn.com/problems/climbing-stairs/ \n\n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 342, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numWays(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        int first = 1, second = 1;\n        int result = 0;\n\n        for (int i = 2; i <= n; i++) {\n            result = (first + second) % 1000000007;\n            first = second;\n            second = result;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-10-2","published":1,"updated":"2022-12-08T03:33:56.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0h008e3suu5o4203yf","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n 示例 1： \n\n 输入：n = 2\n输出：2\n \n\n 示例 2： \n\n 输入：n = 7\n输出：21\n \n\n 示例 3： \n\n 输入：n = 0\n输出：1 \n\n 提示： \n\n \n 0 &lt;= n &lt;= 100 \n \n\n 注意：本题与主站 70 题相同：https://leetcode-cn.com/problems/climbing-stairs/ \n\n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 342, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。 \n\n 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。 \n\n 示例 1： \n\n 输入：n = 2\n输出：2\n \n\n 示例 2： \n\n 输入：n = 7\n输出：21\n \n\n 示例 3： \n\n 输入：n = 0\n输出：1 \n\n 提示： \n\n \n 0 &lt;= n &lt;= 100 \n \n\n 注意：本题与主站 70 题相同：https://leetcode-cn.com/problems/climbing-stairs/ \n\n \n Related Topics记忆化搜索 | 数学 | 动态规划 \n\n 👍 342, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> second <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">+</span> second<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span>\n            second <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-14","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-19T06:13:34.000Z","_content":"\n给你一根长度为 `n` 的绳子，请把绳子剪成整数长度的 `m` 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 `k[0],k[1]...k[m-1]` 。请问 `k[0]*k[1]*...*k[m-1]` 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n\n**示例 1：**\n\n```\n输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n```\n\n**示例 2:**\n\n```\n输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n```\n\n**提示：**\n\n- `2 <= n <= 58`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int cuttingRope(int n) {\n        if (n == 2 || n == 3) {\n            return n - 1;\n        }\n        Map<Integer, Integer> resultMap = new HashMap<>();\n        return cutting(resultMap, n);\n    }\n\n    private int cutting(Map<Integer, Integer> resultMap, int n) {\n        if (resultMap.containsKey(n)) {\n            return resultMap.get(n);\n        }\n\n        int result = 0;\n\n        if (n <= 4) {\n            result = n;\n        } else {\n            for (int i = 1; i <= n / 2; i++) {\n                result = Math.max(result, cutting(resultMap, i) * cutting(resultMap, n - i));\n            }\n        }\n\n        resultMap.put(n, result);\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-14.md","raw":"---\ntitle: offer-14\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-19 14:13:34\n---\n\n给你一根长度为 `n` 的绳子，请把绳子剪成整数长度的 `m` 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 `k[0],k[1]...k[m-1]` 。请问 `k[0]*k[1]*...*k[m-1]` 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n\n**示例 1：**\n\n```\n输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1\n```\n\n**示例 2:**\n\n```\n输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36\n```\n\n**提示：**\n\n- `2 <= n <= 58`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int cuttingRope(int n) {\n        if (n == 2 || n == 3) {\n            return n - 1;\n        }\n        Map<Integer, Integer> resultMap = new HashMap<>();\n        return cutting(resultMap, n);\n    }\n\n    private int cutting(Map<Integer, Integer> resultMap, int n) {\n        if (resultMap.containsKey(n)) {\n            return resultMap.get(n);\n        }\n\n        int result = 0;\n\n        if (n <= 4) {\n            result = n;\n        } else {\n            for (int i = 1; i <= n / 2; i++) {\n                result = Math.max(result, cutting(resultMap, i) * cutting(resultMap, n - i));\n            }\n        }\n\n        resultMap.put(n, result);\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-14","published":1,"updated":"2022-12-20T07:44:08.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0i008h3suudj1i3wgv","content":"<p>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1]</code> 。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 2\n输出: 1\n解释: 2 = 1 + 1, 1 × 1 = 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 10\n输出: 36\n解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= n &lt;= 58</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">cuttingRope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1]</code> 。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 2\n输出: 1\n解释: 2 &#x3D; 1 + 1, 1 × 1 &#x3D; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 10\n输出: 36\n解释: 10 &#x3D; 3 + 3 + 4, 3 × 3 × 4 &#x3D; 36<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= n &lt;= 58</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">cuttingRope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> resultMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">cutting</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-12","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-11T06:25:45.000Z","_content":"\n```java\n/**\n给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。 \n\n 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。 \n\n \n\n 例如，在下面的 3×4 的矩阵中包含单词 \"ABCCED\"（单词中的字母已标出）。 \n\n \n\n \n\n 示例 1： \n\n \n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \n\"ABCCED\"\n输出：true\n \n\n 示例 2： \n\n \n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n \n\n \n\n 提示： \n\n \n m == board.length \n n = board[i].length \n 1 <= m, n <= 6 \n 1 <= word.length <= 15 \n board 和 word 仅由大小写英文字母组成 \n \n\n 注意：本题与主站 79 题相同：https://leetcode-cn.com/problems/word-search/ \n Related Topics数组 | 回溯 | 矩阵 \n\n 👍 713, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean exist(char[][] board, String word) {\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-12.md","raw":"---\ntitle: offer-12\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-11 14:25:45\n---\n\n```java\n/**\n给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。 \n\n 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。 \n\n \n\n 例如，在下面的 3×4 的矩阵中包含单词 \"ABCCED\"（单词中的字母已标出）。 \n\n \n\n \n\n 示例 1： \n\n \n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \n\"ABCCED\"\n输出：true\n \n\n 示例 2： \n\n \n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n \n\n \n\n 提示： \n\n \n m == board.length \n n = board[i].length \n 1 <= m, n <= 6 \n 1 <= word.length <= 15 \n board 和 word 仅由大小写英文字母组成 \n \n\n 注意：本题与主站 79 题相同：https://leetcode-cn.com/problems/word-search/ \n Related Topics数组 | 回溯 | 矩阵 \n\n 👍 713, 👎 0 \n\n*/\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean exist(char[][] board, String word) {\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-12","published":1,"updated":"2022-12-11T06:26:20.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0i008k3suu0sgsc027","content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。 \n\n 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。 \n\n \n\n 例如，在下面的 3×4 的矩阵中包含单词 \"ABCCED\"（单词中的字母已标出）。 \n\n \n\n \n\n 示例 1： \n\n \n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \n\"ABCCED\"\n输出：true\n \n\n 示例 2： \n\n \n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n \n\n \n\n 提示： \n\n \n m == board.length \n n = board[i].length \n 1 &lt;= m, n &lt;= 6 \n 1 &lt;= word.length &lt;= 15 \n board 和 word 仅由大小写英文字母组成 \n \n\n 注意：本题与主站 79 题相同：https://leetcode-cn.com/problems/word-search/ \n Related Topics数组 | 回溯 | 矩阵 \n\n 👍 713, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。 \n\n 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。 \n\n \n\n 例如，在下面的 3×4 的矩阵中包含单词 \"ABCCED\"（单词中的字母已标出）。 \n\n \n\n \n\n 示例 1： \n\n \n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \n\"ABCCED\"\n输出：true\n \n\n 示例 2： \n\n \n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n \n\n \n\n 提示： \n\n \n m == board.length \n n = board[i].length \n 1 &lt;= m, n &lt;= 6 \n 1 &lt;= word.length &lt;= 15 \n board 和 word 仅由大小写英文字母组成 \n \n\n 注意：本题与主站 79 题相同：https://leetcode-cn.com/problems/word-search/ \n Related Topics数组 | 回溯 | 矩阵 \n\n 👍 713, 👎 0 \n\n*/</span>\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-16","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-21T03:15:12.000Z","_content":"\n实现 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。\n\n\n\n**示例 1：**\n\n```\n输入：x = 2.00000, n = 10\n输出：1024.00000\n```\n\n**示例 2：**\n\n```\n输入：x = 2.10000, n = 3\n输出：9.26100\n```\n\n**示例 3：**\n\n```\n输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25\n```\n\n\n\n**提示：**\n\n- `-100.0 < x < 100.0`\n- `-231 <= n <= 231-1`\n- `-104 <= xn <= 104`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double myPow(double x, int n) {\n        int absN = n > 0 ? n : -n;\n        \n        if (n == Integer.MIN_VALUE) {\n            if ((int)x == 1 || (int)x == -1) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        }\n\n        double result = 1.0;\n        double curP = x;\n\n        while (absN > 0) {\n            if (absN % 2 == 1) {\n                result *= curP;\n            }\n\n            absN = absN >> 1;\n            curP = curP * curP;\n        }\n\n        if (n > 0) {\n            return result;\n        } else {\n            return 1.0 / result;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-16.md","raw":"---\ntitle: offer-16\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-21 11:15:12\n---\n\n实现 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。\n\n\n\n**示例 1：**\n\n```\n输入：x = 2.00000, n = 10\n输出：1024.00000\n```\n\n**示例 2：**\n\n```\n输入：x = 2.10000, n = 3\n输出：9.26100\n```\n\n**示例 3：**\n\n```\n输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25\n```\n\n\n\n**提示：**\n\n- `-100.0 < x < 100.0`\n- `-231 <= n <= 231-1`\n- `-104 <= xn <= 104`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double myPow(double x, int n) {\n        int absN = n > 0 ? n : -n;\n        \n        if (n == Integer.MIN_VALUE) {\n            if ((int)x == 1 || (int)x == -1) {\n                return 1.0;\n            } else {\n                return 0.0;\n            }\n        }\n\n        double result = 1.0;\n        double curP = x;\n\n        while (absN > 0) {\n            if (absN % 2 == 1) {\n                result *= curP;\n            }\n\n            absN = absN >> 1;\n            curP = curP * curP;\n        }\n\n        if (n > 0) {\n            return result;\n        } else {\n            return 1.0 / result;\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-16","published":1,"updated":"2022-12-21T05:21:25.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0j008n3suu682c1rl6","content":"<p>实现 <a href=\"https://www.cplusplus.com/reference/valarray/pow/\">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：x = 2.00000, n = 10\n输出：1024.00000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：x = 2.10000, n = 3\n输出：9.26100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n<li><code>-231 &lt;= n &lt;= 231-1</code></li>\n<li><code>-104 &lt;= xn &lt;= 104</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">myPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> absN <span class=\"token operator\">=</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> n <span class=\"token operator\">:</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> curP <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>absN <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>absN <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">*=</span> curP<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            absN <span class=\"token operator\">=</span> absN <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            curP <span class=\"token operator\">=</span> curP <span class=\"token operator\">*</span> curP<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>实现 <a href=\"https://www.cplusplus.com/reference/valarray/pow/\">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：x &#x3D; 2.00000, n &#x3D; 10\n输出：1024.00000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：x &#x3D; 2.10000, n &#x3D; 3\n输出：9.26100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：x &#x3D; 2.00000, n &#x3D; -2\n输出：0.25000\n解释：2-2 &#x3D; 1&#x2F;22 &#x3D; 1&#x2F;4 &#x3D; 0.25<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>-100.0 &lt; x &lt; 100.0</code></li>\n<li><code>-231 &lt;= n &lt;= 231-1</code></li>\n<li><code>-104 &lt;= xn &lt;= 104</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">myPow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> absN <span class=\"token operator\">=</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> n <span class=\"token operator\">:</span> <span class=\"token operator\">-</span>n<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> curP <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>absN <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>absN <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">*=</span> curP<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            absN <span class=\"token operator\">=</span> absN <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            curP <span class=\"token operator\">=</span> curP <span class=\"token operator\">*</span> curP<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-17","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-22T05:59:18.000Z","_content":"\n输入数字 `n`，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。\n\n**示例 1:**\n\n```\n输入: n = 1\n输出: [1,2,3,4,5,6,7,8,9]\n```\n\n\n\n说明：\n\n- 用返回一个整数列表来代替打印\n- n 为正整数\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] printNumbers(int n) {\n        int maxV = 0;\n\n        for (int i = 0; i < n; i++) {\n            maxV = maxV * 10 + 9;\n        }\n\n        int[] result = new int[maxV];\n\n        for (int i = 1; i <= maxV; i++) {\n            result[i - 1] = i;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-17.md","raw":"---\ntitle: offer-17\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-22 13:59:18\n---\n\n输入数字 `n`，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。\n\n**示例 1:**\n\n```\n输入: n = 1\n输出: [1,2,3,4,5,6,7,8,9]\n```\n\n\n\n说明：\n\n- 用返回一个整数列表来代替打印\n- n 为正整数\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] printNumbers(int n) {\n        int maxV = 0;\n\n        for (int i = 0; i < n; i++) {\n            maxV = maxV * 10 + 9;\n        }\n\n        int[] result = new int[maxV];\n\n        for (int i = 1; i <= maxV; i++) {\n            result[i - 1] = i;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-17","published":1,"updated":"2022-12-22T13:03:30.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0k008q3suufzc2ei14","content":"<p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 1\n输出: [1,2,3,4,5,6,7,8,9]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>说明：</p>\n<ul>\n<li>用返回一个整数列表来代替打印</li>\n<li>n 为正整数</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">printNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> maxV <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxV <span class=\"token operator\">=</span> maxV <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>maxV<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxV<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 1\n输出: [1,2,3,4,5,6,7,8,9]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>说明：</p>\n<ul>\n<li>用返回一个整数列表来代替打印</li>\n<li>n 为正整数</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">printNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> maxV <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxV <span class=\"token operator\">=</span> maxV <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>maxV<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxV<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-18","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-23T03:24:00.000Z","_content":"\n给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。\n\n返回删除后的链表的头节点。\n\n**注意：**此题对比原题有改动\n\n**示例 1:**\n\n```\n输入: head = [4,5,1,9], val = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.\n```\n\n**示例 2:**\n\n```\n输入: head = [4,5,1,9], val = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.\n```\n\n\n\n**说明：**\n\n- 题目保证链表中节点的值互不相同\n- 若使用 C 或 C++ 语言，你不需要 `free` 或 `delete` 被删除的节点\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteNode(ListNode head, int val) {\n        ListNode newHead = head;\n\n        if (head == null) {\n            return head;\n        }\n\n        if (head.val == val) {\n            newHead = newHead.next;\n        } else {\n            ListNode tmp = head;\n\n            while (tmp != null) {\n                ListNode tmpNext = tmp.next;\n\n                if (tmpNext != null && tmpNext.val == val) {\n                    tmp.next = tmpNext.next;\n                    tmpNext = null;\n                    break;\n                }\n                tmp = tmpNext;\n            }\n        }\n\n        return newHead;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-18.md","raw":"---\ntitle: offer-18\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-23 11:24:00\n---\n\n给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。\n\n返回删除后的链表的头节点。\n\n**注意：**此题对比原题有改动\n\n**示例 1:**\n\n```\n输入: head = [4,5,1,9], val = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.\n```\n\n**示例 2:**\n\n```\n输入: head = [4,5,1,9], val = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.\n```\n\n\n\n**说明：**\n\n- 题目保证链表中节点的值互不相同\n- 若使用 C 或 C++ 语言，你不需要 `free` 或 `delete` 被删除的节点\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode deleteNode(ListNode head, int val) {\n        ListNode newHead = head;\n\n        if (head == null) {\n            return head;\n        }\n\n        if (head.val == val) {\n            newHead = newHead.next;\n        } else {\n            ListNode tmp = head;\n\n            while (tmp != null) {\n                ListNode tmpNext = tmp.next;\n\n                if (tmpNext != null && tmpNext.val == val) {\n                    tmp.next = tmpNext.next;\n                    tmpNext = null;\n                    break;\n                }\n                tmp = tmpNext;\n            }\n        }\n\n        return newHead;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-18","published":1,"updated":"2022-12-23T08:55:12.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0k008t3suu82xjbsfb","content":"<p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p>\n<p>返回删除后的链表的头节点。</p>\n<p><strong>注意：</strong>此题对比原题有改动</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: head = [4,5,1,9], val = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: head = [4,5,1,9], val = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明：</strong></p>\n<ul>\n<li>题目保证链表中节点的值互不相同</li>\n<li>若使用 C 或 C++ 语言，你不需要 <code>free</code> 或 <code>delete</code> 被删除的节点</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> newHead <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            newHead <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ListNode</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ListNode</span> tmpNext <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmpNext <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> tmpNext<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    tmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tmpNext<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                    tmpNext <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                tmp <span class=\"token operator\">=</span> tmpNext<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p>\n<p>返回删除后的链表的头节点。</p>\n<p><strong>注意：</strong>此题对比原题有改动</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: head &#x3D; [4,5,1,9], val &#x3D; 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: head &#x3D; [4,5,1,9], val &#x3D; 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明：</strong></p>\n<ul>\n<li>题目保证链表中节点的值互不相同</li>\n<li>若使用 C 或 C++ 语言，你不需要 <code>free</code> 或 <code>delete</code> 被删除的节点</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> newHead <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            newHead <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ListNode</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">ListNode</span> tmpNext <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmpNext <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> tmpNext<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    tmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tmpNext<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                    tmpNext <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                tmp <span class=\"token operator\">=</span> tmpNext<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-19","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-26T06:56:16.000Z","_content":"\n请实现一个函数用来匹配包含`'. '`和`'*'`的正则表达式。模式中的字符`'.'`表示任意一个字符，而`'*'`表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串`\"aaa\"`与模式`\"a.a\"`和`\"ab*ac*a\"`匹配，但与`\"aa.a\"`和`\"ab*a\"`均不匹配。\n\n**示例 1:**\n\n```\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n**示例 2:**\n\n```\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n```\n\n**示例 3:**\n\n```\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n```\n\n**示例 4:**\n\n```\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \"aab\"。\n```\n\n**示例 5:**\n\n```\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\n```\n\n- `s` 可能为空，且只包含从 `a-z` 的小写字母。\n- `p` 可能为空，且只包含从 `a-z` 的小写字母以及字符 `.` 和 `*`，无连续的 `'*'`。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        int m = s.length();\n        int n = p.length();\n        boolean[][] f = new boolean[m + 1][n + 1];\n        f[0][0] = true;\n        for (int i = 0; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (p.charAt(j - 1) == '*') {\n                    f[i][j] = f[i][j - 2];\n                    if (matches(s, p, i, j - 1)) {\n                        f[i][j] = f[i][j] || f[i - 1][j];\n                    }\n                } else {\n                    if (matches(s, p, i, j)) {\n                        f[i][j] = f[i - 1][j - 1];\n                    }\n                }\n            }\n        }\n        return f[m][n];\n    }\n\n    public boolean matches(String s, String p, int i, int j) {\n        if (i == 0) {\n            return false;\n        }\n        if (p.charAt(j - 1) == '.') {\n            return true;\n        }\n        return s.charAt(i - 1) == p.charAt(j - 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-19.md","raw":"---\ntitle: offer-19\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-26 14:56:16\n---\n\n请实现一个函数用来匹配包含`'. '`和`'*'`的正则表达式。模式中的字符`'.'`表示任意一个字符，而`'*'`表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串`\"aaa\"`与模式`\"a.a\"`和`\"ab*ac*a\"`匹配，但与`\"aa.a\"`和`\"ab*a\"`均不匹配。\n\n**示例 1:**\n\n```\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n**示例 2:**\n\n```\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n```\n\n**示例 3:**\n\n```\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n```\n\n**示例 4:**\n\n```\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \"aab\"。\n```\n\n**示例 5:**\n\n```\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\n```\n\n- `s` 可能为空，且只包含从 `a-z` 的小写字母。\n- `p` 可能为空，且只包含从 `a-z` 的小写字母以及字符 `.` 和 `*`，无连续的 `'*'`。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        int m = s.length();\n        int n = p.length();\n        boolean[][] f = new boolean[m + 1][n + 1];\n        f[0][0] = true;\n        for (int i = 0; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (p.charAt(j - 1) == '*') {\n                    f[i][j] = f[i][j - 2];\n                    if (matches(s, p, i, j - 1)) {\n                        f[i][j] = f[i][j] || f[i - 1][j];\n                    }\n                } else {\n                    if (matches(s, p, i, j)) {\n                        f[i][j] = f[i - 1][j - 1];\n                    }\n                }\n            }\n        }\n        return f[m][n];\n    }\n\n    public boolean matches(String s, String p, int i, int j) {\n        if (i == 0) {\n            return false;\n        }\n        if (p.charAt(j - 1) == '.') {\n            return true;\n        }\n        return s.charAt(i - 1) == p.charAt(j - 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-19","published":1,"updated":"2022-12-26T09:35:38.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0l008w3suubqp173fu","content":"<p>请实现一个函数用来匹配包含<code>'. '</code>和<code>'*'</code>的正则表达式。模式中的字符<code>'.'</code>表示任意一个字符，而<code>'*'</code>表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串<code>\"aaa\"</code>与模式<code>\"a.a\"</code>和<code>\"ab*ac*a\"</code>匹配，但与<code>\"aa.a\"</code>和<code>\"ab*a\"</code>均不匹配。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \"aab\"。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 5:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母。</li>\n<li><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母以及字符 <code>.</code> 和 <code>*</code>，无连续的 <code>'*'</code>。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请实现一个函数用来匹配包含<code>&#39;. &#39;</code>和<code>&#39;*&#39;</code>的正则表达式。模式中的字符<code>&#39;.&#39;</code>表示任意一个字符，而<code>&#39;*&#39;</code>表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串<code>&quot;aaa&quot;</code>与模式<code>&quot;a.a&quot;</code>和<code>&quot;ab*ac*a&quot;</code>匹配，但与<code>&quot;aa.a&quot;</code>和<code>&quot;ab*a&quot;</code>均不匹配。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns &#x3D; &quot;aa&quot;\np &#x3D; &quot;a&quot;\n输出: false\n解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns &#x3D; &quot;aa&quot;\np &#x3D; &quot;a*&quot;\n输出: true\n解释: 因为 &#39;*&#39; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#39;a&#39;。因此，字符串 &quot;aa&quot; 可被视为 &#39;a&#39; 重复了一次。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns &#x3D; &quot;ab&quot;\np &#x3D; &quot;.*&quot;\n输出: true\n解释: &quot;.*&quot; 表示可匹配零个或多个（&#39;*&#39;）任意字符（&#39;.&#39;）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns &#x3D; &quot;aab&quot;\np &#x3D; &quot;c*a*b&quot;\n输出: true\n解释: 因为 &#39;*&#39; 表示零个或多个，这里 &#39;c&#39; 为 0 个, &#39;a&#39; 被重复一次。因此可以匹配字符串 &quot;aab&quot;。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 5:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:\ns &#x3D; &quot;mississippi&quot;\np &#x3D; &quot;mis*is*p*.&quot;\n输出: false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母。</li>\n<li><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母以及字符 <code>.</code> 和 <code>*</code>，无连续的 <code>&#39;*&#39;</code>。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-22","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-29T03:06:18.000Z","_content":"\n输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。\n\n例如，一个链表有 `6` 个节点，从头节点开始，它们的值依次是 `1、2、3、4、5、6`。这个链表的倒数第 `3` 个节点是值为 `4` 的节点。\n\n\n\n**示例：**\n\n```\n给定一个链表: 1->2->3->4->5, 和 k = 2.\n\n返回链表 4->5.\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode getKthFromEnd(ListNode head, int k) {\n        ListNode fast = head, slow = head;\n\n        int fastStep = 0;\n\n        while (fast != null) {\n            fast = fast.next;\n\n            if (fastStep >= k) {\n                slow = slow.next;\n            }\n\n            fastStep++;\n        }\n\n        return slow;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-22.md","raw":"---\ntitle: offer-22\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-29 11:06:18\n---\n\n输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。\n\n例如，一个链表有 `6` 个节点，从头节点开始，它们的值依次是 `1、2、3、4、5、6`。这个链表的倒数第 `3` 个节点是值为 `4` 的节点。\n\n\n\n**示例：**\n\n```\n给定一个链表: 1->2->3->4->5, 和 k = 2.\n\n返回链表 4->5.\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode getKthFromEnd(ListNode head, int k) {\n        ListNode fast = head, slow = head;\n\n        int fastStep = 0;\n\n        while (fast != null) {\n            fast = fast.next;\n\n            if (fastStep >= k) {\n                slow = slow.next;\n            }\n\n            fastStep++;\n        }\n\n        return slow;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-22","published":1,"updated":"2022-12-29T03:25:15.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0l008z3suuh0gv2dm3","content":"<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>\n<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.\n\n返回链表 4-&gt;5.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getKthFromEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> fastStep <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fastStep <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            fastStep<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p>\n<p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.\n\n返回链表 4-&gt;5.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getKthFromEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> fastStep <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fastStep <span class=\"token operator\">>=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            fastStep<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-21","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-28T06:16:44.000Z","_content":"\n输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数在数组的前半部分，所有偶数在数组的后半部分。\n\n\n\n**示例：**\n\n```\n输入：nums = [1,2,3,4]\n输出：[1,3,2,4] \n注：[3,1,2,4] 也是正确的答案之一。\n```\n\n\n\n**提示：**\n\n1. `0 <= nums.length <= 50000`\n2. `0 <= nums[i] <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] exchange(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return nums;\n        }\n\n        int start = 0, end = nums.length - 1;\n\n        while (start < end) {\n            boolean doSwap = nums[start] % 2 == 0 && nums[end] % 2 == 1;\n            if (doSwap) {\n                int temp = nums[start];\n                nums[start] = nums[end];\n                nums[end] = temp;\n                start++;\n                end--;\n            } else {\n                if (nums[start] % 2 == 1) {\n                    start++;\n                }\n                if (nums[end] % 2 == 0) {\n                    end--;\n                }\n            }\n        }\n\n        return nums;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-21.md","raw":"---\ntitle: offer-21\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-28 14:16:44\n---\n\n输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数在数组的前半部分，所有偶数在数组的后半部分。\n\n\n\n**示例：**\n\n```\n输入：nums = [1,2,3,4]\n输出：[1,3,2,4] \n注：[3,1,2,4] 也是正确的答案之一。\n```\n\n\n\n**提示：**\n\n1. `0 <= nums.length <= 50000`\n2. `0 <= nums[i] <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] exchange(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return nums;\n        }\n\n        int start = 0, end = nums.length - 1;\n\n        while (start < end) {\n            boolean doSwap = nums[start] % 2 == 0 && nums[end] % 2 == 1;\n            if (doSwap) {\n                int temp = nums[start];\n                nums[start] = nums[end];\n                nums[end] = temp;\n                start++;\n                end--;\n            } else {\n                if (nums[start] % 2 == 1) {\n                    start++;\n                }\n                if (nums[end] % 2 == 0) {\n                    end--;\n                }\n            }\n        }\n\n        return nums;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-21","published":1,"updated":"2022-12-28T07:29:12.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0m00923suu8n23d1l0","content":"<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数在数组的前半部分，所有偶数在数组的后半部分。</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [1,2,3,4]\n输出：[1,3,2,4] \n注：[3,1,2,4] 也是正确的答案之一。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>0 &lt;= nums.length &lt;= 50000</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 10000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">boolean</span> doSwap <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doSwap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数在数组的前半部分，所有偶数在数组的后半部分。</p>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1,2,3,4]\n输出：[1,3,2,4] \n注：[3,1,2,4] 也是正确的答案之一。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>0 &lt;= nums.length &lt;= 50000</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 10000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">boolean</span> doSwap <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doSwap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-25","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-03T13:35:15.000Z","_content":"\n输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。\n\n**示例1：**\n\n```\n输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n```\n\n**限制：**\n\n```\n0 <= 链表长度 <= 1000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode head, curNode;\n\n        if (l1 == null && l2 == null) {\n            return null;\n        }\n\n        if (l1 == null) {\n            head = l2;\n            curNode = l2;\n            l2 = l2.next;\n        } else if (l2 == null) {\n            head = l1;\n            curNode = l1;\n            l1 = l1.next;\n        } else {\n            if (l1.val < l2.val) {\n                head = l1;\n                curNode = l1;\n                l1 = l1.next;\n            } else {\n                head = l2;\n                curNode = l2;\n                l2 = l2.next;\n            }\n        }\n\n        while (l1 != null || l2 != null) {\n            if (l1 == null || (l2 != null && l1.val > l2.val)) {\n                curNode.next = l2;\n                curNode = l2;\n                l2 = l2.next;\n            } else {\n                curNode.next = l1;\n                curNode = l1;\n                l1 = l1.next;\n            }\n        }\n\n        return head;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-25.md","raw":"---\ntitle: offer-25\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-03 21:35:15\n---\n\n输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。\n\n**示例1：**\n\n```\n输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n```\n\n**限制：**\n\n```\n0 <= 链表长度 <= 1000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode head, curNode;\n\n        if (l1 == null && l2 == null) {\n            return null;\n        }\n\n        if (l1 == null) {\n            head = l2;\n            curNode = l2;\n            l2 = l2.next;\n        } else if (l2 == null) {\n            head = l1;\n            curNode = l1;\n            l1 = l1.next;\n        } else {\n            if (l1.val < l2.val) {\n                head = l1;\n                curNode = l1;\n                l1 = l1.next;\n            } else {\n                head = l2;\n                curNode = l2;\n                l2 = l2.next;\n            }\n        }\n\n        while (l1 != null || l2 != null) {\n            if (l1 == null || (l2 != null && l1.val > l2.val)) {\n                curNode.next = l2;\n                curNode = l2;\n                l2 = l2.next;\n            } else {\n                curNode.next = l1;\n                curNode = l1;\n                l1 = l1.next;\n            }\n        }\n\n        return head;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-25","published":1,"updated":"2023-01-03T14:41:34.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0m00953suugol05d76","content":"<p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p>\n<p><strong>示例1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= 链表长度 &lt;= 1000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> curNode<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n            curNode <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n            l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n            curNode <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n            l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                head <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                head <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&gt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p>\n<p><strong>示例1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; 链表长度 &lt;&#x3D; 1000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> curNode<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n            curNode <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n            l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            head <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n            curNode <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n            l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                head <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                head <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                curNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                curNode <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-27","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-05T06:50:09.000Z","_content":"\n请完成一个函数，输入一个二叉树，该函数输出它的镜像。\n\n例如输入：\n\n`     4    /   \\   2     7  / \\   / \\ 1   3 6   9`\n镜像输出：\n\n```\n     4    /   \\   7     2  / \\   / \\ 9   6 3   1\n```\n\n\n\n**示例 1：**\n\n```\n输入：root = [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]\n```\n\n\n\n**限制：**\n\n```\n0 <= 节点个数 <= 1000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode mirrorTree(TreeNode root) {\n        doFlip(root);\n        return root;\n    }\n\n    private void doFlip(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n\n        TreeNode left = node.left;\n        node.left = node.right;\n        node.right = left;\n        doFlip(node.left);\n        doFlip(node.right);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-27.md","raw":"---\ntitle: offer-27\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-05 14:50:09\n---\n\n请完成一个函数，输入一个二叉树，该函数输出它的镜像。\n\n例如输入：\n\n`     4    /   \\   2     7  / \\   / \\ 1   3 6   9`\n镜像输出：\n\n```\n     4    /   \\   7     2  / \\   / \\ 9   6 3   1\n```\n\n\n\n**示例 1：**\n\n```\n输入：root = [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]\n```\n\n\n\n**限制：**\n\n```\n0 <= 节点个数 <= 1000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode mirrorTree(TreeNode root) {\n        doFlip(root);\n        return root;\n    }\n\n    private void doFlip(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n\n        TreeNode left = node.left;\n        node.left = node.right;\n        node.right = left;\n        doFlip(node.left);\n        doFlip(node.right);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-27","published":1,"updated":"2023-01-05T07:13:34.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0n00983suu2p9h4hdg","content":"<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>\n<p>例如输入：</p>\n<p><code>     4    /   \\   2     7  / \\   / \\ 1   3 6   9</code><br>镜像输出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">4    /   \\   7     2  / \\   / \\ 9   6 3   1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root = [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= 节点个数 &lt;= 1000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mirrorTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>\n<p>例如输入：</p>\n<p><code>     4    /   \\   2     7  / \\   / \\ 1   3 6   9</code><br>镜像输出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">4    &#x2F;   \\   7     2  &#x2F; \\   &#x2F; \\ 9   6 3   1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; 节点个数 &lt;&#x3D; 1000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mirrorTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">doFlip</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-20","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-27T05:36:20.000Z","_content":"\n请实现一个函数用来判断字符串是否表示**数值**（包括整数和小数）。\n\n**数值**（按顺序）可以分成以下几个部分：\n\n1. 若干空格\n2. 一个 **小数** 或者 **整数**\n3. （可选）一个 `'e'` 或 `'E'` ，后面跟着一个 **整数**\n4. 若干空格\n\n**小数**（按顺序）可以分成以下几个部分：\n\n1. （可选）一个符号字符（`'+'` 或 `'-'`）\n2. 下述格式之一：\n   1. 至少一位数字，后面跟着一个点 `'.'`\n   2. 至少一位数字，后面跟着一个点 `'.'` ，后面再跟着至少一位数字\n   3. 一个点 `'.'` ，后面跟着至少一位数字\n\n**整数**（按顺序）可以分成以下几个部分：\n\n1. （可选）一个符号字符（`'+'` 或 `'-'`）\n2. 至少一位数字\n\n部分**数值**列举如下：\n\n- `[\"+100\", \"5e2\", \"-123\", \"3.1416\", \"-1E-16\", \"0123\"]`\n\n部分**非数值**列举如下：\n\n- `[\"12e\", \"1a3.14\", \"1.2.3\", \"+-5\", \"12e+5.4\"]`\n\n\n\n**示例 1：**\n\n```\n输入：s = \"0\"\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：s = \"e\"\n输出：false\n```\n\n**示例 3：**\n\n```\n输入：s = \".\"\n输出：false\n```\n\n**示例 4：**\n\n```\n输入：s = \"    .1  \"\n输出：true\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isNumber(String s) {\n        Map<State, Map<CharType, State>> transfer = new HashMap<State, Map<CharType, State>>();\n        Map<CharType, State> initialMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_SPACE, State.STATE_INITIAL);\n            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);\n            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);\n            put(CharType.CHAR_SIGN, State.STATE_INT_SIGN);\n        }};\n        transfer.put(State.STATE_INITIAL, initialMap);\n        Map<CharType, State> intSignMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);\n            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);\n        }};\n        transfer.put(State.STATE_INT_SIGN, intSignMap);\n        Map<CharType, State> integerMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);\n            put(CharType.CHAR_EXP, State.STATE_EXP);\n            put(CharType.CHAR_POINT, State.STATE_POINT);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_INTEGER, integerMap);\n        Map<CharType, State> pointMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);\n            put(CharType.CHAR_EXP, State.STATE_EXP);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_POINT, pointMap);\n        Map<CharType, State> pointWithoutIntMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);\n        }};\n        transfer.put(State.STATE_POINT_WITHOUT_INT, pointWithoutIntMap);\n        Map<CharType, State> fractionMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);\n            put(CharType.CHAR_EXP, State.STATE_EXP);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_FRACTION, fractionMap);\n        Map<CharType, State> expMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);\n            put(CharType.CHAR_SIGN, State.STATE_EXP_SIGN);\n        }};\n        transfer.put(State.STATE_EXP, expMap);\n        Map<CharType, State> expSignMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);\n        }};\n        transfer.put(State.STATE_EXP_SIGN, expSignMap);\n        Map<CharType, State> expNumberMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_EXP_NUMBER, expNumberMap);\n        Map<CharType, State> endMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_END, endMap);\n        int length = s.length();\n        State state = State.STATE_INITIAL;\n        for (int i = 0; i < length; i++) {\n            CharType type = toCharType(s.charAt(i));\n            if (!transfer.get(state).containsKey(type)) {\n                return false;\n            } else {\n                state = transfer.get(state).get(type);\n            }\n        }\n        return state == State.STATE_INTEGER || state == State.STATE_POINT || state == State.STATE_FRACTION || state == State.STATE_EXP_NUMBER || state == State.STATE_END;\n    }\n\n    public CharType toCharType(char ch) {\n        if (ch >= '0' && ch <= '9') {\n            return CharType.CHAR_NUMBER;\n        } else if (ch == 'e' || ch == 'E') {\n            return CharType.CHAR_EXP;\n        } else if (ch == '.') {\n            return CharType.CHAR_POINT;\n        } else if (ch == '+' || ch == '-') {\n            return CharType.CHAR_SIGN;\n        } else if (ch == ' ') {\n            return CharType.CHAR_SPACE;\n        } else {\n            return CharType.CHAR_ILLEGAL;\n        }\n    }\n\n    enum State {STATE_INITIAL, STATE_INT_SIGN, STATE_INTEGER, STATE_POINT, STATE_POINT_WITHOUT_INT, STATE_FRACTION, STATE_EXP, STATE_EXP_SIGN, STATE_EXP_NUMBER, STATE_END}\n\n    enum CharType {CHAR_NUMBER, CHAR_EXP, CHAR_POINT, CHAR_SIGN, CHAR_SPACE, CHAR_ILLEGAL}\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-20.md","raw":"---\ntitle: offer-20\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-27 13:36:20\n---\n\n请实现一个函数用来判断字符串是否表示**数值**（包括整数和小数）。\n\n**数值**（按顺序）可以分成以下几个部分：\n\n1. 若干空格\n2. 一个 **小数** 或者 **整数**\n3. （可选）一个 `'e'` 或 `'E'` ，后面跟着一个 **整数**\n4. 若干空格\n\n**小数**（按顺序）可以分成以下几个部分：\n\n1. （可选）一个符号字符（`'+'` 或 `'-'`）\n2. 下述格式之一：\n   1. 至少一位数字，后面跟着一个点 `'.'`\n   2. 至少一位数字，后面跟着一个点 `'.'` ，后面再跟着至少一位数字\n   3. 一个点 `'.'` ，后面跟着至少一位数字\n\n**整数**（按顺序）可以分成以下几个部分：\n\n1. （可选）一个符号字符（`'+'` 或 `'-'`）\n2. 至少一位数字\n\n部分**数值**列举如下：\n\n- `[\"+100\", \"5e2\", \"-123\", \"3.1416\", \"-1E-16\", \"0123\"]`\n\n部分**非数值**列举如下：\n\n- `[\"12e\", \"1a3.14\", \"1.2.3\", \"+-5\", \"12e+5.4\"]`\n\n\n\n**示例 1：**\n\n```\n输入：s = \"0\"\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：s = \"e\"\n输出：false\n```\n\n**示例 3：**\n\n```\n输入：s = \".\"\n输出：false\n```\n\n**示例 4：**\n\n```\n输入：s = \"    .1  \"\n输出：true\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean isNumber(String s) {\n        Map<State, Map<CharType, State>> transfer = new HashMap<State, Map<CharType, State>>();\n        Map<CharType, State> initialMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_SPACE, State.STATE_INITIAL);\n            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);\n            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);\n            put(CharType.CHAR_SIGN, State.STATE_INT_SIGN);\n        }};\n        transfer.put(State.STATE_INITIAL, initialMap);\n        Map<CharType, State> intSignMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);\n            put(CharType.CHAR_POINT, State.STATE_POINT_WITHOUT_INT);\n        }};\n        transfer.put(State.STATE_INT_SIGN, intSignMap);\n        Map<CharType, State> integerMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_INTEGER);\n            put(CharType.CHAR_EXP, State.STATE_EXP);\n            put(CharType.CHAR_POINT, State.STATE_POINT);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_INTEGER, integerMap);\n        Map<CharType, State> pointMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);\n            put(CharType.CHAR_EXP, State.STATE_EXP);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_POINT, pointMap);\n        Map<CharType, State> pointWithoutIntMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);\n        }};\n        transfer.put(State.STATE_POINT_WITHOUT_INT, pointWithoutIntMap);\n        Map<CharType, State> fractionMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_FRACTION);\n            put(CharType.CHAR_EXP, State.STATE_EXP);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_FRACTION, fractionMap);\n        Map<CharType, State> expMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);\n            put(CharType.CHAR_SIGN, State.STATE_EXP_SIGN);\n        }};\n        transfer.put(State.STATE_EXP, expMap);\n        Map<CharType, State> expSignMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);\n        }};\n        transfer.put(State.STATE_EXP_SIGN, expSignMap);\n        Map<CharType, State> expNumberMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_NUMBER, State.STATE_EXP_NUMBER);\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_EXP_NUMBER, expNumberMap);\n        Map<CharType, State> endMap = new HashMap<CharType, State>() {{\n            put(CharType.CHAR_SPACE, State.STATE_END);\n        }};\n        transfer.put(State.STATE_END, endMap);\n        int length = s.length();\n        State state = State.STATE_INITIAL;\n        for (int i = 0; i < length; i++) {\n            CharType type = toCharType(s.charAt(i));\n            if (!transfer.get(state).containsKey(type)) {\n                return false;\n            } else {\n                state = transfer.get(state).get(type);\n            }\n        }\n        return state == State.STATE_INTEGER || state == State.STATE_POINT || state == State.STATE_FRACTION || state == State.STATE_EXP_NUMBER || state == State.STATE_END;\n    }\n\n    public CharType toCharType(char ch) {\n        if (ch >= '0' && ch <= '9') {\n            return CharType.CHAR_NUMBER;\n        } else if (ch == 'e' || ch == 'E') {\n            return CharType.CHAR_EXP;\n        } else if (ch == '.') {\n            return CharType.CHAR_POINT;\n        } else if (ch == '+' || ch == '-') {\n            return CharType.CHAR_SIGN;\n        } else if (ch == ' ') {\n            return CharType.CHAR_SPACE;\n        } else {\n            return CharType.CHAR_ILLEGAL;\n        }\n    }\n\n    enum State {STATE_INITIAL, STATE_INT_SIGN, STATE_INTEGER, STATE_POINT, STATE_POINT_WITHOUT_INT, STATE_FRACTION, STATE_EXP, STATE_EXP_SIGN, STATE_EXP_NUMBER, STATE_END}\n\n    enum CharType {CHAR_NUMBER, CHAR_EXP, CHAR_POINT, CHAR_SIGN, CHAR_SPACE, CHAR_ILLEGAL}\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-20","published":1,"updated":"2022-12-27T05:46:59.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0n009b3suuh53ff6w0","content":"<p>请实现一个函数用来判断字符串是否表示<strong>数值</strong>（包括整数和小数）。</p>\n<p><strong>数值</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>若干空格</li>\n<li>一个 <strong>小数</strong> 或者 <strong>整数</strong></li>\n<li>（可选）一个 <code>'e'</code> 或 <code>'E'</code> ，后面跟着一个 <strong>整数</strong></li>\n<li>若干空格</li>\n</ol>\n<p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>（可选）一个符号字符（<code>'+'</code> 或 <code>'-'</code>）</li>\n<li>下述格式之一：<ol>\n<li>至少一位数字，后面跟着一个点 <code>'.'</code></li>\n<li>至少一位数字，后面跟着一个点 <code>'.'</code> ，后面再跟着至少一位数字</li>\n<li>一个点 <code>'.'</code> ，后面跟着至少一位数字</li>\n</ol>\n</li>\n</ol>\n<p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>（可选）一个符号字符（<code>'+'</code> 或 <code>'-'</code>）</li>\n<li>至少一位数字</li>\n</ol>\n<p>部分<strong>数值</strong>列举如下：</p>\n<ul>\n<li><code>[\"+100\", \"5e2\", \"-123\", \"3.1416\", \"-1E-16\", \"0123\"]</code></li>\n</ul>\n<p>部分<strong>非数值</strong>列举如下：</p>\n<ul>\n<li><code>[\"12e\", \"1a3.14\", \"1.2.3\", \"+-5\", \"12e+5.4\"]</code></li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s = \"0\"\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s = \"e\"\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s = \".\"\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s = \"    .1  \"\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> transfer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> initialMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INITIAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SIGN<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INT_SIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INITIAL<span class=\"token punctuation\">,</span> initialMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> intSignMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INT_SIGN<span class=\"token punctuation\">,</span> intSignMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> integerMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">,</span> integerMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> pointMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT<span class=\"token punctuation\">,</span> pointMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> pointWithoutIntMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">,</span> pointWithoutIntMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> fractionMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">,</span> fractionMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> expMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SIGN<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_SIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">,</span> expMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> expSignMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_SIGN<span class=\"token punctuation\">,</span> expSignMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> expNumberMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">,</span> expNumberMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span> endMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">,</span> endMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">State</span> state <span class=\"token operator\">=</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INITIAL<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">CharType</span> type <span class=\"token operator\">=</span> <span class=\"token function\">toCharType</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>transfer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                state <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharType</span> <span class=\"token function\">toCharType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&gt;=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'e'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SIGN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_ILLEGAL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>STATE_INITIAL<span class=\"token punctuation\">,</span> STATE_INT_SIGN<span class=\"token punctuation\">,</span> STATE_INTEGER<span class=\"token punctuation\">,</span> STATE_POINT<span class=\"token punctuation\">,</span> STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">,</span> STATE_FRACTION<span class=\"token punctuation\">,</span> STATE_EXP<span class=\"token punctuation\">,</span> STATE_EXP_SIGN<span class=\"token punctuation\">,</span> STATE_EXP_NUMBER<span class=\"token punctuation\">,</span> STATE_END<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">CharType</span> <span class=\"token punctuation\">{</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> CHAR_EXP<span class=\"token punctuation\">,</span> CHAR_POINT<span class=\"token punctuation\">,</span> CHAR_SIGN<span class=\"token punctuation\">,</span> CHAR_SPACE<span class=\"token punctuation\">,</span> CHAR_ILLEGAL<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请实现一个函数用来判断字符串是否表示<strong>数值</strong>（包括整数和小数）。</p>\n<p><strong>数值</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>若干空格</li>\n<li>一个 <strong>小数</strong> 或者 <strong>整数</strong></li>\n<li>（可选）一个 <code>&#39;e&#39;</code> 或 <code>&#39;E&#39;</code> ，后面跟着一个 <strong>整数</strong></li>\n<li>若干空格</li>\n</ol>\n<p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>（可选）一个符号字符（<code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code>）</li>\n<li>下述格式之一：<ol>\n<li>至少一位数字，后面跟着一个点 <code>&#39;.&#39;</code></li>\n<li>至少一位数字，后面跟着一个点 <code>&#39;.&#39;</code> ，后面再跟着至少一位数字</li>\n<li>一个点 <code>&#39;.&#39;</code> ，后面跟着至少一位数字</li>\n</ol>\n</li>\n</ol>\n<p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p>\n<ol>\n<li>（可选）一个符号字符（<code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code>）</li>\n<li>至少一位数字</li>\n</ol>\n<p>部分<strong>数值</strong>列举如下：</p>\n<ul>\n<li><code>[&quot;+100&quot;, &quot;5e2&quot;, &quot;-123&quot;, &quot;3.1416&quot;, &quot;-1E-16&quot;, &quot;0123&quot;]</code></li>\n</ul>\n<p>部分<strong>非数值</strong>列举如下：</p>\n<ul>\n<li><code>[&quot;12e&quot;, &quot;1a3.14&quot;, &quot;1.2.3&quot;, &quot;+-5&quot;, &quot;12e+5.4&quot;]</code></li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;0&quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;e&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;.&quot;\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;    .1  &quot;\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> transfer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> initialMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INITIAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SIGN<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INT_SIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INITIAL<span class=\"token punctuation\">,</span> initialMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> intSignMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INT_SIGN<span class=\"token punctuation\">,</span> intSignMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> integerMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER<span class=\"token punctuation\">,</span> integerMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> pointMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT<span class=\"token punctuation\">,</span> pointMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> pointWithoutIntMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">,</span> pointWithoutIntMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> fractionMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION<span class=\"token punctuation\">,</span> fractionMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> expMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SIGN<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_SIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP<span class=\"token punctuation\">,</span> expMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> expSignMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_SIGN<span class=\"token punctuation\">,</span> expSignMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> expNumberMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER<span class=\"token punctuation\">,</span> expNumberMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span> endMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        transfer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">,</span> endMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">State</span> state <span class=\"token operator\">=</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INITIAL<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">CharType</span> type <span class=\"token operator\">=</span> <span class=\"token function\">toCharType</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>transfer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                state <span class=\"token operator\">=</span> transfer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_INTEGER <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_POINT <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_FRACTION <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_EXP_NUMBER <span class=\"token operator\">||</span> state <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span>STATE_END<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CharType</span> <span class=\"token function\">toCharType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_NUMBER<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'e'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_EXP<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_POINT<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SIGN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_SPACE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharType</span><span class=\"token punctuation\">.</span>CHAR_ILLEGAL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span>STATE_INITIAL<span class=\"token punctuation\">,</span> STATE_INT_SIGN<span class=\"token punctuation\">,</span> STATE_INTEGER<span class=\"token punctuation\">,</span> STATE_POINT<span class=\"token punctuation\">,</span> STATE_POINT_WITHOUT_INT<span class=\"token punctuation\">,</span> STATE_FRACTION<span class=\"token punctuation\">,</span> STATE_EXP<span class=\"token punctuation\">,</span> STATE_EXP_SIGN<span class=\"token punctuation\">,</span> STATE_EXP_NUMBER<span class=\"token punctuation\">,</span> STATE_END<span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">CharType</span> <span class=\"token punctuation\">&#123;</span>CHAR_NUMBER<span class=\"token punctuation\">,</span> CHAR_EXP<span class=\"token punctuation\">,</span> CHAR_POINT<span class=\"token punctuation\">,</span> CHAR_SIGN<span class=\"token punctuation\">,</span> CHAR_SPACE<span class=\"token punctuation\">,</span> CHAR_ILLEGAL<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-28","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-06T03:18:57.000Z","_content":"\n请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。\n\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n\n`    1    / \\   2   2  / \\ / \\ 3  4 4  3`\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n\n```\n    1    / \\   2   2    \\   \\    3    3\n```\n\n\n\n**示例 1：**\n\n```\n输入：root = [1,2,2,3,4,4,3]\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：root = [1,2,2,null,3,null,3]\n输出：false\n```\n\n\n\n**限制：**\n\n```\n0 <= 节点个数 <= 1000\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return symmetricFunc(root.left, root.right);\n    }\n\n    private boolean symmetricFunc(TreeNode left, TreeNode right) {\n        if (left == null && right == null) {\n            return true;\n        }\n\n        if (left == null || right == null || left.val != right.val) {\n            return false;\n        }\n\n        return symmetricFunc(left.left, right.right) && symmetricFunc(left.right, right.left);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-28.md","raw":"---\ntitle: offer-28\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-06 11:18:57\n---\n\n请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。\n\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n\n`    1    / \\   2   2  / \\ / \\ 3  4 4  3`\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n\n```\n    1    / \\   2   2    \\   \\    3    3\n```\n\n\n\n**示例 1：**\n\n```\n输入：root = [1,2,2,3,4,4,3]\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：root = [1,2,2,null,3,null,3]\n输出：false\n```\n\n\n\n**限制：**\n\n```\n0 <= 节点个数 <= 1000\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return symmetricFunc(root.left, root.right);\n    }\n\n    private boolean symmetricFunc(TreeNode left, TreeNode right) {\n        if (left == null && right == null) {\n            return true;\n        }\n\n        if (left == null || right == null || left.val != right.val) {\n            return false;\n        }\n\n        return symmetricFunc(left.left, right.right) && symmetricFunc(left.right, right.left);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-28","published":1,"updated":"2023-01-06T03:51:50.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0o009e3suuefp801cd","content":"<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>\n<p><code>    1    / \\   2   2  / \\ / \\ 3  4 4  3</code><br>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1    / \\   2   2    \\   \\    3    3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root = [1,2,2,3,4,4,3]\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root = [1,2,2,null,3,null,3]\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= 节点个数 &lt;= 1000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>\n<p><code>    1    / \\   2   2  / \\ / \\ 3  4 4  3</code><br>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1    &#x2F; \\   2   2    \\   \\    3    3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [1,2,2,3,4,4,3]\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [1,2,2,null,3,null,3]\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; 节点个数 &lt;&#x3D; 1000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">symmetricFunc</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-26","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-04T06:05:57.000Z","_content":"\n输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)\n\nB是A的子结构， 即 A中有出现和B相同的结构和节点值。\n\n例如:\n给定的树 A:\n\n`     3     / \\    4   5   / \\  1   2`\n给定的树 B：\n\n`   4    /  1`\n返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。\n\n**示例 1：**\n\n```\n输入：A = [1,2,3], B = [3,1]\n输出：false\n```\n\n**示例 2：**\n\n```\n输入：A = [3,4,5,1,2], B = [4,1]\n输出：true\n```\n\n**限制：**\n\n```\n0 <= 节点个数 <= 10000\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSubStructure(TreeNode A, TreeNode B) {\n        if (A == null || B == null) {\n            return false;\n        }\n\n        if (A.val == B.val && isSame(A, B)) {\n            return true;\n        }\n\n        return isSubStructure(A.left, B) || isSubStructure(A.right, B);\n    }\n\n\n    private boolean isSame(TreeNode nodeA, TreeNode nodeB) {\n        if (nodeB == null) {\n            return true;\n        }\n\n        if (nodeA == null) {\n            return false;\n        }\n\n        if (nodeA.val != nodeB.val) {\n            return false;\n        } else {\n            return isSame(nodeA.left, nodeB.left) && isSame(nodeA.right, nodeB.right);\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-26.md","raw":"---\ntitle: offer-26\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-04 14:05:57\n---\n\n输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)\n\nB是A的子结构， 即 A中有出现和B相同的结构和节点值。\n\n例如:\n给定的树 A:\n\n`     3     / \\    4   5   / \\  1   2`\n给定的树 B：\n\n`   4    /  1`\n返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。\n\n**示例 1：**\n\n```\n输入：A = [1,2,3], B = [3,1]\n输出：false\n```\n\n**示例 2：**\n\n```\n输入：A = [3,4,5,1,2], B = [4,1]\n输出：true\n```\n\n**限制：**\n\n```\n0 <= 节点个数 <= 10000\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSubStructure(TreeNode A, TreeNode B) {\n        if (A == null || B == null) {\n            return false;\n        }\n\n        if (A.val == B.val && isSame(A, B)) {\n            return true;\n        }\n\n        return isSubStructure(A.left, B) || isSubStructure(A.right, B);\n    }\n\n\n    private boolean isSame(TreeNode nodeA, TreeNode nodeB) {\n        if (nodeB == null) {\n            return true;\n        }\n\n        if (nodeA == null) {\n            return false;\n        }\n\n        if (nodeA.val != nodeB.val) {\n            return false;\n        } else {\n            return isSame(nodeA.left, nodeB.left) && isSame(nodeA.right, nodeB.right);\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-26","published":1,"updated":"2023-01-04T07:01:48.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0o009h3suu4ed9d7vj","content":"<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>\n<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>\n<p>例如:<br>给定的树 A:</p>\n<p><code>     3     / \\    4   5   / \\  1   2</code><br>给定的树 B：</p>\n<p><code>   4    /  1</code><br>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：A = [1,2,3], B = [3,1]\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：A = [3,4,5,1,2], B = [4,1]\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= 节点个数 &lt;= 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSubStructure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isSubStructure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isSubStructure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> nodeA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> nodeB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeB <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeA<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> nodeB<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>nodeA<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> nodeB<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>nodeA<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> nodeB<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>\n<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>\n<p>例如:<br>给定的树 A:</p>\n<p><code>     3     / \\    4   5   / \\  1   2</code><br>给定的树 B：</p>\n<p><code>   4    /  1</code><br>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：A &#x3D; [1,2,3], B &#x3D; [3,1]\n输出：false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：A &#x3D; [3,4,5,1,2], B &#x3D; [4,1]\n输出：true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; 节点个数 &lt;&#x3D; 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSubStructure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isSubStructure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isSubStructure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> nodeA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> nodeB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeB <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeA<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> nodeB<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>nodeA<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> nodeB<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>nodeA<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> nodeB<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-30","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-10T03:01:04.000Z","_content":"\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n\n\n**示例:**\n\n```\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();      --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n\n\n**提示：**\n\n1. 各函数的调用总次数不超过 20000 次\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass MinStack {\n\n    /** initialize your data structure here. */\n    private List<Integer> dataList;\n    private int minIndex;\n\n    public MinStack() {\n        this.dataList = new ArrayList<>();\n        this.minIndex = -1;\n    }\n\n    public void push(int x) {\n        this.dataList.add(x);\n\n        if (this.minIndex == -1) {\n            this.minIndex = 0;\n        } else if (x < this.dataList.get(minIndex)) {\n            this.minIndex = this.dataList.size() - 1;\n        }\n    }\n\n    public void pop() {\n        if (this.dataList.size() > 0) {\n            this.dataList.remove(this.dataList.size() - 1);\n\n            if (this.dataList.size() == this.minIndex) {\n                if (this.dataList.size() == 0) {\n                    this.minIndex = -1;\n                } else {\n                    int minV = Integer.MAX_VALUE;\n\n                    for (int i = 0; i < this.dataList.size(); i++) {\n                        if (this.dataList.get(i) <= minV) {a\n                            minV = this.dataList.get(i);\n                            this.minIndex = i;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public int top() {\n        if (this.dataList.size() > 0) {\n            return this.dataList.get(this.dataList.size() - 1);\n        } else {\n            return  Integer.MAX_VALUE;\n        }\n    }\n\n    public int min() {\n        if (this.minIndex != -1) {\n            return this.dataList.get(this.minIndex);\n        } else {\n            return  Integer.MAX_VALUE;\n        }\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.min();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-30.md","raw":"---\ntitle: offer-30\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-10 11:01:04\n---\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n\n\n**示例:**\n\n```\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();      --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n\n\n**提示：**\n\n1. 各函数的调用总次数不超过 20000 次\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass MinStack {\n\n    /** initialize your data structure here. */\n    private List<Integer> dataList;\n    private int minIndex;\n\n    public MinStack() {\n        this.dataList = new ArrayList<>();\n        this.minIndex = -1;\n    }\n\n    public void push(int x) {\n        this.dataList.add(x);\n\n        if (this.minIndex == -1) {\n            this.minIndex = 0;\n        } else if (x < this.dataList.get(minIndex)) {\n            this.minIndex = this.dataList.size() - 1;\n        }\n    }\n\n    public void pop() {\n        if (this.dataList.size() > 0) {\n            this.dataList.remove(this.dataList.size() - 1);\n\n            if (this.dataList.size() == this.minIndex) {\n                if (this.dataList.size() == 0) {\n                    this.minIndex = -1;\n                } else {\n                    int minV = Integer.MAX_VALUE;\n\n                    for (int i = 0; i < this.dataList.size(); i++) {\n                        if (this.dataList.get(i) <= minV) {a\n                            minV = this.dataList.get(i);\n                            this.minIndex = i;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public int top() {\n        if (this.dataList.size() > 0) {\n            return this.dataList.get(this.dataList.size() - 1);\n        } else {\n            return  Integer.MAX_VALUE;\n        }\n    }\n\n    public int min() {\n        if (this.minIndex != -1) {\n            return this.dataList.get(this.minIndex);\n        } else {\n            return  Integer.MAX_VALUE;\n        }\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.min();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-30","published":1,"updated":"2023-01-10T07:47:10.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0p009k3suucgu02r53","content":"<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.min();   --&gt; 返回 -2.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>各函数的调用总次数不超过 20000 次</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MinStack</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/** initialize your data structure here. */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> dataList<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> minIndex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>a\n                            minV <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.min();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MinStack minStack &#x3D; new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.min();   --&gt; 返回 -2.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>各函数的调用总次数不超过 20000 次</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MinStack</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/** initialize your data structure here. */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> dataList<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> minIndex<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MinStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">int</span> minV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> minV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>a\n                            minV <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span>  <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.min();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-24","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2022-12-30T03:35:37.000Z","_content":"\n定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n\n\n**示例:**\n\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n\n\n**限制：**\n\n```\n0 <= 节点个数 <= 5000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        return reverseFunc(head);\n    }\n\n    private ListNode reverseFunc(ListNode node) {\n        if (node == null || node.next == null) {\n            return node;\n        }\n\n        ListNode nextNode = node.next;\n        node.next = null;\n        ListNode newHead = reverseFunc(nextNode);\n        nextNode.next = node;\n        return newHead;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-24.md","raw":"---\ntitle: offer-24\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2022-12-30 11:35:37\n---\n\n定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n\n\n**示例:**\n\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n\n\n**限制：**\n\n```\n0 <= 节点个数 <= 5000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        return reverseFunc(head);\n    }\n\n    private ListNode reverseFunc(ListNode node) {\n        if (node == null || node.next == null) {\n            return node;\n        }\n\n        ListNode nextNode = node.next;\n        node.next = null;\n        ListNode newHead = reverseFunc(nextNode);\n        nextNode.next = node;\n        return newHead;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-24","published":1,"updated":"2022-12-30T06:08:17.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0q009n3suu67g08ih6","content":"<p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= 节点个数 &lt;= 5000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reverseFunc</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">ListNode</span> nextNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> newHead <span class=\"token operator\">=</span> <span class=\"token function\">reverseFunc</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; 节点个数 &lt;&#x3D; 5000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode &#123;\n *     int val;\n *     ListNode next;\n *     ListNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reverseFunc</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">ListNode</span> nextNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> newHead <span class=\"token operator\">=</span> <span class=\"token function\">reverseFunc</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-32-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-13T03:23:46.000Z","_content":"\n从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。\n\n\n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n\n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        if (root == null) {\n            return new ArrayList<>();\n        }\n\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        List<List<Integer>> resultList = new ArrayList<>();\n\n        nodeQueue.add(root);\n\n        while (!nodeQueue.isEmpty()) {\n            int qSize = nodeQueue.size();\n            List<Integer> layer = new ArrayList<>();\n            for (int i = 0; i < qSize; i++) {\n                TreeNode node = nodeQueue.poll();\n                layer.add(node.val);\n\n                if (node.left != null) {\n                    nodeQueue.add(node.left);\n                }\n\n                if (node.right != null) {\n                    nodeQueue.add(node.right);\n                }\n            }\n            resultList.add(layer);\n        }\n\n        return resultList;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-32-2.md","raw":"---\ntitle: offer-32-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-13 11:23:46\n---\n\n从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。\n\n\n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n\n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        if (root == null) {\n            return new ArrayList<>();\n        }\n\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        List<List<Integer>> resultList = new ArrayList<>();\n\n        nodeQueue.add(root);\n\n        while (!nodeQueue.isEmpty()) {\n            int qSize = nodeQueue.size();\n            List<Integer> layer = new ArrayList<>();\n            for (int i = 0; i < qSize; i++) {\n                TreeNode node = nodeQueue.poll();\n                layer.add(node.val);\n\n                if (node.left != null) {\n                    nodeQueue.add(node.left);\n                }\n\n                if (node.right != null) {\n                    nodeQueue.add(node.right);\n                }\n            }\n            resultList.add(layer);\n        }\n\n        return resultList;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-32-2","published":1,"updated":"2023-01-13T03:54:34.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0q009q3suu2bcn26lc","content":"<p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p>\n<p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n / \\\n9  20\n  /  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回其层次遍历结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[\n  [3],\n  [9,20],\n  [15,7]\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> qSize <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> layer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> qSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                layer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p>\n<p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n &#x2F; \\\n9  20\n  &#x2F;  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回其层次遍历结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[\n  [3],\n  [9,20],\n  [15,7]\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> qSize <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> layer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> qSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                layer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-29","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-09T09:09:07.000Z","_content":"\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n\n\n\n**示例 1：**\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]\n```\n\n**示例 2：**\n\n```\n输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n```\n\n\n\n**限制：**\n\n- `0 <= matrix.length <= 100`\n- `0 <= matrix[i].length <= 100`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] spiralOrder(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return new int[0];\n        }\n\n        int[][] next = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n        int curIndex = 0;\n        Set<String> visitedLocSet = new HashSet<>();\n        int[] result = new int[matrix.length * matrix[0].length];\n        int curR = 0, curC = -1;\n\n        while (visitedLocSet.size() < result.length) {\n            curR = curR + next[curIndex][0];\n            curC = curC + next[curIndex][1];\n            String locStr = \"\" + curR + \"-\" + curC;\n\n            if (curR < 0 || curC < 0 || curR >= matrix.length || curC >= matrix[0].length || visitedLocSet.contains(locStr)) {\n                curR = curR - next[curIndex][0];\n                curC = curC - next[curIndex][1];\n                curIndex++;\n\n                if (curIndex == 4) {\n                    curIndex = 0;\n                }\n\n                continue;\n            }\n\n\n            result[visitedLocSet.size()] = matrix[curR][curC];\n            visitedLocSet.add(locStr);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-29.md","raw":"---\ntitle: offer-29\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-09 17:09:07\n---\n\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n\n\n\n**示例 1：**\n\n```\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]\n```\n\n**示例 2：**\n\n```\n输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n```\n\n\n\n**限制：**\n\n- `0 <= matrix.length <= 100`\n- `0 <= matrix[i].length <= 100`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] spiralOrder(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {\n            return new int[0];\n        }\n\n        int[][] next = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n        int curIndex = 0;\n        Set<String> visitedLocSet = new HashSet<>();\n        int[] result = new int[matrix.length * matrix[0].length];\n        int curR = 0, curC = -1;\n\n        while (visitedLocSet.size() < result.length) {\n            curR = curR + next[curIndex][0];\n            curC = curC + next[curIndex][1];\n            String locStr = \"\" + curR + \"-\" + curC;\n\n            if (curR < 0 || curC < 0 || curR >= matrix.length || curC >= matrix[0].length || visitedLocSet.contains(locStr)) {\n                curR = curR - next[curIndex][0];\n                curC = curC - next[curIndex][1];\n                curIndex++;\n\n                if (curIndex == 4) {\n                    curIndex = 0;\n                }\n\n                continue;\n            }\n\n\n            result[visitedLocSet.size()] = matrix[curR][curC];\n            visitedLocSet.add(locStr);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-29","published":1,"updated":"2023-01-09T09:37:36.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0r009t3suu4lwifkvs","content":"<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= matrix.length &lt;= 100</code></li>\n<li><code>0 &lt;= matrix[i].length &lt;= 100</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> curIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> visitedLocSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curR <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curC <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            curR <span class=\"token operator\">=</span> curR <span class=\"token operator\">+</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            curC <span class=\"token operator\">=</span> curC <span class=\"token operator\">+</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> locStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> curR <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> curC<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curR <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> curC <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> curR <span class=\"token operator\">&gt;=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> curC <span class=\"token operator\">&gt;=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>locStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curR <span class=\"token operator\">=</span> curR <span class=\"token operator\">-</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curC <span class=\"token operator\">=</span> curC <span class=\"token operator\">-</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curIndex <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    curIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n\n            result<span class=\"token punctuation\">[</span>visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>curR<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>locStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：matrix &#x3D; [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= matrix.length &lt;= 100</code></li>\n<li><code>0 &lt;= matrix[i].length &lt;= 100</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> curIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> visitedLocSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curR <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curC <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            curR <span class=\"token operator\">=</span> curR <span class=\"token operator\">+</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            curC <span class=\"token operator\">=</span> curC <span class=\"token operator\">+</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> locStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> curR <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> curC<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curR <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> curC <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> curR <span class=\"token operator\">>=</span> matrix<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> curC <span class=\"token operator\">>=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>locStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                curR <span class=\"token operator\">=</span> curR <span class=\"token operator\">-</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curC <span class=\"token operator\">=</span> curC <span class=\"token operator\">-</span> next<span class=\"token punctuation\">[</span>curIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                curIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curIndex <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    curIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n\n            result<span class=\"token punctuation\">[</span>visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>curR<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            visitedLocSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>locStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-33","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-16T03:33:05.000Z","_content":"\n输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 `true`，否则返回 `false`。假设输入的数组的任意两个数字都互不相同。\n\n\n\n参考以下这颗二叉搜索树：\n\n```\n     5\n    / \\\n   2   6\n  / \\\n 1   3\n```\n\n**示例 1：**\n\n```\n输入: [1,6,3,2,5]\n输出: false\n```\n\n**示例 2：**\n\n```\n输入: [1,3,2,6,5]\n输出: true\n```\n\n\n\n**提示：**\n\n1. `数组长度 <= 1000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean verifyPostorder(int[] postorder) {\n        if (postorder == null) {\n            return false;\n        }\n\n        if (postorder.length <= 2) {\n            return true;\n        }\n\n        return isPost(postorder, 0, postorder.length - 1);\n    }\n\n    private boolean isPost(int[] postorder, int from, int to) {\n        if (to - from <= 1) {\n            return true;\n        }\n\n        int firstBiggerIndex = to;\n\n        int toValue = postorder[to];\n\n        for (int i = from; i < to; i++) {\n            if (postorder[i] > toValue) {\n                firstBiggerIndex = i;\n                break;\n            }\n        }\n\n        for (int i = firstBiggerIndex; i < to; i++) {\n            if (postorder[i] < toValue) {\n                return false;\n            }\n        }\n\n        return isPost(postorder, from, firstBiggerIndex - 1) && isPost(postorder, firstBiggerIndex, to - 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-33.md","raw":"---\ntitle: offer-33\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-16 11:33:05\n---\n\n输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 `true`，否则返回 `false`。假设输入的数组的任意两个数字都互不相同。\n\n\n\n参考以下这颗二叉搜索树：\n\n```\n     5\n    / \\\n   2   6\n  / \\\n 1   3\n```\n\n**示例 1：**\n\n```\n输入: [1,6,3,2,5]\n输出: false\n```\n\n**示例 2：**\n\n```\n输入: [1,3,2,6,5]\n输出: true\n```\n\n\n\n**提示：**\n\n1. `数组长度 <= 1000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean verifyPostorder(int[] postorder) {\n        if (postorder == null) {\n            return false;\n        }\n\n        if (postorder.length <= 2) {\n            return true;\n        }\n\n        return isPost(postorder, 0, postorder.length - 1);\n    }\n\n    private boolean isPost(int[] postorder, int from, int to) {\n        if (to - from <= 1) {\n            return true;\n        }\n\n        int firstBiggerIndex = to;\n\n        int toValue = postorder[to];\n\n        for (int i = from; i < to; i++) {\n            if (postorder[i] > toValue) {\n                firstBiggerIndex = i;\n                break;\n            }\n        }\n\n        for (int i = firstBiggerIndex; i < to; i++) {\n            if (postorder[i] < toValue) {\n                return false;\n            }\n        }\n\n        return isPost(postorder, from, firstBiggerIndex - 1) && isPost(postorder, firstBiggerIndex, to - 1);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-33","published":1,"updated":"2023-01-17T09:15:35.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0s009w3suu2y59c55p","content":"<p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 <code>true</code>，否则返回 <code>false</code>。假设输入的数组的任意两个数字都互不相同。</p>\n<p>参考以下这颗二叉搜索树：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    5\n   / \\\n  2   6\n / \\\n1   3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1,6,3,2,5]\n输出: false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1,3,2,6,5]\n输出: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>数组长度 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">verifyPostorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span> <span class=\"token operator\">-</span> from <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> firstBiggerIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> toValue <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> toValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                firstBiggerIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstBiggerIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> toValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> firstBiggerIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> firstBiggerIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 <code>true</code>，否则返回 <code>false</code>。假设输入的数组的任意两个数字都互不相同。</p>\n<p>参考以下这颗二叉搜索树：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    5\n   &#x2F; \\\n  2   6\n &#x2F; \\\n1   3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1,6,3,2,5]\n输出: false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1,3,2,6,5]\n输出: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>数组长度 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">verifyPostorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span> <span class=\"token operator\">-</span> from <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> firstBiggerIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> toValue <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> toValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                firstBiggerIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstBiggerIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> toValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> firstBiggerIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPost</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> firstBiggerIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-34","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-17T09:15:46.000Z","_content":"\n给你二叉树的根节点 `root` 和一个整数目标和 `targetSum` ，找出所有 **从根节点到叶子节点** 路径总和等于给定目标和的路径。\n\n**叶子节点** 是指没有子节点的节点。\n\n\n\n**示例 1：**\n\n![img](https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg)\n\n```\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n```\n\n**示例 2：**\n\n![img](https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg)\n\n```\n输入：root = [1,2,3], targetSum = 5\n输出：[]\n```\n\n**示例 3：**\n\n```\n输入：root = [1,2], targetSum = 0\n输出：[]\n```\n\n\n\n**提示：**\n\n- 树中节点总数在范围 `[0, 5000]` 内\n- `-1000 <= Node.val <= 1000`\n- `-1000 <= targetSum <= 1000`\n\n注意：本题与主站 113 题相同：https://leetcode-cn.com/problems/path-sum-ii/\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int target) {\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-34.md","raw":"---\ntitle: offer-34\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-17 17:15:46\n---\n\n给你二叉树的根节点 `root` 和一个整数目标和 `targetSum` ，找出所有 **从根节点到叶子节点** 路径总和等于给定目标和的路径。\n\n**叶子节点** 是指没有子节点的节点。\n\n\n\n**示例 1：**\n\n![img](https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg)\n\n```\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n```\n\n**示例 2：**\n\n![img](https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg)\n\n```\n输入：root = [1,2,3], targetSum = 5\n输出：[]\n```\n\n**示例 3：**\n\n```\n输入：root = [1,2], targetSum = 0\n输出：[]\n```\n\n\n\n**提示：**\n\n- 树中节点总数在范围 `[0, 5000]` 内\n- `-1000 <= Node.val <= 1000`\n- `-1000 <= targetSum <= 1000`\n\n注意：本题与主站 113 题相同：https://leetcode-cn.com/problems/path-sum-ii/\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int target) {\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-34","published":1,"updated":"2023-01-18T03:25:08.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0s009z3suubpuqdbt0","content":"<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p>\n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root = [1,2,3], targetSum = 5\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root = [1,2], targetSum = 0\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点总数在范围 <code>[0, 5000]</code> 内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n<p>注意：本题与主站 113 题相同：<a href=\"https://leetcode-cn.com/problems/path-sum-ii/\">https://leetcode-cn.com/problems/path-sum-ii/</a></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">pathSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p>\n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum &#x3D; 22\n输出：[[5,4,11,2],[5,8,4,5]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [1,2,3], targetSum &#x3D; 5\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [1,2], targetSum &#x3D; 0\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点总数在范围 <code>[0, 5000]</code> 内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n<li><code>-1000 &lt;= targetSum &lt;= 1000</code></li>\n</ul>\n<p>注意：本题与主站 113 题相同：<a href=\"https://leetcode-cn.com/problems/path-sum-ii/\">https://leetcode-cn.com/problems/path-sum-ii/</a></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() &#123;&#125;\n *     TreeNode(int val) &#123; this.val = val; &#125;\n *     TreeNode(int val, TreeNode left, TreeNode right) &#123;\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pathSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-35","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-18T03:24:51.000Z","_content":"\n请实现 `copyRandomList` 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 `next` 指针指向下一个节点，还有一个 `random` 指针指向链表中的任意节点或者 `null`。\n\n\n\n**示例 1：**\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png)\n\n```\n输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]\n```\n\n**示例 2：**\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png)\n\n```\n输入：head = [[1,1],[2,1]]\n输出：[[1,1],[2,1]]\n```\n\n**示例 3：**\n\n**![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png)**\n\n```\n输入：head = [[3,null],[3,0],[3,null]]\n输出：[[3,null],[3,0],[3,null]]\n```\n\n**示例 4：**\n\n```\n输入：head = []\n输出：[]\n解释：给定的链表为空（空指针），因此返回 null。\n```\n\n\n\n**提示：**\n\n- `-10000 <= Node.val <= 10000`\n- `Node.random` 为空（null）或指向链表中的节点。\n- 节点数目不超过 1000 。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/*\n// Definition for a Node.\nclass Node {\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) {\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    }\n}\n*/\nclass Solution {\n    public Node copyRandomList(Node head) {\n        if (head == null) {\n            return head;\n        }\n        Node newHead = new Node(head.val);\n\n\n        Map<Node, Node> nodeMap = new HashMap<>();\n        nodeMap.put(head, newHead);\n        Node temp = head.next;\n        Node last = newHead;\n        while (temp != null) {\n            Node tempCopy = new Node(temp.val);\n            nodeMap.put(temp, tempCopy);\n            last.next = tempCopy;\n            last = tempCopy;\n            temp = temp.next;\n        }\n        last.next = null;\n\n        temp = head;\n        while (temp != null) {\n            Node tempCopy = nodeMap.get(temp);\n            if (temp.random == null) {\n                tempCopy.random = null;\n            } else {\n                Node target = nodeMap.get(temp.random);\n                tempCopy.random = target;\n            }\n            temp = temp.next;\n        }\n\n        return newHead;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-35.md","raw":"---\ntitle: offer-35\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-18 11:24:51\n---\n\n请实现 `copyRandomList` 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 `next` 指针指向下一个节点，还有一个 `random` 指针指向链表中的任意节点或者 `null`。\n\n\n\n**示例 1：**\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png)\n\n```\n输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]\n```\n\n**示例 2：**\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png)\n\n```\n输入：head = [[1,1],[2,1]]\n输出：[[1,1],[2,1]]\n```\n\n**示例 3：**\n\n**![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png)**\n\n```\n输入：head = [[3,null],[3,0],[3,null]]\n输出：[[3,null],[3,0],[3,null]]\n```\n\n**示例 4：**\n\n```\n输入：head = []\n输出：[]\n解释：给定的链表为空（空指针），因此返回 null。\n```\n\n\n\n**提示：**\n\n- `-10000 <= Node.val <= 10000`\n- `Node.random` 为空（null）或指向链表中的节点。\n- 节点数目不超过 1000 。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/*\n// Definition for a Node.\nclass Node {\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) {\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    }\n}\n*/\nclass Solution {\n    public Node copyRandomList(Node head) {\n        if (head == null) {\n            return head;\n        }\n        Node newHead = new Node(head.val);\n\n\n        Map<Node, Node> nodeMap = new HashMap<>();\n        nodeMap.put(head, newHead);\n        Node temp = head.next;\n        Node last = newHead;\n        while (temp != null) {\n            Node tempCopy = new Node(temp.val);\n            nodeMap.put(temp, tempCopy);\n            last.next = tempCopy;\n            last = tempCopy;\n            temp = temp.next;\n        }\n        last.next = null;\n\n        temp = head;\n        while (temp != null) {\n            Node tempCopy = nodeMap.get(temp);\n            if (temp.random == null) {\n                tempCopy.random = null;\n            } else {\n                Node target = nodeMap.get(temp.random);\n                tempCopy.random = target;\n            }\n            temp = temp.next;\n        }\n\n        return newHead;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-35","published":1,"updated":"2023-01-18T03:49:06.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0t00a23suug1pvhxik","content":"<p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head = [[1,1],[2,1]]\n输出：[[1,1],[2,1]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<p><strong><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png\" alt=\"img\"></strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head = [[3,null],[3,0],[3,null]]\n输出：[[3,null],[3,0],[3,null]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head = []\n输出：[]\n解释：给定的链表为空（空指针），因此返回 null。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>\n<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>\n<li>节点数目不超过 1000 。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/*\n// Definition for a Node.\nclass Node {\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) {\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    }\n}\n*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">copyRandomList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Node</span> newHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&gt;</span></span> nodeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> newHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span> last <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Node</span> tempCopy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> tempCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tempCopy<span class=\"token punctuation\">;</span>\n            last <span class=\"token operator\">=</span> tempCopy<span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Node</span> tempCopy <span class=\"token operator\">=</span> nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>random <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tempCopy<span class=\"token punctuation\">.</span>random <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Node</span> target <span class=\"token operator\">=</span> nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tempCopy<span class=\"token punctuation\">.</span>random <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [[7,null],[13,0],[11,4],[10,2],[1,0]]\n输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [[1,1],[2,1]]\n输出：[[1,1],[2,1]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<p><strong><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png\" alt=\"img\"></strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [[3,null],[3,0],[3,null]]\n输出：[[3,null],[3,0],[3,null]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; []\n输出：[]\n解释：给定的链表为空（空指针），因此返回 null。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>\n<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>\n<li>节点数目不超过 1000 。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/*\n// Definition for a Node.\nclass Node &#123;\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) &#123;\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    &#125;\n&#125;\n*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">copyRandomList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Node</span> newHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> nodeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> newHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span> last <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Node</span> tempCopy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> tempCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tempCopy<span class=\"token punctuation\">;</span>\n            last <span class=\"token operator\">=</span> tempCopy<span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        last<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Node</span> tempCopy <span class=\"token operator\">=</span> nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>random <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                tempCopy<span class=\"token punctuation\">.</span>random <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Node</span> target <span class=\"token operator\">=</span> nodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tempCopy<span class=\"token punctuation\">.</span>random <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-36","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-19T03:14:31.000Z","_content":"\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。\n\n\n\n为了让您更好地理解问题，以下面的二叉搜索树为例：\n\n\n\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png)\n\n\n\n我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。\n\n下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。\n\n\n\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png)\n\n\n\n特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\nclass Solution {\n    public Node treeToDoublyList(Node root) {\n        if (root == null) {\n            return root;\n        }\n\n        Pair<Node, Node> pair = convert(root);\n        pair.getKey().left = pair.getValue();\n        pair.getValue().right = pair.getKey();\n\n        return pair.getKey();\n    }\n\n    private Pair<Node, Node> convert(Node node) {\n        Node first = null, last = null;\n\n        if (node.left == null) {\n            first = node;\n        } else {\n            Pair<Node, Node> leftPair = convert(node.left);\n            first = leftPair.getKey();\n            leftPair.getValue().right = node;\n            node.left = leftPair.getValue();\n        }\n\n        if (node.right == null) {\n            last = node;\n        } else {\n            Pair<Node, Node> rightPair = convert(node.right);\n            last = rightPair.getValue();\n            node.right = rightPair.getKey();\n            rightPair.getKey().left = node;\n        }\n\n        return new Pair<>(first, last);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-36.md","raw":"---\ntitle: offer-36\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-19 11:14:31\n---\n\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。\n\n\n\n为了让您更好地理解问题，以下面的二叉搜索树为例：\n\n\n\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png)\n\n\n\n我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。\n\n下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。\n\n\n\n![img](https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png)\n\n\n\n特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\nclass Solution {\n    public Node treeToDoublyList(Node root) {\n        if (root == null) {\n            return root;\n        }\n\n        Pair<Node, Node> pair = convert(root);\n        pair.getKey().left = pair.getValue();\n        pair.getValue().right = pair.getKey();\n\n        return pair.getKey();\n    }\n\n    private Pair<Node, Node> convert(Node node) {\n        Node first = null, last = null;\n\n        if (node.left == null) {\n            first = node;\n        } else {\n            Pair<Node, Node> leftPair = convert(node.left);\n            first = leftPair.getKey();\n            leftPair.getValue().right = node;\n            node.left = leftPair.getValue();\n        }\n\n        if (node.right == null) {\n            last = node;\n        } else {\n            Pair<Node, Node> rightPair = convert(node.right);\n            last = rightPair.getValue();\n            node.right = rightPair.getKey();\n            rightPair.getKey().left = node;\n        }\n\n        return new Pair<>(first, last);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-36","published":1,"updated":"2023-01-20T03:28:23.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0u00a53suufrhp2s01","content":"<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>\n<p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png\" alt=\"img\"></p>\n<p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>\n<p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png\" alt=\"img\"></p>\n<p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,Node _left,Node _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">treeToDoublyList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&gt;</span></span> pair <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            first <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&gt;</span></span> leftPair <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> leftPair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            leftPair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftPair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            last <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&gt;</span></span> rightPair <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            last <span class=\"token operator\">=</span> rightPair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightPair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rightPair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>\n<p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png\" alt=\"img\"></p>\n<p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>\n<p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png\" alt=\"img\"></p>\n<p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/*\n// Definition for a Node.\nclass Node &#123;\n    public int val;\n    public Node left;\n    public Node right;\n\n    public Node() &#123;&#125;\n\n    public Node(int _val) &#123;\n        val = _val;\n    &#125;\n\n    public Node(int _val,Node _left,Node _right) &#123;\n        val = _val;\n        left = _left;\n        right = _right;\n    &#125;\n&#125;;\n*/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">treeToDoublyList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> pair <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Node</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            first <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> leftPair <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            first <span class=\"token operator\">=</span> leftPair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            leftPair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftPair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            last <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> rightPair <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            last <span class=\"token operator\">=</span> rightPair<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightPair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rightPair<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-37","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-20T03:25:33.000Z","_content":"\n请实现两个函数，分别用来序列化和反序列化二叉树。\n\n你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n\n**提示：**输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 [LeetCode 序列化二叉树的格式](https://support.leetcode-cn.com/hc/kb/article/1567641/)。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。\n\n\n\n**示例：**\n\n![img](https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg)\n\n```\n输入：root = [1,2,3,null,null,4,5]\n输出：[1,2,3,null,null,4,5]\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        StringBuilder sBuilder = new StringBuilder();\n        sBuilder.append(\"[\");\n\n        if (root == null) {\n            sBuilder.append(\"]\");\n            return sBuilder.toString();\n        }\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        nodeQueue.add(root);\n        sBuilder.append(root.val);\n\n        while (!nodeQueue.isEmpty()) {\n            for (int i = 0; i < nodeQueue.size(); i++) {\n                TreeNode node = nodeQueue.poll();\n                sBuilder.append(\",\");\n                if (node.left == null) {\n                    sBuilder.append(\"null\");\n                } else {\n                    nodeQueue.add(node.left);\n                    sBuilder.append(node.left.val);\n                }\n                sBuilder.append(\",\");\n                if (node.right == null) {\n                    sBuilder.append(\"null\");\n                } else {\n                    nodeQueue.add(node.right);\n                    sBuilder.append(node.right.val);\n                }\n            }\n        }\n        sBuilder.append(\"]\");\n        return sBuilder.toString();\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        String realStr = data.substring(1);\n        realStr = realStr.substring(0, realStr.length() - 1);\n\n        if (\"\".equals(realStr)) {\n            return null;\n        }\n\n        String[] nodeValues = realStr.split(\",\");\n\n        TreeNode root = new TreeNode();\n        int index = 0;\n        root.val = Integer.valueOf(nodeValues[index++]);\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        nodeQueue.add(root);\n        while (index < nodeValues.length) {\n            int layerSize = nodeQueue.size();\n\n            for (int i = 0; i < layerSize; i++) {\n                TreeNode node = nodeQueue.poll();\n                String leftV = nodeValues[index++];\n                String rightV = nodeValues[index++];\n                if (\"null\".equals(leftV)) {\n                    node.left = null;\n                } else {\n                    TreeNode leftN = new TreeNode(Integer.valueOf(leftV));\n                    node.left = leftN;\n                    nodeQueue.add(leftN);\n                }\n                if (\"null\".equals(rightV)) {\n                    node.right = null;\n                } else {\n                    TreeNode rightN = new TreeNode(Integer.valueOf(rightV));\n                    node.right = rightN;\n                    nodeQueue.add(rightN);\n                }\n\n            }\n        }\n\n        return root;\n    }\n}\n\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-37.md","raw":"---\ntitle: offer-37\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-20 11:25:33\n---\n\n请实现两个函数，分别用来序列化和反序列化二叉树。\n\n你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n\n**提示：**输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 [LeetCode 序列化二叉树的格式](https://support.leetcode-cn.com/hc/kb/article/1567641/)。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。\n\n\n\n**示例：**\n\n![img](https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg)\n\n```\n输入：root = [1,2,3,null,null,4,5]\n输出：[1,2,3,null,null,4,5]\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        StringBuilder sBuilder = new StringBuilder();\n        sBuilder.append(\"[\");\n\n        if (root == null) {\n            sBuilder.append(\"]\");\n            return sBuilder.toString();\n        }\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        nodeQueue.add(root);\n        sBuilder.append(root.val);\n\n        while (!nodeQueue.isEmpty()) {\n            for (int i = 0; i < nodeQueue.size(); i++) {\n                TreeNode node = nodeQueue.poll();\n                sBuilder.append(\",\");\n                if (node.left == null) {\n                    sBuilder.append(\"null\");\n                } else {\n                    nodeQueue.add(node.left);\n                    sBuilder.append(node.left.val);\n                }\n                sBuilder.append(\",\");\n                if (node.right == null) {\n                    sBuilder.append(\"null\");\n                } else {\n                    nodeQueue.add(node.right);\n                    sBuilder.append(node.right.val);\n                }\n            }\n        }\n        sBuilder.append(\"]\");\n        return sBuilder.toString();\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        String realStr = data.substring(1);\n        realStr = realStr.substring(0, realStr.length() - 1);\n\n        if (\"\".equals(realStr)) {\n            return null;\n        }\n\n        String[] nodeValues = realStr.split(\",\");\n\n        TreeNode root = new TreeNode();\n        int index = 0;\n        root.val = Integer.valueOf(nodeValues[index++]);\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        nodeQueue.add(root);\n        while (index < nodeValues.length) {\n            int layerSize = nodeQueue.size();\n\n            for (int i = 0; i < layerSize; i++) {\n                TreeNode node = nodeQueue.poll();\n                String leftV = nodeValues[index++];\n                String rightV = nodeValues[index++];\n                if (\"null\".equals(leftV)) {\n                    node.left = null;\n                } else {\n                    TreeNode leftN = new TreeNode(Integer.valueOf(leftV));\n                    node.left = leftN;\n                    nodeQueue.add(leftN);\n                }\n                if (\"null\".equals(rightV)) {\n                    node.right = null;\n                } else {\n                    TreeNode rightN = new TreeNode(Integer.valueOf(rightV));\n                    node.right = rightN;\n                    nodeQueue.add(rightN);\n                }\n\n            }\n        }\n\n        return root;\n    }\n}\n\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-37","published":1,"updated":"2023-01-20T08:15:28.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0u00a83suub391ah69","content":"<p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>\n<p>你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n<p><strong>提示：</strong>输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 <a href=\"https://support.leetcode-cn.com/hc/kb/article/1567641/\">LeetCode 序列化二叉树的格式</a>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root = [1,2,3,null,null,4,5]\n输出：[1,2,3,null,null,4,5]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Codec</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Encodes a tree to a single string.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> sBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Decodes your encoded data to tree.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> realStr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        realStr <span class=\"token operator\">=</span> realStr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> realStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>realStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nodeValues <span class=\"token operator\">=</span> realStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>nodeValues<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> nodeValues<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> layerSize <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> layerSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> leftV <span class=\"token operator\">=</span> nodeValues<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> rightV <span class=\"token operator\">=</span> nodeValues<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>leftV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">TreeNode</span> leftN <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>leftV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftN<span class=\"token punctuation\">;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>leftN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>rightV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">TreeNode</span> rightN <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>rightV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightN<span class=\"token punctuation\">;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rightN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Your Codec object will be instantiated and called as such:</span>\n<span class=\"token comment\">// Codec codec = new Codec();</span>\n<span class=\"token comment\">// codec.deserialize(codec.serialize(root));</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>\n<p>你需要设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n<p><strong>提示：</strong>输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 <a href=\"https://support.leetcode-cn.com/hc/kb/article/1567641/\">LeetCode 序列化二叉树的格式</a>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：root &#x3D; [1,2,3,null,null,4,5]\n输出：[1,2,3,null,null,4,5]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Codec</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// Encodes a tree to a single string.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> sBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Decodes your encoded data to tree.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> realStr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        realStr <span class=\"token operator\">=</span> realStr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> realStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>realStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nodeValues <span class=\"token operator\">=</span> realStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>nodeValues<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> nodeValues<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> layerSize <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> layerSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> leftV <span class=\"token operator\">=</span> nodeValues<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> rightV <span class=\"token operator\">=</span> nodeValues<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>leftV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">TreeNode</span> leftN <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>leftV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftN<span class=\"token punctuation\">;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>leftN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>rightV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">TreeNode</span> rightN <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>rightV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightN<span class=\"token punctuation\">;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rightN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// Your Codec object will be instantiated and called as such:</span>\n<span class=\"token comment\">// Codec codec = new Codec();</span>\n<span class=\"token comment\">// codec.deserialize(codec.serialize(root));</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-39","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-28T06:03:30.000Z","_content":"\n数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n\n\n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n\n\n**示例 1:**\n\n```\n输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2\n```\n\n\n\n**限制：**\n\n```\n1 <= 数组长度 <= 50000\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int majorityElement(int[] nums) {\n        Arrays.sort(nums);\n        return nums[nums.length / 2];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-39.md","raw":"---\ntitle: offer-39\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-28 14:03:30\n---\n\n数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n\n\n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n\n\n**示例 1:**\n\n```\n输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2\n```\n\n\n\n**限制：**\n\n```\n1 <= 数组长度 <= 50000\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int majorityElement(int[] nums) {\n        Arrays.sort(nums);\n        return nums[nums.length / 2];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-39","published":1,"updated":"2023-01-28T09:14:21.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0v00ab3suu7l4gavb3","content":"<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 &lt;= 数组长度 &lt;= 50000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 &lt;&#x3D; 数组长度 &lt;&#x3D; 50000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-40","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-29T03:14:32.000Z","_content":"\n输入整数数组 `arr` ，找出其中最小的 `k` 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\n\n\n\n**示例 1：**\n\n```\n输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n```\n\n**示例 2：**\n\n```\n输入：arr = [0,1,2,1], k = 1\n输出：[0]\n```\n\n\n\n**限制：**\n\n- `0 <= k <= arr.length <= 10000`\n- `0 <= arr[i] <= 10000`\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] getLeastNumbers(int[] arr, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return -o1.compareTo(o2);\n            }\n        });\n\n        for (int val : arr) {\n            pq.add(val);\n\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n\n        if (pq.size() > 0) {\n            int[] result = new int[pq.size()];\n            int pqSize = pq.size();\n            for (int i = 0; i < pqSize; i++) {\n                result[i] = pq.poll();\n            }\n            return result;\n        } else {\n            return new int[0];\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-40.md","raw":"---\ntitle: offer-40\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-29 11:14:32\n---\n\n输入整数数组 `arr` ，找出其中最小的 `k` 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\n\n\n\n**示例 1：**\n\n```\n输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]\n```\n\n**示例 2：**\n\n```\n输入：arr = [0,1,2,1], k = 1\n输出：[0]\n```\n\n\n\n**限制：**\n\n- `0 <= k <= arr.length <= 10000`\n- `0 <= arr[i] <= 10000`\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] getLeastNumbers(int[] arr, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return -o1.compareTo(o2);\n            }\n        });\n\n        for (int val : arr) {\n            pq.add(val);\n\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n\n        if (pq.size() > 0) {\n            int[] result = new int[pq.size()];\n            int pqSize = pq.size();\n            for (int i = 0; i < pqSize; i++) {\n                result[i] = pq.poll();\n            }\n            return result;\n        } else {\n            return new int[0];\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-40","published":1,"updated":"2023-01-29T05:39:57.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0v00ae3suue7s749qm","content":"<p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr = [3,2,1], k = 2\n输出：[1,2] 或者 [2,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr = [0,1,2,1], k = 1\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= k &lt;= arr.length &lt;= 10000</code></li>\n<li><code>0 &lt;= arr[i] &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getLeastNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pqSize <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pqSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr &#x3D; [3,2,1], k &#x3D; 2\n输出：[1,2] 或者 [2,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：arr &#x3D; [0,1,2,1], k &#x3D; 1\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= k &lt;= arr.length &lt;= 10000</code></li>\n<li><code>0 &lt;= arr[i] &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getLeastNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pqSize <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pqSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-41","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-30T11:50:18.000Z","_content":"\n如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。\n\n例如，\n\n[2,3,4] 的中位数是 3\n\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n\n设计一个支持以下两种操作的数据结构：\n\n- void addNum(int num) - 从数据流中添加一个整数到数据结构中。\n- double findMedian() - 返回目前所有元素的中位数。\n\n**示例 1：**\n\n```\n输入：\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n输出：[null,null,null,1.50000,null,2.00000]\n```\n\n**示例 2：**\n\n```\n输入：\n[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n输出：[null,null,2.00000,null,2.50000]\n```\n\n\n\n**限制：**\n\n- 最多会对 `addNum、findMedian` 进行 `50000` 次调用。\n\n\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass MedianFinder {\n    private PriorityQueue<Integer> smallQ;\n    private PriorityQueue<Integer> bigQ;\n\n    /** initialize your data structure here. */\n    public MedianFinder() {\n        smallQ = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer v1, Integer v2) {\n                return -v1.compareTo(v2);\n            }\n        });\n\n        bigQ = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer v1, Integer v2) {\n                return v1.compareTo(v2);\n            }\n        });\n    }\n\n    public void addNum(int num) {\n        if (smallQ.isEmpty() || num < smallQ.peek()) {\n            smallQ.add(num);\n        } else {\n            bigQ.add(num);\n        }\n\n        if (smallQ.size() - bigQ.size() > 1) {\n            bigQ.add(smallQ.poll());\n        } else if (bigQ.size() > smallQ.size()) {\n            smallQ.add(bigQ.poll());\n        }\n    }\n\n    public double findMedian() {\n        if (smallQ.size() - bigQ.size() == 1) {\n            return (double)(smallQ.peek());\n        } else if (smallQ.size() > 0 && smallQ.size() == bigQ.size()) {\n            return (double)(smallQ.peek() + bigQ.peek()) / 2;\n        } else {\n            return (double)0;\n        }\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-41.md","raw":"---\ntitle: offer-41\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-30 19:50:18\n---\n\n如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。\n\n例如，\n\n[2,3,4] 的中位数是 3\n\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n\n设计一个支持以下两种操作的数据结构：\n\n- void addNum(int num) - 从数据流中添加一个整数到数据结构中。\n- double findMedian() - 返回目前所有元素的中位数。\n\n**示例 1：**\n\n```\n输入：\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n输出：[null,null,null,1.50000,null,2.00000]\n```\n\n**示例 2：**\n\n```\n输入：\n[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n输出：[null,null,2.00000,null,2.50000]\n```\n\n\n\n**限制：**\n\n- 最多会对 `addNum、findMedian` 进行 `50000` 次调用。\n\n\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass MedianFinder {\n    private PriorityQueue<Integer> smallQ;\n    private PriorityQueue<Integer> bigQ;\n\n    /** initialize your data structure here. */\n    public MedianFinder() {\n        smallQ = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer v1, Integer v2) {\n                return -v1.compareTo(v2);\n            }\n        });\n\n        bigQ = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer v1, Integer v2) {\n                return v1.compareTo(v2);\n            }\n        });\n    }\n\n    public void addNum(int num) {\n        if (smallQ.isEmpty() || num < smallQ.peek()) {\n            smallQ.add(num);\n        } else {\n            bigQ.add(num);\n        }\n\n        if (smallQ.size() - bigQ.size() > 1) {\n            bigQ.add(smallQ.poll());\n        } else if (bigQ.size() > smallQ.size()) {\n            smallQ.add(bigQ.poll());\n        }\n    }\n\n    public double findMedian() {\n        if (smallQ.size() - bigQ.size() == 1) {\n            return (double)(smallQ.peek());\n        } else if (smallQ.size() > 0 && smallQ.size() == bigQ.size()) {\n            return (double)(smallQ.peek() + bigQ.peek()) / 2;\n        } else {\n            return (double)0;\n        }\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-41","published":1,"updated":"2023-01-30T14:53:57.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0w00ah3suu64ptgy7a","content":"<p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>\n<p>例如，</p>\n<p>[2,3,4] 的中位数是 3</p>\n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>\n<p>设计一个支持以下两种操作的数据结构：</p>\n<ul>\n<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>\n<li>double findMedian() - 返回目前所有元素的中位数。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n输出：[null,null,null,1.50000,null,2.00000]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：\n[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n输出：[null,null,2.00000,null,2.50000]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li>最多会对 <code>addNum、findMedian</code> 进行 <code>50000</code> 次调用。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MedianFinder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> smallQ<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> bigQ<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** initialize your data structure here. */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MedianFinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        smallQ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> v1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        bigQ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> v1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">&lt;</span> smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">findMedian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>\n<p>例如，</p>\n<p>[2,3,4] 的中位数是 3</p>\n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>\n<p>设计一个支持以下两种操作的数据结构：</p>\n<ul>\n<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>\n<li>double findMedian() - 返回目前所有元素的中位数。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：\n[&quot;MedianFinder&quot;,&quot;addNum&quot;,&quot;addNum&quot;,&quot;findMedian&quot;,&quot;addNum&quot;,&quot;findMedian&quot;]\n[[],[1],[2],[],[3],[]]\n输出：[null,null,null,1.50000,null,2.00000]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：\n[&quot;MedianFinder&quot;,&quot;addNum&quot;,&quot;findMedian&quot;,&quot;addNum&quot;,&quot;findMedian&quot;]\n[[],[2],[],[3],[]]\n输出：[null,null,2.00000,null,2.50000]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li>最多会对 <code>addNum、findMedian</code> 进行 <code>50000</code> 次调用。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MedianFinder</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> smallQ<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> bigQ<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** initialize your data structure here. */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MedianFinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        smallQ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> v1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        bigQ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> v1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">&lt;</span> smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">findMedian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>smallQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> bigQ<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-42","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-31T03:31:36.000Z","_content":"\n输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。\n\n要求时间复杂度为O(n)。\n\n\n\n**示例1:**\n\n```\n输入: nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n```\n\n\n\n**提示：**\n\n- `1 <= arr.length <= 10^5`\n- `-100 <= arr[i] <= 100`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        int maxV = Integer.MIN_VALUE;\n\n        int curSum = 0;\n\n        for (int num : nums) {\n            curSum += num;\n\n            if (curSum > maxV) {\n                maxV = curSum;\n            }\n\n            if (curSum < 0) {\n                if (num > 0) {\n                    curSum = num;\n                } else {\n                    curSum = 0;\n                }\n            }\n        }\n\n        return maxV;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-42.md","raw":"---\ntitle: offer-42\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-31 11:31:36\n---\n\n输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。\n\n要求时间复杂度为O(n)。\n\n\n\n**示例1:**\n\n```\n输入: nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n```\n\n\n\n**提示：**\n\n- `1 <= arr.length <= 10^5`\n- `-100 <= arr[i] <= 100`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxSubArray(int[] nums) {\n        int maxV = Integer.MIN_VALUE;\n\n        int curSum = 0;\n\n        for (int num : nums) {\n            curSum += num;\n\n            if (curSum > maxV) {\n                maxV = curSum;\n            }\n\n            if (curSum < 0) {\n                if (num > 0) {\n                    curSum = num;\n                } else {\n                    curSum = 0;\n                }\n            }\n        }\n\n        return maxV;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-42","published":1,"updated":"2023-01-31T05:44:12.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0x00ak3suu98zaedue","content":"<p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p>\n<p>要求时间复杂度为O(n)。</p>\n<p><strong>示例1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>\n<li><code>-100 &lt;= arr[i] &lt;= 100</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> maxV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            curSum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&gt;</span> maxV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                maxV <span class=\"token operator\">=</span> curSum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    curSum <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> maxV<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p>\n<p>要求时间复杂度为O(n)。</p>\n<p><strong>示例1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>\n<li><code>-100 &lt;= arr[i] &lt;= 100</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> maxV <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            curSum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">></span> maxV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                maxV <span class=\"token operator\">=</span> curSum<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    curSum <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> maxV<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-32-3","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-15T03:27:52.000Z","_content":"\n请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。\n\n\n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```\n\n\n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        if (root == null) {\n            return new ArrayList<>();\n        }\n\n        Stack<TreeNode> nodeStack1 = new Stack<>();\n        Stack<TreeNode> nodeStack2 = new Stack<>();\n        List<List<Integer>> resultList = new ArrayList<>();\n\n        nodeStack1.push(root);\n\n        while (!nodeStack1.isEmpty() || !nodeStack2.isEmpty()) {\n            List<Integer> layer = new ArrayList<>();\n            boolean traceStack1 = !nodeStack1.isEmpty();\n            Stack<TreeNode> nodeStack = traceStack1 ? nodeStack1 : nodeStack2;\n\n            while (!nodeStack.isEmpty()) {\n                TreeNode node = nodeStack.pop();\n                layer.add(node.val);\n\n                if (traceStack1) {\n                    if (node.left != null) {\n                        nodeStack2.push(node.left);\n                    }\n                    if (node.right != null) {\n                        nodeStack2.push(node.right);\n                    }\n                } else {\n                    if (node.right != null) {\n                        nodeStack1.push(node.right);\n                    }\n                    if (node.left != null) {\n                        nodeStack1.push(node.left);\n                    }\n                }\n\n            }\n            resultList.add(layer);\n        }\n\n        return resultList;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-32-3.md","raw":"---\ntitle: offer-32-3\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-15 11:27:52\n---\n\n请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。\n\n\n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```\n\n\n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        if (root == null) {\n            return new ArrayList<>();\n        }\n\n        Stack<TreeNode> nodeStack1 = new Stack<>();\n        Stack<TreeNode> nodeStack2 = new Stack<>();\n        List<List<Integer>> resultList = new ArrayList<>();\n\n        nodeStack1.push(root);\n\n        while (!nodeStack1.isEmpty() || !nodeStack2.isEmpty()) {\n            List<Integer> layer = new ArrayList<>();\n            boolean traceStack1 = !nodeStack1.isEmpty();\n            Stack<TreeNode> nodeStack = traceStack1 ? nodeStack1 : nodeStack2;\n\n            while (!nodeStack.isEmpty()) {\n                TreeNode node = nodeStack.pop();\n                layer.add(node.val);\n\n                if (traceStack1) {\n                    if (node.left != null) {\n                        nodeStack2.push(node.left);\n                    }\n                    if (node.right != null) {\n                        nodeStack2.push(node.right);\n                    }\n                } else {\n                    if (node.right != null) {\n                        nodeStack1.push(node.right);\n                    }\n                    if (node.left != null) {\n                        nodeStack1.push(node.left);\n                    }\n                }\n\n            }\n            resultList.add(layer);\n        }\n\n        return resultList;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-32-3","published":1,"updated":"2023-01-15T05:48:25.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0x00an3suud7ubca8m","content":"<p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p>\n<p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n / \\\n9  20\n  /  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回其层次遍历结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[\n  [3],\n  [20,9],\n  [15,7]\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeStack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeStack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>nodeStack2<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> layer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> traceStack1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeStack <span class=\"token operator\">=</span> traceStack1 <span class=\"token operator\">?</span> nodeStack1 <span class=\"token operator\">:</span> nodeStack2<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                layer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>traceStack1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        nodeStack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        nodeStack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n            resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p>\n<p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n &#x2F; \\\n9  20\n  &#x2F;  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回其层次遍历结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[\n  [3],\n  [20,9],\n  [15,7]\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeStack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeStack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>nodeStack2<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> layer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> traceStack1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeStack <span class=\"token operator\">=</span> traceStack1 <span class=\"token operator\">?</span> nodeStack1 <span class=\"token operator\">:</span> nodeStack2<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                layer<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>traceStack1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        nodeStack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        nodeStack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        nodeStack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token punctuation\">&#125;</span>\n            resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-32","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-12T02:58:17.000Z","_content":"\n从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。\n\n\n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回：\n\n```\n[3,9,20,15,7]\n```\n\n\n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] levelOrder(TreeNode root) {\n        if (root == null) {\n            return new int[0];\n        }\n\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        List<Integer> resultList = new ArrayList<>();\n\n        nodeQueue.add(root);\n\n        while (!nodeQueue.isEmpty()) {\n            int qSize = nodeQueue.size();\n            for (int i = 0; i < qSize; i++) {\n                TreeNode node = nodeQueue.poll();\n                resultList.add(node.val);\n\n                if (node.left != null) {\n                    nodeQueue.add(node.left);\n                }\n\n                if (node.right != null) {\n                    nodeQueue.add(node.right);\n                }\n            }\n        }\n\n        return resultList.stream().mapToInt(i->i).toArray();\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-32.md","raw":"---\ntitle: offer-32\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-12 10:58:17\n---\n\n从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。\n\n\n\n例如:\n给定二叉树: `[3,9,20,null,null,15,7]`,\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回：\n\n```\n[3,9,20,15,7]\n```\n\n\n\n**提示：**\n\n1. `节点总数 <= 1000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int[] levelOrder(TreeNode root) {\n        if (root == null) {\n            return new int[0];\n        }\n\n        Queue<TreeNode> nodeQueue = new LinkedList<>();\n        List<Integer> resultList = new ArrayList<>();\n\n        nodeQueue.add(root);\n\n        while (!nodeQueue.isEmpty()) {\n            int qSize = nodeQueue.size();\n            for (int i = 0; i < qSize; i++) {\n                TreeNode node = nodeQueue.poll();\n                resultList.add(node.val);\n\n                if (node.left != null) {\n                    nodeQueue.add(node.left);\n                }\n\n                if (node.right != null) {\n                    nodeQueue.add(node.right);\n                }\n            }\n        }\n\n        return resultList.stream().mapToInt(i->i).toArray();\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-32","published":1,"updated":"2023-01-12T06:18:03.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0y00aq3suu06w8fqvi","content":"<p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p>\n<p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n / \\\n9  20\n  /  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[3,9,20,15,7]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> qSize <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> qSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-&gt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p>\n<p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n &#x2F; \\\n9  20\n  &#x2F;  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[3,9,20,15,7]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 1000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> nodeQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> qSize <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> qSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    nodeQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-43","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-01T09:48:48.000Z","_content":"\n输入一个整数 `n` ，求1～n这n个整数的十进制表示中1出现的次数。\n\n例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。\n\n\n\n**示例 1：**\n\n```\n输入：n = 12\n输出：5\n```\n\n**示例 2：**\n\n```\n输入：n = 13\n输出：6\n```\n\n\n\n**限制：**\n\n- `1 <= n < 2^31`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int countDigitOne(int n) {\n        long mulk = 1;\n        int ans = 0;\n\n        for(int k = 0; n >=mulk; ++k) {\n            ans += (n / (mulk * 10)) * mulk + Math.min(Math.max(n % (mulk * 10) - mulk + 1, 0), mulk);\n            mulk *= 10;\n        }\n        return ans;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-43.md","raw":"---\ntitle: offer-43\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-01 17:48:48\n---\n\n输入一个整数 `n` ，求1～n这n个整数的十进制表示中1出现的次数。\n\n例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。\n\n\n\n**示例 1：**\n\n```\n输入：n = 12\n输出：5\n```\n\n**示例 2：**\n\n```\n输入：n = 13\n输出：6\n```\n\n\n\n**限制：**\n\n- `1 <= n < 2^31`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int countDigitOne(int n) {\n        long mulk = 1;\n        int ans = 0;\n\n        for(int k = 0; n >=mulk; ++k) {\n            ans += (n / (mulk * 10)) * mulk + Math.min(Math.max(n % (mulk * 10) - mulk + 1, 0), mulk);\n            mulk *= 10;\n        }\n        return ans;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-43","published":1,"updated":"2023-02-01T13:18:24.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0y00at3suu0jmdgvm8","content":"<p>输入一个整数 <code>n</code> ，求1～n这n个整数的十进制表示中1出现的次数。</p>\n<p>例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n = 12\n输出：5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n = 13\n输出：6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt; 2^31</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countDigitOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> mulk <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&gt;=</span>mulk<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>mulk <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> mulk <span class=\"token operator\">+</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>mulk <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mulk <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mulk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mulk <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个整数 <code>n</code> ，求1～n这n个整数的十进制表示中1出现的次数。</p>\n<p>例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n &#x3D; 12\n输出：5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n &#x3D; 13\n输出：6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt; 2^31</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countDigitOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">long</span> mulk <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">>=</span>mulk<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>mulk <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> mulk <span class=\"token operator\">+</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>mulk <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> mulk <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mulk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mulk <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-31","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-01-11T07:28:15.000Z","_content":"\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n\n\n\n**示例 1：**\n\n```\n输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n```\n\n**示例 2：**\n\n```\n输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出：false\n解释：1 不能在 2 之前弹出。\n```\n\n\n\n**提示：**\n\n1. `0 <= pushed.length == popped.length <= 1000`\n2. `0 <= pushed[i], popped[i] < 1000`\n3. `pushed` 是 `popped` 的排列。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean validateStackSequences(int[] pushed, int[] popped) {\n        if ((pushed == null  || pushed.length == 0) && (popped == null || popped.length == 0)) {\n            return true;\n        }\n\n        if (pushed == null || pushed.length == 0 || popped == null || popped.length == 0 || pushed.length != popped.length) {\n            return false;\n        }\n        Stack<Integer> mockStack = new Stack<>();\n\n        int pushIndex = 0, popIndex = 0;\n\n        while (pushIndex < pushed.length || popIndex < popped.length) {\n            while (!mockStack.isEmpty() && mockStack.peek() == popped[popIndex]) {\n                mockStack.pop();\n                popIndex++;\n            }\n\n\n            if (pushIndex == pushed.length) {\n                return mockStack.isEmpty();\n            } else {\n                mockStack.push(pushed[pushIndex]);\n                pushIndex++;\n            }\n\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-31.md","raw":"---\ntitle: offer-31\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-01-11 15:28:15\n---\n\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n\n\n\n**示例 1：**\n\n```\n输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n```\n\n**示例 2：**\n\n```\n输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出：false\n解释：1 不能在 2 之前弹出。\n```\n\n\n\n**提示：**\n\n1. `0 <= pushed.length == popped.length <= 1000`\n2. `0 <= pushed[i], popped[i] < 1000`\n3. `pushed` 是 `popped` 的排列。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public boolean validateStackSequences(int[] pushed, int[] popped) {\n        if ((pushed == null  || pushed.length == 0) && (popped == null || popped.length == 0)) {\n            return true;\n        }\n\n        if (pushed == null || pushed.length == 0 || popped == null || popped.length == 0 || pushed.length != popped.length) {\n            return false;\n        }\n        Stack<Integer> mockStack = new Stack<>();\n\n        int pushIndex = 0, popIndex = 0;\n\n        while (pushIndex < pushed.length || popIndex < popped.length) {\n            while (!mockStack.isEmpty() && mockStack.peek() == popped[popIndex]) {\n                mockStack.pop();\n                popIndex++;\n            }\n\n\n            if (pushIndex == pushed.length) {\n                return mockStack.isEmpty();\n            } else {\n                mockStack.push(pushed[pushIndex]);\n                pushIndex++;\n            }\n\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-31","published":1,"updated":"2023-01-11T14:51:01.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc0z00aw3suu8712a29b","content":"<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出：false\n解释：1 不能在 2 之前弹出。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n<li><code>pushed</code> 是 <code>popped</code> 的排列。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validateStackSequences</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pushed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> popped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pushed <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>  <span class=\"token operator\">||</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>popped <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> popped<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pushed <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> popped <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> popped<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> popped<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> mockStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> pushIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> popIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pushIndex <span class=\"token operator\">&lt;</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> popIndex <span class=\"token operator\">&lt;</span> popped<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> popped<span class=\"token punctuation\">[</span>popIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                popIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pushIndex <span class=\"token operator\">==</span> pushed<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pushed<span class=\"token punctuation\">[</span>pushIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pushIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,3,5,1,2]\n输出：false\n解释：1 不能在 2 之前弹出。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n<li><code>pushed</code> 是 <code>popped</code> 的排列。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validateStackSequences</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pushed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> popped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pushed <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>  <span class=\"token operator\">||</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>popped <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> popped<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pushed <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> popped <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> popped<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> popped<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> mockStack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> pushIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> popIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pushIndex <span class=\"token operator\">&lt;</span> pushed<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> popIndex <span class=\"token operator\">&lt;</span> popped<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> popped<span class=\"token punctuation\">[</span>popIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                popIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pushIndex <span class=\"token operator\">==</span> pushed<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                mockStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pushed<span class=\"token punctuation\">[</span>pushIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                pushIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-44","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-02T07:26:46.000Z","_content":"\n数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。\n\n请写一个函数，求任意第n位对应的数字。\n\n\n\n**示例 1：**\n\n```\n输入：n = 3\n输出：3\n```\n\n**示例 2：**\n\n```\n输入：n = 11\n输出：0\n```\n\n\n\n**限制：**\n\n- `0 <= n < 2^31`\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findNthDigit(int n) {\n        int low = 1, high = 9;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (totalDigits(mid) < n) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        int d = low;\n        int prevDigits = totalDigits(d - 1);\n        int index = n - prevDigits - 1;\n        int start = (int) Math.pow(10, d - 1);\n        int num = start + index / d;\n        int digitIndex = index % d;\n        int digit = (num / (int) (Math.pow(10, d - digitIndex - 1))) % 10;\n        return digit;\n    }\n\n    public int totalDigits(int length) {\n        int digits = 0;\n        int curLength = 1, curCount = 9;\n        while (curLength <= length) {\n            digits += curLength * curCount;\n            curLength++;\n            curCount *= 10;\n        }\n        return digits;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-44.md","raw":"---\ntitle: offer-44\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-02 15:26:46\n---\n\n数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。\n\n请写一个函数，求任意第n位对应的数字。\n\n\n\n**示例 1：**\n\n```\n输入：n = 3\n输出：3\n```\n\n**示例 2：**\n\n```\n输入：n = 11\n输出：0\n```\n\n\n\n**限制：**\n\n- `0 <= n < 2^31`\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findNthDigit(int n) {\n        int low = 1, high = 9;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (totalDigits(mid) < n) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        int d = low;\n        int prevDigits = totalDigits(d - 1);\n        int index = n - prevDigits - 1;\n        int start = (int) Math.pow(10, d - 1);\n        int num = start + index / d;\n        int digitIndex = index % d;\n        int digit = (num / (int) (Math.pow(10, d - digitIndex - 1))) % 10;\n        return digit;\n    }\n\n    public int totalDigits(int length) {\n        int digits = 0;\n        int curLength = 1, curCount = 9;\n        while (curLength <= length) {\n            digits += curLength * curCount;\n            curLength++;\n            curCount *= 10;\n        }\n        return digits;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-44","published":1,"updated":"2023-02-02T09:51:05.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc1000az3suu8ujua1ms","content":"<p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。</p>\n<p>请写一个函数，求任意第n位对应的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n = 3\n输出：3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n = 11\n输出：0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt; 2^31</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findNthDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> low<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">totalDigits</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                high <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> prevDigits <span class=\"token operator\">=</span> <span class=\"token function\">totalDigits</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> prevDigits <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> index <span class=\"token operator\">/</span> d<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> digitIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> d<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">-</span> digitIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> digit<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">totalDigits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> digits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> curCount <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curLength <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            digits <span class=\"token operator\">+=</span> curLength <span class=\"token operator\">*</span> curCount<span class=\"token punctuation\">;</span>\n            curLength<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            curCount <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。</p>\n<p>请写一个函数，求任意第n位对应的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n &#x3D; 3\n输出：3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n &#x3D; 11\n输出：0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt; 2^31</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findNthDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> low<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">totalDigits</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                high <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> prevDigits <span class=\"token operator\">=</span> <span class=\"token function\">totalDigits</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> prevDigits <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> index <span class=\"token operator\">/</span> d<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> digitIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> d<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">-</span> digitIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> digit<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">totalDigits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> digits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> curCount <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curLength <span class=\"token operator\">&lt;=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            digits <span class=\"token operator\">+=</span> curLength <span class=\"token operator\">*</span> curCount<span class=\"token punctuation\">;</span>\n            curLength<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            curCount <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-46","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-03T03:39:29.000Z","_content":"\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n\n\n**示例 1:**\n\n```\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n```\n\n\n\n**提示：**\n\n- `0 <= num < 231`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int translateNum(int num) {\n        String numStr = Integer.valueOf(num).toString();\n        int[] f = new int[numStr.length()];\n        int lastNum = -1;\n\n        for (int i = 0; i < numStr.length(); i++) {\n            int curNum = numStr.charAt(i) - '0';\n            if (i == 0) {\n                f[i] = 1;\n            } else {\n                if (lastNum * 10 + curNum >= 10 && lastNum * 10 + curNum <= 25) {\n                    if (i == 1) {\n                        f[i] = 2;\n                    } else {\n                        f[i] = f[i - 1] + f[i - 2];\n                    }\n                } else {\n                    f[i] = f[i - 1];\n                }\n            }\n            lastNum = curNum;\n        }\n        return f[numStr.length() - 1];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-46.md","raw":"---\ntitle: offer-46\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-03 11:39:29\n---\n\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n\n\n**示例 1:**\n\n```\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n```\n\n\n\n**提示：**\n\n- `0 <= num < 231`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int translateNum(int num) {\n        String numStr = Integer.valueOf(num).toString();\n        int[] f = new int[numStr.length()];\n        int lastNum = -1;\n\n        for (int i = 0; i < numStr.length(); i++) {\n            int curNum = numStr.charAt(i) - '0';\n            if (i == 0) {\n                f[i] = 1;\n            } else {\n                if (lastNum * 10 + curNum >= 10 && lastNum * 10 + curNum <= 25) {\n                    if (i == 1) {\n                        f[i] = 2;\n                    } else {\n                        f[i] = f[i - 1] + f[i - 2];\n                    }\n                } else {\n                    f[i] = f[i - 1];\n                }\n            }\n            lastNum = curNum;\n        }\n        return f[numStr.length() - 1];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-46","published":1,"updated":"2023-02-03T06:42:34.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo5tc1000b23suucidv1to3","content":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= num &lt; 231</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">translateNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> numStr <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>numStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lastNum <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> curNum <span class=\"token operator\">=</span> numStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastNum <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> curNum <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> lastNum <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> curNum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            lastNum <span class=\"token operator\">=</span> curNum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>numStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= num &lt; 231</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">translateNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> numStr <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>numStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lastNum <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> curNum <span class=\"token operator\">=</span> numStr<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastNum <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> curNum <span class=\"token operator\">>=</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> lastNum <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> curNum <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                        f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            lastNum <span class=\"token operator\">=</span> curNum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>numStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-47","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-05T03:25:35.000Z","_content":"\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n\n\n**示例 1:**\n\n```\n输入: \n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n```\n\n\n\n提示：\n\n- `0 < grid.length <= 200`\n- `0 < grid[0].length <= 200`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxValue(int[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) {\n            return 0;\n        }\n\n        int[][] f = new int[grid.length][grid[0].length];\n\n        for (int i = 0; i < grid.length; i++){\n            Arrays.fill(f[i], -1);\n        }\n\n        f[0][0] = grid[0][0];\n\n        if (grid.length == 1 && grid[0].length == 1) {\n            return f[0][0];\n        }\n\n        return getValue(grid, f, grid.length - 1, grid[0].length - 1);\n    }\n\n    private int getValue(int[][] grid, int[][] f, int row, int column) {\n        if (f[row][column] > -1) {\n            return f[row][column];\n        }\n\n        if (row == 0) {\n            f[row][column] = getValue(grid, f, row, column - 1) + grid[row][column];\n        } else if (column == 0) {\n            f[row][column] = getValue(grid, f, row - 1, column) + grid[row][column];\n        } else {\n            f[row][column] = Math.max(getValue(grid, f, row - 1, column), getValue(grid, f, row, column - 1)) + grid[row][column];\n        }\n\n        return f[row][column];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-47.md","raw":"---\ntitle: offer-47\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-05 11:25:35\n---\n\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n\n\n**示例 1:**\n\n```\n输入: \n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n```\n\n\n\n提示：\n\n- `0 < grid.length <= 200`\n- `0 < grid[0].length <= 200`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxValue(int[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) {\n            return 0;\n        }\n\n        int[][] f = new int[grid.length][grid[0].length];\n\n        for (int i = 0; i < grid.length; i++){\n            Arrays.fill(f[i], -1);\n        }\n\n        f[0][0] = grid[0][0];\n\n        if (grid.length == 1 && grid[0].length == 1) {\n            return f[0][0];\n        }\n\n        return getValue(grid, f, grid.length - 1, grid[0].length - 1);\n    }\n\n    private int getValue(int[][] grid, int[][] f, int row, int column) {\n        if (f[row][column] > -1) {\n            return f[row][column];\n        }\n\n        if (row == 0) {\n            f[row][column] = getValue(grid, f, row, column - 1) + grid[row][column];\n        } else if (column == 0) {\n            f[row][column] = getValue(grid, f, row - 1, column) + grid[row][column];\n        } else {\n            f[row][column] = Math.max(getValue(grid, f, row - 1, column), getValue(grid, f, row, column - 1)) + grid[row][column];\n        }\n\n        return f[row][column];\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-47","published":1,"updated":"2023-02-05T06:07:31.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldqzftur0000dkuu3wtc6ubj","content":"<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li><code>0 &lt; grid.length &lt;= 200</code></li>\n<li><code>0 &lt; grid[0].length &lt;= 200</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> column<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> column <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>column <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> column <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li><code>0 &lt; grid.length &lt;= 200</code></li>\n<li><code>0 &lt; grid[0].length &lt;= 200</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> column<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> column <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>column <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> column <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-48","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-06T08:30:01.000Z","_content":"\n请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。\n\n\n\n**示例 1:**\n\n```\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n**示例 2:**\n\n```\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n**示例 3:**\n\n```\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n\n\n提示：\n\n- `s.length <= 40000`\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int result = 0;\n        Map<Character, Integer> chIndexMap = new HashMap<>();\n        int curStart = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\n            if (chIndexMap.containsKey(ch)) {\n                int len = i - curStart;\n\n                if (len > result) {\n                    result = len;\n                }\n\n                int end = chIndexMap.get(ch);\n                for (int j = curStart; j <= end; j++) {\n                    chIndexMap.remove(s.charAt(j));\n                }\n                curStart = end + 1;\n            }\n            chIndexMap.put(ch, i);\n        }\n\n        int len = s.length() - curStart;\n\n        if (len > result) {\n            result = len;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-48.md","raw":"---\ntitle: offer-48\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-06 16:30:01\n---\n\n请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。\n\n\n\n**示例 1:**\n\n```\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n**示例 2:**\n\n```\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n**示例 3:**\n\n```\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n\n\n提示：\n\n- `s.length <= 40000`\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int result = 0;\n        Map<Character, Integer> chIndexMap = new HashMap<>();\n        int curStart = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\n            if (chIndexMap.containsKey(ch)) {\n                int len = i - curStart;\n\n                if (len > result) {\n                    result = len;\n                }\n\n                int end = chIndexMap.get(ch);\n                for (int j = curStart; j <= end; j++) {\n                    chIndexMap.remove(s.charAt(j));\n                }\n                curStart = end + 1;\n            }\n            chIndexMap.put(ch, i);\n        }\n\n        int len = s.length() - curStart;\n\n        if (len > result) {\n            result = len;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-48","published":1,"updated":"2023-02-06T08:55:28.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldskvmj60000o0uu0v8rfif9","content":"<p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li><code>s.length &lt;= 40000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> chIndexMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> curStart<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> curStart<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                curStart <span class=\"token operator\">=</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> curStart<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: &quot;abcabcbb&quot;\n输出: 3 \n解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: &quot;bbbbb&quot;\n输出: 1\n解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: &quot;pwwkew&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li><code>s.length &lt;= 40000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> chIndexMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> curStart<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> curStart<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                curStart <span class=\"token operator\">=</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            chIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> curStart<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-49","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-07T03:06:08.000Z","_content":"\n我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。\n\n\n\n**示例:**\n\n```\n输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n```\n\n**说明:**\n\n1. `1` 是丑数。\n2. `n` **不超过**1690。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int nthUglyNumber(int n) {\n        int[] elems = {2, 3, 5};\n\n        Queue<Long> pq = new PriorityQueue<>(new Comparator<Long>(){\n            @Override\n            public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n            }\n        });\n\n        Set<Long> nSet = new HashSet<>();\n\n        pq.add(1L);\n        nSet.add(1L);\n        int ugly = 0;\n\n        for (int i = 0; i < n; i++) {\n            ugly = (pq.poll()).intValue();\n\n            for (int elem : elems) {\n                long v = (long)(ugly) * elem;\n\n                if (!nSet.contains(v)) {\n                    pq.add(v);\n                    nSet.add(v);\n                }\n            }\n        }\n\n        return ugly;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-49.md","raw":"---\ntitle: offer-49\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-07 11:06:08\n---\n\n我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。\n\n\n\n**示例:**\n\n```\n输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n```\n\n**说明:**\n\n1. `1` 是丑数。\n2. `n` **不超过**1690。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int nthUglyNumber(int n) {\n        int[] elems = {2, 3, 5};\n\n        Queue<Long> pq = new PriorityQueue<>(new Comparator<Long>(){\n            @Override\n            public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n            }\n        });\n\n        Set<Long> nSet = new HashSet<>();\n\n        pq.add(1L);\n        nSet.add(1L);\n        int ugly = 0;\n\n        for (int i = 0; i < n; i++) {\n            ugly = (pq.poll()).intValue();\n\n            for (int elem : elems) {\n                long v = (long)(ugly) * elem;\n\n                if (!nSet.contains(v)) {\n                    pq.add(v);\n                    nSet.add(v);\n                }\n            }\n        }\n\n        return ugly;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-49","published":1,"updated":"2023-02-07T06:11:52.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldtuh7r7000074uu5tr049ca","content":"<p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明:</strong></p>\n<ol>\n<li><code>1</code> 是丑数。</li>\n<li><code>n</code> <strong>不超过</strong>1690。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nthUglyNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elems <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> nSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ugly <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ugly <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> elem <span class=\"token operator\">:</span> elems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">long</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ugly<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> elem<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    nSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> ugly<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说明:</strong></p>\n<ol>\n<li><code>1</code> 是丑数。</li>\n<li><code>n</code> <strong>不超过</strong>1690。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nthUglyNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elems <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> nSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ugly <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ugly <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> elem <span class=\"token operator\">:</span> elems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">long</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ugly<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> elem<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    nSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> ugly<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-50","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-08T02:57:48.000Z","_content":"\n在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。\n\n**示例 1:**\n\n```\n输入：s = \"abaccdeff\"\n输出：'b'\n```\n\n**示例 2:**\n\n```\n输入：s = \"\" \n输出：' '\n```\n\n\n\n**限制：**\n\n```\n0 <= s 的长度 <= 50000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public char firstUniqChar(String s) {\n        Set<Character> chSet = new HashSet<>();\n        Set<Character> duplicateChSet = new HashSet<>();\n\n        Queue<Character> chQ = new LinkedList<>();\n\n        for (char ch : s.toCharArray()) {\n            if (!chSet.contains(ch)) {\n                chQ.add(ch);\n                chSet.add(ch);\n            } else {\n                duplicateChSet.add(ch);\n            }\n        }\n\n        while (!chQ.isEmpty()) {\n            char ch = chQ.poll();\n\n            if (!duplicateChSet.contains(ch)) {\n                return ch;\n            }\n        }\n\n        return ' ';\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-50.md","raw":"---\ntitle: offer-50\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-08 10:57:48\n---\n\n在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。\n\n**示例 1:**\n\n```\n输入：s = \"abaccdeff\"\n输出：'b'\n```\n\n**示例 2:**\n\n```\n输入：s = \"\" \n输出：' '\n```\n\n\n\n**限制：**\n\n```\n0 <= s 的长度 <= 50000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public char firstUniqChar(String s) {\n        Set<Character> chSet = new HashSet<>();\n        Set<Character> duplicateChSet = new HashSet<>();\n\n        Queue<Character> chQ = new LinkedList<>();\n\n        for (char ch : s.toCharArray()) {\n            if (!chSet.contains(ch)) {\n                chQ.add(ch);\n                chSet.add(ch);\n            } else {\n                duplicateChSet.add(ch);\n            }\n        }\n\n        while (!chQ.isEmpty()) {\n            char ch = chQ.poll();\n\n            if (!duplicateChSet.contains(ch)) {\n                return ch;\n            }\n        }\n\n        return ' ';\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-50","published":1,"updated":"2023-02-08T03:24:47.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldv3y0ns0000lsuu7ie9dxa9","content":"<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s = \"abaccdeff\"\n输出：'b'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s = \"\" \n输出：' '<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= s 的长度 &lt;= 50000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">firstUniqChar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">&gt;</span></span> chSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">&gt;</span></span> duplicateChSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">&gt;</span></span> chQ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                chQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                chSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                duplicateChSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chQ<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> chQ<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>duplicateChSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;abaccdeff&quot;\n输出：&#39;b&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：s &#x3D; &quot;&quot; \n输出：&#39; &#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; s 的长度 &lt;&#x3D; 50000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">firstUniqChar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> chSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> duplicateChSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> chQ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                chQ<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                chSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                duplicateChSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chQ<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> chQ<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>duplicateChSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-51","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-09T03:47:25.000Z","_content":"\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。\n\n\n\n**示例 1:**\n\n```\n输入: [7,5,6,4]\n输出: 5\n```\n\n\n\n**限制：**\n\n```\n0 <= 数组长度 <= 50000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\npublic class Solution {\n    public int reversePairs(int[] nums) {\n        int len = nums.length;\n        if (len < 2) {\n            return 0;\n        }\n        int[] copy = new int[len];\n        for (int i = 0; i < len; i++) {\n            copy[i] = nums[i];\n        }\n        int[] temp = new int[len];\n        return reversePairs(copy, 0, len - 1, temp);\n    }\n\n    private int reversePairs(int[] nums, int left, int right, int[] temp) {\n        if (left == right) {\n            return 0;\n        }\n        int mid = left + (right - left) / 2;\n        int leftPairs = reversePairs(nums, left, mid, temp);\n        int rightPairs = reversePairs(nums, mid + 1, right, temp);\n        if (nums[mid] <= nums[mid + 1]) {\n            return leftPairs + rightPairs;\n        }\n        int crossPairs = mergeAndCount(nums, left, mid, right, temp);\n        return leftPairs + rightPairs + crossPairs;\n    }\n\n    private int mergeAndCount(int[] nums, int left, int mid, int right, int[] temp) {\n        for (int i = left; i <= right; i++) {\n            temp[i] = nums[i];\n        }\n        int i = left;\n        int j = mid + 1;\n        int count = 0;\n        for (int k = left; k <= right; k++) {\n            if (i == mid + 1) {\n                nums[k] = temp[j];\n                j++;\n            } else if (j == right + 1) {\n                nums[k] = temp[i];\n                i++;\n            } else if (temp[i] <= temp[j]) {\n                nums[k] = temp[i];\n                i++;\n            } else {\n                nums[k] = temp[j];\n                j++;\n                count += (mid - i + 1);\n            }\n        }\n        return count;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-51.md","raw":"---\ntitle: offer-51\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-09 11:47:25\n---\n\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。\n\n\n\n**示例 1:**\n\n```\n输入: [7,5,6,4]\n输出: 5\n```\n\n\n\n**限制：**\n\n```\n0 <= 数组长度 <= 50000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\npublic class Solution {\n    public int reversePairs(int[] nums) {\n        int len = nums.length;\n        if (len < 2) {\n            return 0;\n        }\n        int[] copy = new int[len];\n        for (int i = 0; i < len; i++) {\n            copy[i] = nums[i];\n        }\n        int[] temp = new int[len];\n        return reversePairs(copy, 0, len - 1, temp);\n    }\n\n    private int reversePairs(int[] nums, int left, int right, int[] temp) {\n        if (left == right) {\n            return 0;\n        }\n        int mid = left + (right - left) / 2;\n        int leftPairs = reversePairs(nums, left, mid, temp);\n        int rightPairs = reversePairs(nums, mid + 1, right, temp);\n        if (nums[mid] <= nums[mid + 1]) {\n            return leftPairs + rightPairs;\n        }\n        int crossPairs = mergeAndCount(nums, left, mid, right, temp);\n        return leftPairs + rightPairs + crossPairs;\n    }\n\n    private int mergeAndCount(int[] nums, int left, int mid, int right, int[] temp) {\n        for (int i = left; i <= right; i++) {\n            temp[i] = nums[i];\n        }\n        int i = left;\n        int j = mid + 1;\n        int count = 0;\n        for (int k = left; k <= right; k++) {\n            if (i == mid + 1) {\n                nums[k] = temp[j];\n                j++;\n            } else if (j == right + 1) {\n                nums[k] = temp[i];\n                i++;\n            } else if (temp[i] <= temp[j]) {\n                nums[k] = temp[i];\n                i++;\n            } else {\n                nums[k] = temp[j];\n                j++;\n                count += (mid - i + 1);\n            }\n        }\n        return count;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-51","published":1,"updated":"2023-02-09T05:46:04.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwofnyu00002wuuayfhdbee","content":"<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [7,5,6,4]\n输出: 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= 数组长度 &lt;= 50000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> copy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            copy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leftPairs <span class=\"token operator\">=</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightPairs <span class=\"token operator\">=</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> leftPairs <span class=\"token operator\">+</span> rightPairs<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> crossPairs <span class=\"token operator\">=</span> <span class=\"token function\">mergeAndCount</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> leftPairs <span class=\"token operator\">+</span> rightPairs <span class=\"token operator\">+</span> crossPairs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mergeAndCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [7,5,6,4]\n输出: 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; 数组长度 &lt;&#x3D; 50000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> copy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            copy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> leftPairs <span class=\"token operator\">=</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightPairs <span class=\"token operator\">=</span> <span class=\"token function\">reversePairs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> leftPairs <span class=\"token operator\">+</span> rightPairs<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> crossPairs <span class=\"token operator\">=</span> <span class=\"token function\">mergeAndCount</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> leftPairs <span class=\"token operator\">+</span> rightPairs <span class=\"token operator\">+</span> crossPairs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mergeAndCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-53","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-10T03:01:09.000Z","_content":"\n一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。\n\n\n\n**示例 1:**\n\n```\n输入: [0,1,3]\n输出: 2\n```\n\n**示例 2:**\n\n```\n输入: [0,1,2,3,4,5,6,7,9]\n输出: 8\n```\n\n\n\n**限制：**\n\n```\n1 <= 数组长度 <= 10000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int missingNumber(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        if (nums.length == 1) {\n            return nums[0] == 0 ? 1 : 0;\n        }\n\n        int start = 0, end = nums.length - 1;\n\n        while (start < end) {\n            if (start == end) {\n                return nums[start] - 1;\n            }\n\n            if (start + 1 == end) {\n                if (nums[start] == start) {\n                    return nums[end] == end ?  end + 1 : nums[end] - 1;\n                } else {\n                    return nums[start] - 1;\n                }\n            }\n\n            int mid = start + (end - start) / 2;\n\n            if (nums[mid] == mid) {\n                start = mid;\n            } else {\n                end = mid;\n            }\n        }\n\n        return 0;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-53.md","raw":"---\ntitle: offer-53\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-10 11:01:09\n---\n\n一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。\n\n\n\n**示例 1:**\n\n```\n输入: [0,1,3]\n输出: 2\n```\n\n**示例 2:**\n\n```\n输入: [0,1,2,3,4,5,6,7,9]\n输出: 8\n```\n\n\n\n**限制：**\n\n```\n1 <= 数组长度 <= 10000\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int missingNumber(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        if (nums.length == 1) {\n            return nums[0] == 0 ? 1 : 0;\n        }\n\n        int start = 0, end = nums.length - 1;\n\n        while (start < end) {\n            if (start == end) {\n                return nums[start] - 1;\n            }\n\n            if (start + 1 == end) {\n                if (nums[start] == start) {\n                    return nums[end] == end ?  end + 1 : nums[end] - 1;\n                } else {\n                    return nums[start] - 1;\n                }\n            }\n\n            int mid = start + (end - start) / 2;\n\n            if (nums[mid] == mid) {\n                start = mid;\n            } else {\n                end = mid;\n            }\n        }\n\n        return 0;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-53","published":1,"updated":"2023-02-10T03:24:55.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldxyu0uc00002kuuf0x0bh7o","content":"<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [0,1,3]\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [0,1,2,3,4,5,6,7,9]\n输出: 8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 &lt;= 数组长度 &lt;= 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">missingNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> end <span class=\"token operator\">?</span>  end <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [0,1,3]\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [0,1,2,3,4,5,6,7,9]\n输出: 8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 &lt;&#x3D; 数组长度 &lt;&#x3D; 10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">missingNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> end <span class=\"token operator\">?</span>  end <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                start <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                end <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-54","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-12T03:28:15.000Z","_content":"\n给定一棵二叉搜索树，请找出其中第 `k` 大的节点的值。\n\n\n\n**示例 1:**\n\n```\n输入: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\n输出: 4\n```\n\n**示例 2:**\n\n```\n输入: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n输出: 4\n```\n\n\n\n**限制：**\n\n- 1 ≤ k ≤ 二叉搜索树元素个数\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int kthLargest(TreeNode root, int k) {\n        Map<TreeNode, Integer> numMap = new HashMap<>();\n        int allNum = createNumMap(numMap, root);\n        \n\n        return getKth(numMap, root, allNum + 1 - k);\n    }\n\n    private int getKth(Map<TreeNode, Integer> numMap, TreeNode node, int k) {\n        if (k < 1) {\n            return -1;\n        }\n\n        int leftNum = node.left == null ? 0 : numMap.get(node.left);\n\n        if (leftNum >= k) {\n            return getKth(numMap, node.left, k);\n        } else if (leftNum + 1 == k) {\n            return node.val;\n        } else {\n            return getKth(numMap, node.right, k - leftNum - 1);\n        }\n\n    }\n\n    private int createNumMap(Map<TreeNode, Integer> numMap, TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n\n        if (numMap.containsKey(node)) {\n            return numMap.get(node);\n        }\n\n        int leftNum = createNumMap(numMap, node.left);\n        int rightNum = createNumMap(numMap, node.right);\n        numMap.put(node, leftNum + rightNum + 1);\n\n        return leftNum + rightNum + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-54.md","raw":"---\ntitle: offer-54\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-12 11:28:15\n---\n\n给定一棵二叉搜索树，请找出其中第 `k` 大的节点的值。\n\n\n\n**示例 1:**\n\n```\n输入: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\n输出: 4\n```\n\n**示例 2:**\n\n```\n输入: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n输出: 4\n```\n\n\n\n**限制：**\n\n- 1 ≤ k ≤ 二叉搜索树元素个数\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int kthLargest(TreeNode root, int k) {\n        Map<TreeNode, Integer> numMap = new HashMap<>();\n        int allNum = createNumMap(numMap, root);\n        \n\n        return getKth(numMap, root, allNum + 1 - k);\n    }\n\n    private int getKth(Map<TreeNode, Integer> numMap, TreeNode node, int k) {\n        if (k < 1) {\n            return -1;\n        }\n\n        int leftNum = node.left == null ? 0 : numMap.get(node.left);\n\n        if (leftNum >= k) {\n            return getKth(numMap, node.left, k);\n        } else if (leftNum + 1 == k) {\n            return node.val;\n        } else {\n            return getKth(numMap, node.right, k - leftNum - 1);\n        }\n\n    }\n\n    private int createNumMap(Map<TreeNode, Integer> numMap, TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n\n        if (numMap.containsKey(node)) {\n            return numMap.get(node);\n        }\n\n        int leftNum = createNumMap(numMap, node.left);\n        int rightNum = createNumMap(numMap, node.right);\n        numMap.put(node, leftNum + rightNum + 1);\n\n        return leftNum + rightNum + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-54","published":1,"updated":"2023-02-12T05:53:41.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle0z176l0000qsuu6ojj4mso","content":"<p>给定一棵二叉搜索树，请找出其中第 <code>k</code> 大的节点的值。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\n输出: 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n输出: 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li>1 ≤ k ≤ 二叉搜索树元素个数</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">kthLargest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> numMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> allNum <span class=\"token operator\">=</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> allNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> numMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> leftNum <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> leftNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> numMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> leftNum <span class=\"token operator\">=</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightNum <span class=\"token operator\">=</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> leftNum <span class=\"token operator\">+</span> rightNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> leftNum <span class=\"token operator\">+</span> rightNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一棵二叉搜索树，请找出其中第 <code>k</code> 大的节点的值。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root &#x3D; [3,1,4,null,2], k &#x3D; 1\n   3\n  &#x2F; \\\n 1   4\n  \\\n   2\n输出: 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3\n       5\n      &#x2F; \\\n     3   6\n    &#x2F; \\\n   2   4\n  &#x2F;\n 1\n输出: 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li>1 ≤ k ≤ 二叉搜索树元素个数</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">kthLargest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> allNum <span class=\"token operator\">=</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> allNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> leftNum <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">>=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getKth</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> leftNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> numMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> leftNum <span class=\"token operator\">=</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rightNum <span class=\"token operator\">=</span> <span class=\"token function\">createNumMap</span><span class=\"token punctuation\">(</span>numMap<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> leftNum <span class=\"token operator\">+</span> rightNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> leftNum <span class=\"token operator\">+</span> rightNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-55-1","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-13T03:17:07.000Z","_content":"\n输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。\n\n例如：\n\n给定二叉树 `[3,9,20,null,null,15,7]`，\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回它的最大深度 3 。\n\n\n\n**提示：**\n\n1. `节点总数 <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        return root == null ? 0 : 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-55-1.md","raw":"---\ntitle: offer-55-1\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-13 11:17:07\n---\n\n输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。\n\n例如：\n\n给定二叉树 `[3,9,20,null,null,15,7]`，\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回它的最大深度 3 。\n\n\n\n**提示：**\n\n1. `节点总数 <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        return root == null ? 0 : 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-55-1","published":1,"updated":"2023-02-13T03:23:21.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle293iul0000eouuh5df6fau","content":"<p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p>\n<p>例如：</p>\n<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n / \\\n9  20\n  /  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回它的最大深度 3 。</p>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 10000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p>\n<p>例如：</p>\n<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n &#x2F; \\\n9  20\n  &#x2F;  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回它的最大深度 3 。</p>\n<p><strong>提示：</strong></p>\n<ol>\n<li><code>节点总数 &lt;= 10000</code></li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-55-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-14T03:38:29.000Z","_content":"\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n\n\n**示例 1:**\n\n给定二叉树 `[3,9,20,null,null,15,7]`\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回 `true` 。\n\n**示例 2:**\n\n给定二叉树 `[1,2,2,3,3,null,null,4,4]`\n\n```\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n```\n\n返回 `false` 。\n\n\n\n**限制：**\n\n- `0 <= 树的结点个数 <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return getBalancedDepth(root) != -1;\n    }\n\n\n    private int getBalancedDepth(TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n\n        int left = getBalancedDepth(node.left);\n        if (left == -1) {\n            return -1;\n        }\n        int right = getBalancedDepth(node.right);\n        if (right == -1) {\n            return -1;\n        }\n\n        int gap = left - right;\n\n        if (gap < -1 || gap > 1) {\n            return -1;\n        }\n        return left > right ? left + 1 : right + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-55-2.md","raw":"---\ntitle: offer-55-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-14 11:38:29\n---\n\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n\n\n**示例 1:**\n\n给定二叉树 `[3,9,20,null,null,15,7]`\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回 `true` 。\n\n**示例 2:**\n\n给定二叉树 `[1,2,2,3,3,null,null,4,4]`\n\n```\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n```\n\n返回 `false` 。\n\n\n\n**限制：**\n\n- `0 <= 树的结点个数 <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if (root == null) {\n            return true;\n        }\n        return getBalancedDepth(root) != -1;\n    }\n\n\n    private int getBalancedDepth(TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n\n        int left = getBalancedDepth(node.left);\n        if (left == -1) {\n            return -1;\n        }\n        int right = getBalancedDepth(node.right);\n        if (right == -1) {\n            return -1;\n        }\n\n        int gap = left - right;\n\n        if (gap < -1 || gap > 1) {\n            return -1;\n        }\n        return left > right ? left + 1 : right + 1;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-55-2","published":1,"updated":"2023-02-14T11:52:00.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle46pgbh0000k4uu53rjbmvg","content":"<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<p><strong>示例 1:</strong></p>\n<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n / \\\n9  20\n  /  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <code>true</code> 。</p>\n<p><strong>示例 2:</strong></p>\n<p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">      1\n     / \\\n    2   2\n   / \\\n  3   3\n / \\\n4   4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <code>false</code> 。</p>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= 树的结点个数 &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gap <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> gap <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> left <span class=\"token operator\">&gt;</span> right <span class=\"token operator\">?</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<p><strong>示例 1:</strong></p>\n<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">  3\n &#x2F; \\\n9  20\n  &#x2F;  \\\n 15   7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <code>true</code> 。</p>\n<p><strong>示例 2:</strong></p>\n<p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">      1\n     &#x2F; \\\n    2   2\n   &#x2F; \\\n  3   3\n &#x2F; \\\n4   4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回 <code>false</code> 。</p>\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>0 &lt;= 树的结点个数 &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token function\">getBalancedDepth</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gap <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> gap <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> left <span class=\"token operator\">></span> right <span class=\"token operator\">?</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-56-1","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-15T03:15:52.000Z","_content":"\n一个整型数组 `nums` 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [4,1,4,6]\n输出：[1,6] 或 [6,1]\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,10,4,1,4,3,3]\n输出：[2,10] 或 [10,2]\n```\n\n\n\n**限制：**\n\n- `2 <= nums.length <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] singleNumbers(int[] nums) {\n        int twoXor = 0;\n\n        for (int num : nums) {\n            twoXor ^= num;\n        }\n\n        int key = 1;\n\n        while ((key & twoXor) == 0) {\n            key = key << 1;\n        }\n\n        int numOne = 0, numTwo = 0;\n\n        for (int num : nums) {\n            if ((num & key) == 0) {\n                numOne ^= num;\n            } else {\n                numTwo ^= num;\n            }\n        }\n\n        int[] result = new int[2];\n        result[0] = numOne;\n        result[1] = numTwo;\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-56-1.md","raw":"---\ntitle: offer-56-1\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-15 11:15:52\n---\n\n一个整型数组 `nums` 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [4,1,4,6]\n输出：[1,6] 或 [6,1]\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,10,4,1,4,3,3]\n输出：[2,10] 或 [10,2]\n```\n\n\n\n**限制：**\n\n- `2 <= nums.length <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] singleNumbers(int[] nums) {\n        int twoXor = 0;\n\n        for (int num : nums) {\n            twoXor ^= num;\n        }\n\n        int key = 1;\n\n        while ((key & twoXor) == 0) {\n            key = key << 1;\n        }\n\n        int numOne = 0, numTwo = 0;\n\n        for (int num : nums) {\n            if ((num & key) == 0) {\n                numOne ^= num;\n            } else {\n                numTwo ^= num;\n            }\n        }\n\n        int[] result = new int[2];\n        result[0] = numOne;\n        result[1] = numTwo;\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-56-1","published":1,"updated":"2023-02-15T05:22:17.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle5887ay0000nwuu4au3afqy","content":"<p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [4,1,4,6]\n输出：[1,6] 或 [6,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [1,2,10,4,1,4,3,3]\n输出：[2,10] 或 [10,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">singleNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> twoXor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            twoXor <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&amp;</span> twoXor<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            key <span class=\"token operator\">=</span> key <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> numOne <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> numTwo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                numOne <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                numTwo <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numOne<span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numTwo<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [4,1,4,6]\n输出：[1,6] 或 [6,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1,2,10,4,1,4,3,3]\n输出：[2,10] 或 [10,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">singleNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> twoXor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            twoXor <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&amp;</span> twoXor<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            key <span class=\"token operator\">=</span> key <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> numOne <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> numTwo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                numOne <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                numTwo <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numOne<span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numTwo<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-56-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-16T03:09:31.000Z","_content":"\n在一个数组 `nums` 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [3,4,3,3]\n输出：4\n```\n\n**示例 2：**\n\n```\n输入：nums = [9,1,7,9,7,9,7]\n输出：1\n```\n\n\n\n**限制：**\n\n- `1 <= nums.length <= 10000`\n- `1 <= nums[i] < 2^31`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int[] bitNum = new int[63];\n\n\n        for (int num : nums) {\n            int i = 0;\n\n            while (num > 0) {\n                bitNum[i] += num % 2;\n                i++;\n                num = num >> 1;\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 62; i >= 0; i--) {\n            result = result << 1;\n            if (bitNum[i] % 3 == 1) {\n                result += 1;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-56-2.md","raw":"---\ntitle: offer-56-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-16 11:09:31\n---\n\n在一个数组 `nums` 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [3,4,3,3]\n输出：4\n```\n\n**示例 2：**\n\n```\n输入：nums = [9,1,7,9,7,9,7]\n输出：1\n```\n\n\n\n**限制：**\n\n- `1 <= nums.length <= 10000`\n- `1 <= nums[i] < 2^31`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int[] bitNum = new int[63];\n\n\n        for (int num : nums) {\n            int i = 0;\n\n            while (num > 0) {\n                bitNum[i] += num % 2;\n                i++;\n                num = num >> 1;\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 62; i >= 0; i--) {\n            result = result << 1;\n            if (bitNum[i] % 3 == 1) {\n                result += 1;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-56-2","published":1,"updated":"2023-02-16T03:49:32.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6kco4b000040uu8c9l9wjo","content":"<p>在一个数组 <code>nums</code> 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [3,4,3,3]\n输出：4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [9,1,7,9,7,9,7]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 10000</code></li>\n<li><code>1 &lt;= nums[i] &lt; 2^31</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bitNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">63</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                bitNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                num <span class=\"token operator\">=</span> num <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bitNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>在一个数组 <code>nums</code> 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [3,4,3,3]\n输出：4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [9,1,7,9,7,9,7]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 10000</code></li>\n<li><code>1 &lt;= nums[i] &lt; 2^31</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bitNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">63</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                bitNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                num <span class=\"token operator\">=</span> num <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bitNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-57","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-17T03:00:49.000Z","_content":"\n输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[2,7] 或者 [7,2]\n```\n\n**示例 2：**\n\n```\n输入：nums = [10,26,30,31,47,60], target = 40\n输出：[10,30] 或者 [30,10]\n```\n\n\n\n**限制：**\n\n- `1 <= nums.length <= 10^5`\n- `1 <= nums[i] <= 10^6`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        if (null == nums) {\n            return null;\n        }\n\n        int start = 0, end = nums.length - 1;\n        int[] result = null;\n\n        while (start <= end) {\n            if (nums[start] + nums[end] == target) {\n                result = new int[2];\n                result[0] = nums[start];\n                result[1] = nums[end];\n                break;\n            } else if (nums[start] + nums[end] < target) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-57.md","raw":"---\ntitle: offer-57\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-17 11:00:49\n---\n\n输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[2,7] 或者 [7,2]\n```\n\n**示例 2：**\n\n```\n输入：nums = [10,26,30,31,47,60], target = 40\n输出：[10,30] 或者 [30,10]\n```\n\n\n\n**限制：**\n\n- `1 <= nums.length <= 10^5`\n- `1 <= nums[i] <= 10^6`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        if (null == nums) {\n            return null;\n        }\n\n        int start = 0, end = nums.length - 1;\n        int[] result = null;\n\n        while (start <= end) {\n            if (nums[start] + nums[end] == target) {\n                result = new int[2];\n                result[0] = nums[start];\n                result[1] = nums[end];\n                break;\n            } else if (nums[start] + nums[end] < target) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-57","published":1,"updated":"2023-02-17T03:34:45.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle7z9jr200005kuugyt9d3p0","content":"<p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [2,7,11,15], target = 9\n输出：[2,7] 或者 [7,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [10,26,30,31,47,60], target = 40\n输出：[10,30] 或者 [30,10]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9\n输出：[2,7] 或者 [7,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [10,26,30,31,47,60], target &#x3D; 40\n输出：[10,30] 或者 [30,10]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-57-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-19T14:12:27.000Z","_content":"\n输入一个正整数 `target` ，输出所有和为 `target` 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n\n\n\n**示例 1：**\n\n```\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n```\n\n**示例 2：**\n\n```\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n```\n\n\n\n**限制：**\n\n- `1 <= target <= 10^5`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[][] findContinuousSequence(int target) {\n        if (target == 1 || target == 2) {\n            return new int[0][];\n        }\n        List<List<Integer>> resultList = new ArrayList<>();\n        int curSum = 1;\n\n        int start = 1, end = 1;\n\n        while (start <= target / 2) {\n            if (curSum == target) {\n                List<Integer> oneSe = new ArrayList<>();\n                oneSe.add(start);\n                oneSe.add(end);\n                resultList.add(oneSe);\n                curSum -= start;\n                start++;\n            } else if (curSum < target) {\n                end++;\n                curSum += end;\n            } else {\n                curSum -= start;\n                start++;\n            }\n        }\n\n        if (resultList.size() == 0) {\n            return new int[0][];\n        }\n\n        int[][] result = new int[resultList.size()][];\n        int index = 0;\n\n        for (List<Integer> oneSe : resultList) {\n            int[] oneArr = new int[oneSe.get(1) - oneSe.get(0) + 1];\n            for (int i = oneSe.get(0); i <= oneSe.get(1); i++) {\n                oneArr[i - oneSe.get(0)] = i;\n            }\n            result[index++] = oneArr;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-57-2.md","raw":"---\ntitle: offer-57-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-19 22:12:27\n---\n\n输入一个正整数 `target` ，输出所有和为 `target` 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n\n\n\n**示例 1：**\n\n```\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n```\n\n**示例 2：**\n\n```\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n```\n\n\n\n**限制：**\n\n- `1 <= target <= 10^5`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[][] findContinuousSequence(int target) {\n        if (target == 1 || target == 2) {\n            return new int[0][];\n        }\n        List<List<Integer>> resultList = new ArrayList<>();\n        int curSum = 1;\n\n        int start = 1, end = 1;\n\n        while (start <= target / 2) {\n            if (curSum == target) {\n                List<Integer> oneSe = new ArrayList<>();\n                oneSe.add(start);\n                oneSe.add(end);\n                resultList.add(oneSe);\n                curSum -= start;\n                start++;\n            } else if (curSum < target) {\n                end++;\n                curSum += end;\n            } else {\n                curSum -= start;\n                start++;\n            }\n        }\n\n        if (resultList.size() == 0) {\n            return new int[0][];\n        }\n\n        int[][] result = new int[resultList.size()][];\n        int index = 0;\n\n        for (List<Integer> oneSe : resultList) {\n            int[] oneArr = new int[oneSe.get(1) - oneSe.get(0) + 1];\n            for (int i = oneSe.get(0); i <= oneSe.get(1); i++) {\n                oneArr[i - oneSe.get(0)] = i;\n            }\n            result[index++] = oneArr;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-57-2","published":1,"updated":"2023-02-19T14:35:46.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clebhrceb000030uuh0sl7hhd","content":"<p>输入一个正整数 <code>target</code> ，输出所有和为 <code>target</code> 的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target = 9\n输出：[[2,3,4],[4,5]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= target &lt;= 10^5</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">findContinuousSequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> target <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> target <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneSe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneSe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curSum <span class=\"token operator\">-=</span> start<span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                end<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                curSum <span class=\"token operator\">+=</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                curSum <span class=\"token operator\">-=</span> start<span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneSe <span class=\"token operator\">:</span> resultList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oneArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                oneArr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            result<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> oneArr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个正整数 <code>target</code> ，输出所有和为 <code>target</code> 的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target &#x3D; 9\n输出：[[2,3,4],[4,5]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target &#x3D; 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= target &lt;= 10^5</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">findContinuousSequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> target <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> target <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneSe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resultList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneSe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curSum <span class=\"token operator\">-=</span> start<span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                end<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                curSum <span class=\"token operator\">+=</span> end<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                curSum <span class=\"token operator\">-=</span> start<span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>resultList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneSe <span class=\"token operator\">:</span> resultList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oneArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                oneArr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> oneSe<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            result<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> oneArr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-58-1","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-20T03:11:03.000Z","_content":"\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。\n\n\n\n**示例 1：**\n\n```\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n```\n\n**示例 2：**\n\n```\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n```\n\n**示例 3：**\n\n```\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n```\n\n\n\n**说明：**\n\n- 无空格字符构成一个单词。\n- 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n- 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String reverseWords(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n\n        StringBuilder sBuilder = new StringBuilder();\n        String[] sArr = s.trim().split(\" \");\n\n        for (int i = sArr.length - 1; i >= 0; i--) {\n            if (sArr[i].length() == 0) {\n                continue;\n            }\n            sBuilder.append(sArr[i]);\n\n            if (i > 0) {\n                sBuilder.append(' ');\n            }\n        }\n        return sBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-58-1.md","raw":"---\ntitle: offer-58-1\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-20 11:11:03\n---\n\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。\n\n\n\n**示例 1：**\n\n```\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n```\n\n**示例 2：**\n\n```\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n```\n\n**示例 3：**\n\n```\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n```\n\n\n\n**说明：**\n\n- 无空格字符构成一个单词。\n- 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n- 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String reverseWords(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n\n        StringBuilder sBuilder = new StringBuilder();\n        String[] sArr = s.trim().split(\" \");\n\n        for (int i = sArr.length - 1; i >= 0; i--) {\n            if (sArr[i].length() == 0) {\n                continue;\n            }\n            sBuilder.append(sArr[i]);\n\n            if (i > 0) {\n                sBuilder.append(' ');\n            }\n        }\n        return sBuilder.toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-58-1","published":1,"updated":"2023-02-20T03:49:16.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleca3tgd000034uu4am8grq9","content":"<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student. “，则输出”student. a am I”。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \"the sky is blue\"\n输出: \"blue is sky the\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明：</strong></p>\n<ul>\n<li>无空格字符构成一个单词。</li>\n<li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li>\n<li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">reverseWords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">StringBuilder</span> sBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sArr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student. “，则输出”student. a am I”。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: &quot;the sky is blue&quot;\n输出: &quot;blue is sky the&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: &quot;  hello world!  &quot;\n输出: &quot;world! hello&quot;\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: &quot;a good   example&quot;\n输出: &quot;example good a&quot;\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明：</strong></p>\n<ul>\n<li>无空格字符构成一个单词。</li>\n<li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li>\n<li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">reverseWords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">StringBuilder</span> sBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sArr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-58-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-21T05:08:08.000Z","_content":"\n字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串\"abcdefg\"和数字2，该函数将返回左旋转两位得到的结果\"cdefgab\"。\n\n\n\n**示例 1：**\n\n```\n输入: s = \"abcdefg\", k = 2\n输出: \"cdefgab\"\n```\n\n**示例 2：**\n\n```\n输入: s = \"lrloseumgh\", k = 6\n输出: \"umghlrlose\"\n```\n\n\n\n**限制：**\n\n- `1 <= k < s.length <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String reverseLeftWords(String s, int n) {\n        if (n == 0 || s == null || s.length() == 0) {\n            return s;\n        }\n\n        int k = n % s.length();\n\n        return s.substring(k) + s.substring(0, k);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```","source":"_posts/offer-58-2.md","raw":"---\ntitle: offer-58-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-21 13:08:08\n---\n\n字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串\"abcdefg\"和数字2，该函数将返回左旋转两位得到的结果\"cdefgab\"。\n\n\n\n**示例 1：**\n\n```\n输入: s = \"abcdefg\", k = 2\n输出: \"cdefgab\"\n```\n\n**示例 2：**\n\n```\n输入: s = \"lrloseumgh\", k = 6\n输出: \"umghlrlose\"\n```\n\n\n\n**限制：**\n\n- `1 <= k < s.length <= 10000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String reverseLeftWords(String s, int n) {\n        if (n == 0 || s == null || s.length() == 0) {\n            return s;\n        }\n\n        int k = n % s.length();\n\n        return s.substring(k) + s.substring(0, k);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```","slug":"offer-58-2","published":1,"updated":"2023-02-21T05:43:15.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cledtm6480000kouuhfafhfvb","content":"<p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s = \"abcdefg\", k = 2\n输出: \"cdefgab\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s = \"lrloseumgh\", k = 6\n输出: \"umghlrlose\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= k &lt; s.length &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">reverseLeftWords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;abcdefg&quot;, k &#x3D; 2\n输出: &quot;cdefgab&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: s &#x3D; &quot;lrloseumgh&quot;, k &#x3D; 6\n输出: &quot;umghlrlose&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= k &lt; s.length &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">reverseLeftWords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"offer-59-1","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-22T03:09:38.000Z","_content":"\n给定一个数组 `nums` 和滑动窗口的大小 `k`，请找出所有滑动窗口里的最大值。\n\n**示例:**\n\n```\n输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n```\n\n\n\n**提示：**\n\n你可以假设 *k* 总是有效的，在输入数组 **不为空** 的情况下，`1 ≤ k ≤ nums.length`。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return nums;\n        }\n\n        if (k <= 0) {\n            return null;\n        }\n\n        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {\n                return -p1.getKey().compareTo(p2.getKey());\n            }\n        });\n\n        for (int i = 0; i < k && i < nums.length; i++) {\n            Pair<Integer, Integer> p = new Pair<>(nums[i], i);\n            pq.add(p);\n        }\n\n        if (nums.length <= k) {\n            int[] result = new int[1];\n            result[0] = pq.poll().getKey();\n            return result;\n        }\n\n        int[] result = new int[nums.length - k + 1];\n        result[0] = pq.peek().getKey();\n\n        for (int i = k; i < nums.length; i++) {\n            Pair<Integer, Integer> p = new Pair<>(nums[i], i);\n            pq.add(p);\n\n            while (pq.peek().getValue() <= (i - k)) {\n                pq.poll();\n            }\n            result[i - k + 1] = pq.peek().getKey();\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-59-1.md","raw":"---\ntitle: offer-59-1\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-22 11:09:38\n---\n\n给定一个数组 `nums` 和滑动窗口的大小 `k`，请找出所有滑动窗口里的最大值。\n\n**示例:**\n\n```\n输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n```\n\n\n\n**提示：**\n\n你可以假设 *k* 总是有效的，在输入数组 **不为空** 的情况下，`1 ≤ k ≤ nums.length`。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return nums;\n        }\n\n        if (k <= 0) {\n            return null;\n        }\n\n        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {\n                return -p1.getKey().compareTo(p2.getKey());\n            }\n        });\n\n        for (int i = 0; i < k && i < nums.length; i++) {\n            Pair<Integer, Integer> p = new Pair<>(nums[i], i);\n            pq.add(p);\n        }\n\n        if (nums.length <= k) {\n            int[] result = new int[1];\n            result[0] = pq.poll().getKey();\n            return result;\n        }\n\n        int[] result = new int[nums.length - k + 1];\n        result[0] = pq.peek().getKey();\n\n        for (int i = k; i < nums.length; i++) {\n            Pair<Integer, Integer> p = new Pair<>(nums[i], i);\n            pq.add(p);\n\n            while (pq.peek().getValue() <= (i - k)) {\n                pq.poll();\n            }\n            result[i - k + 1] = pq.peek().getKey();\n        }\n\n        return result;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-59-1","published":1,"updated":"2023-02-22T15:20:07.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleftnyji0000rguuedni3l70","content":"<p>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<p>你可以假设 <em>k</em> 总是有效的，在输入数组 <strong>不为空</strong> 的情况下，<code>1 ≤ k ≤ nums.length</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> p1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3\n输出: [3,3,5,5,6,7] \n解释: \n\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<p>你可以假设 <em>k</em> 总是有效的，在输入数组 <strong>不为空</strong> 的情况下，<code>1 ≤ k ≤ nums.length</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> p1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-60","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-23T03:09:11.000Z","_content":"\n把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。\n\n\n\n你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。\n\n\n\n**示例 1:**\n\n```\n输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n```\n\n**示例 2:**\n\n```\n输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n```\n\n\n\n**限制：**\n\n```\n1 <= n <= 11\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double[] dicesProbability(int n) {\n        if (n <= 0) {\n            return new double[0];\n        }\n\n        double[][] f = new double[n + 1][6 * n + 1];\n        double magic = (double) 1 / 6;\n\n        for (int i = 1; i <= 6; i++) {\n            f[1][i] = magic;\n        }\n\n        int start = 1, end = 6;\n\n        for (int i = 2; i <= n; i++) {\n            for (int j = start; j <= end; j++) {\n                for (int k = 1; k <= 6; k++) {\n                    f[i][j + k] += f[i - 1][j] * magic;\n                }\n            }\n\n            start++;\n            end+=6;\n        }\n\n        double[] result = new double[end - start + 1];\n\n        for (int i = start; i <= end; i++) {\n            result[i - start] = ((double)Math.round(f[n][i] * 100000)) / 100000.0;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-60.md","raw":"---\ntitle: offer-60\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-23 11:09:11\n---\n\n把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。\n\n\n\n你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。\n\n\n\n**示例 1:**\n\n```\n输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n```\n\n**示例 2:**\n\n```\n输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n```\n\n\n\n**限制：**\n\n```\n1 <= n <= 11\n```\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public double[] dicesProbability(int n) {\n        if (n <= 0) {\n            return new double[0];\n        }\n\n        double[][] f = new double[n + 1][6 * n + 1];\n        double magic = (double) 1 / 6;\n\n        for (int i = 1; i <= 6; i++) {\n            f[1][i] = magic;\n        }\n\n        int start = 1, end = 6;\n\n        for (int i = 2; i <= n; i++) {\n            for (int j = start; j <= end; j++) {\n                for (int k = 1; k <= 6; k++) {\n                    f[i][j + k] += f[i - 1][j] * magic;\n                }\n            }\n\n            start++;\n            end+=6;\n        }\n\n        double[] result = new double[end - start + 1];\n\n        for (int i = start; i <= end; i++) {\n            result[i - start] = ((double)Math.round(f[n][i] * 100000)) / 100000.0;\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-60","published":1,"updated":"2023-02-23T12:09:32.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cleh2as60000028uu2tl6eita","content":"<p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>\n<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 &lt;= n &lt;= 11<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">dicesProbability</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> magic <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> magic<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> magic<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            end<span class=\"token operator\">+=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100000.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>\n<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1 &lt;&#x3D; n &lt;&#x3D; 11<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">dicesProbability</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> magic <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> magic<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> magic<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            end<span class=\"token operator\">+=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100000.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-62","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-24T03:29:56.000Z","_content":"\n0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n\n\n**示例 1：**\n\n```\n输入: n = 5, m = 3\n输出: 3\n```\n\n**示例 2：**\n\n```\n输入: n = 10, m = 17\n输出: 2\n```\n\n\n\n**限制：**\n\n- `1 <= n <= 10^5`\n- `1 <= m <= 10^6`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int lastRemaining(int n, int m) {\n        if (n <= 0 || m <= 0) {\n            return -1;\n        }\n        List<Integer> myList = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            myList.add(i);\n        }\n\n        int index = -1;\n        while (myList.size() > 1) {\n            index += m;\n            index = index % myList.size();\n            myList.remove(index);\n            index--;\n        }\n\n        return myList.get(0);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-62.md","raw":"---\ntitle: offer-62\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-24 11:29:56\n---\n\n0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n\n\n**示例 1：**\n\n```\n输入: n = 5, m = 3\n输出: 3\n```\n\n**示例 2：**\n\n```\n输入: n = 10, m = 17\n输出: 2\n```\n\n\n\n**限制：**\n\n- `1 <= n <= 10^5`\n- `1 <= m <= 10^6`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int lastRemaining(int n, int m) {\n        if (n <= 0 || m <= 0) {\n            return -1;\n        }\n        List<Integer> myList = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            myList.add(i);\n        }\n\n        int index = -1;\n        while (myList.size() > 1) {\n            index += m;\n            index = index % myList.size();\n            myList.remove(index);\n            index--;\n        }\n\n        return myList.get(0);\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-62","published":1,"updated":"2023-02-24T07:15:15.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clei78ovs0000oouuhbni11xk","content":"<p>0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 5, m = 3\n输出: 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 10, m = 17\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 10^5</code></li>\n<li><code>1 &lt;= m &lt;= 10^6</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> m <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> myList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            myList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            index <span class=\"token operator\">+=</span> m<span class=\"token punctuation\">;</span>\n            index <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> myList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            myList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> myList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 5, m &#x3D; 3\n输出: 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 10, m &#x3D; 17\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 10^5</code></li>\n<li><code>1 &lt;= m &lt;= 10^6</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> m <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> myList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            myList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            index <span class=\"token operator\">+=</span> m<span class=\"token punctuation\">;</span>\n            index <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> myList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            myList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            index<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> myList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-63","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-26T05:37:37.000Z","_content":"\n假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？\n\n\n\n**示例 1:**\n\n```\n输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n```\n\n**示例 2:**\n\n```\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n\n\n**限制：**\n\n```\n0 <= 数组长度 <= 10^5\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int maxV = 0;\n        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n\n        for (int price : prices) {\n            if (!pq.isEmpty() && price > pq.peek()) {\n                if (price - pq.peek() > maxV) {\n                    maxV = price - pq.peek();\n                }\n            }\n            pq.add(price);\n        }\n\n        return maxV;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-63.md","raw":"---\ntitle: offer-63\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-26 13:37:37\n---\n\n假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？\n\n\n\n**示例 1:**\n\n```\n输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n```\n\n**示例 2:**\n\n```\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n\n\n**限制：**\n\n```\n0 <= 数组长度 <= 10^5\n```\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int maxV = 0;\n        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n\n        for (int price : prices) {\n            if (!pq.isEmpty() && price > pq.peek()) {\n                if (price - pq.peek() > maxV) {\n                    maxV = price - pq.peek();\n                }\n            }\n            pq.add(price);\n        }\n\n        return maxV;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-63","published":1,"updated":"2023-02-26T06:58:56.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clel1irpl0000douu1my16g6x","content":"<p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;= 数组长度 &lt;= 10^5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> maxV <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price <span class=\"token operator\">:</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> price <span class=\"token operator\">&gt;</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">-</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> maxV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    maxV <span class=\"token operator\">=</span> price <span class=\"token operator\">-</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> maxV<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。\n     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0 &lt;&#x3D; 数组长度 &lt;&#x3D; 10^5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> maxV <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> pq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price <span class=\"token operator\">:</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> price <span class=\"token operator\">></span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">-</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    maxV <span class=\"token operator\">=</span> price <span class=\"token operator\">-</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            pq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> maxV<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-64","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-27T06:54:43.000Z","_content":"\n求 `1+2+...+n` ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n\n\n\n**示例 1：**\n\n```\n输入: n = 3\n输出: 6\n```\n\n**示例 2：**\n\n```\n输入: n = 9\n输出: 45\n```\n\n\n\n**限制：**\n\n- `1 <= n <= 10000`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    class InnerC {\n        public static int num = 0;\n        InnerC(int n) {\n            num += n;\n        }\n    }\n\n    private boolean innerFunc(int n) {\n        InnerC s = new InnerC(n);\n        return n > 0 && innerFunc(n - 1);\n    }\n    public int sumNums(int n) {\n        InnerC.num = 0;\n        innerFunc(n);\n        return InnerC.num;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-64.md","raw":"---\ntitle: offer-64\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-27 14:54:43\n---\n\n求 `1+2+...+n` ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n\n\n\n**示例 1：**\n\n```\n输入: n = 3\n输出: 6\n```\n\n**示例 2：**\n\n```\n输入: n = 9\n输出: 45\n```\n\n\n\n**限制：**\n\n- `1 <= n <= 10000`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    class InnerC {\n        public static int num = 0;\n        InnerC(int n) {\n            num += n;\n        }\n    }\n\n    private boolean innerFunc(int n) {\n        InnerC s = new InnerC(n);\n        return n > 0 && innerFunc(n - 1);\n    }\n    public int sumNums(int n) {\n        InnerC.num = 0;\n        innerFunc(n);\n        return InnerC.num;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-64","published":1,"updated":"2023-02-27T07:36:15.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clemialgm0000l8uubrca66sf","content":"<p>求 <code>1+2+...+n</code> ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 3\n输出: 6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 9\n输出: 45<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerC</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            num <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">InnerC</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumNums</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>求 <code>1+2+...+n</code> ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 3\n输出: 6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 9\n输出: 45<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>限制：</strong></p>\n<ul>\n<li><code>1 &lt;= n &lt;= 10000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerC</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            num <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">InnerC</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumNums</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">InnerC</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-65","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-02-28T03:34:30.000Z","_content":"\n写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。\n\n\n\n**示例:**\n\n```\n输入: a = 1, b = 1\n输出: 2\n```\n\n\n\n**提示：**\n\n- `a`, `b` 均可能是负数或 0\n- 结果不会溢出 32 位整数\n\n**预备知识**\n\n有符号整数通常用补码来表示和存储，补码具有如下特征：\n\n- 正整数的补码与原码相同；负整数的补码为其原码除符号位外的所有位取反后加 1。\n- 可以将减法运算转化为补码的加法运算来实现。\n- 符号位与数值位可以一起参与运算。\n\n**思路和算法**\n\n虽然题目只要求了不能使用运算符 +、-、* 和 /，但是原则上来说也不宜使用类似的运算符 +=、-=、*= 和 /=，以及 sum 等方法。于是，我们使用位运算来处理这个问题。\n\n首先，考虑两个二进制位相加的四种情况如下：\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int add(int a, int b) {\n        while (b != 0) {\n            int carry = (a & b) << 1;\n            a = a ^ b;\n            b = carry;\n        }\n        return a;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-65.md","raw":"---\ntitle: offer-65\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-02-28 11:34:30\n---\n\n写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。\n\n\n\n**示例:**\n\n```\n输入: a = 1, b = 1\n输出: 2\n```\n\n\n\n**提示：**\n\n- `a`, `b` 均可能是负数或 0\n- 结果不会溢出 32 位整数\n\n**预备知识**\n\n有符号整数通常用补码来表示和存储，补码具有如下特征：\n\n- 正整数的补码与原码相同；负整数的补码为其原码除符号位外的所有位取反后加 1。\n- 可以将减法运算转化为补码的加法运算来实现。\n- 符号位与数值位可以一起参与运算。\n\n**思路和算法**\n\n虽然题目只要求了不能使用运算符 +、-、* 和 /，但是原则上来说也不宜使用类似的运算符 +=、-=、*= 和 /=，以及 sum 等方法。于是，我们使用位运算来处理这个问题。\n\n首先，考虑两个二进制位相加的四种情况如下：\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int add(int a, int b) {\n        while (b != 0) {\n            int carry = (a & b) << 1;\n            a = a ^ b;\n            b = carry;\n        }\n        return a;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-65","published":1,"updated":"2023-02-28T06:22:00.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clenv4poj0000sguu4dgqdx0y","content":"<p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: a = 1, b = 1\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>a</code>, <code>b</code> 均可能是负数或 0</li>\n<li>结果不会溢出 32 位整数</li>\n</ul>\n<p><strong>预备知识</strong></p>\n<p>有符号整数通常用补码来表示和存储，补码具有如下特征：</p>\n<ul>\n<li>正整数的补码与原码相同；负整数的补码为其原码除符号位外的所有位取反后加 1。</li>\n<li>可以将减法运算转化为补码的加法运算来实现。</li>\n<li>符号位与数值位可以一起参与运算。</li>\n</ul>\n<p><strong>思路和算法</strong></p>\n<p>虽然题目只要求了不能使用运算符 +、-、* 和 /，但是原则上来说也不宜使用类似的运算符 +=、-=、*= 和 /=，以及 sum 等方法。于是，我们使用位运算来处理这个问题。</p>\n<p>首先，考虑两个二进制位相加的四种情况如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">=</span> carry<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: a &#x3D; 1, b &#x3D; 1\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>a</code>, <code>b</code> 均可能是负数或 0</li>\n<li>结果不会溢出 32 位整数</li>\n</ul>\n<p><strong>预备知识</strong></p>\n<p>有符号整数通常用补码来表示和存储，补码具有如下特征：</p>\n<ul>\n<li>正整数的补码与原码相同；负整数的补码为其原码除符号位外的所有位取反后加 1。</li>\n<li>可以将减法运算转化为补码的加法运算来实现。</li>\n<li>符号位与数值位可以一起参与运算。</li>\n</ul>\n<p><strong>思路和算法</strong></p>\n<p>虽然题目只要求了不能使用运算符 +、-、* 和 /，但是原则上来说也不宜使用类似的运算符 +=、-=、*= 和 /=，以及 sum 等方法。于是，我们使用位运算来处理这个问题。</p>\n<p>首先，考虑两个二进制位相加的四种情况如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">=</span> carry<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-66","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-01T11:53:18.000Z","_content":"\n给定一个数组 `A[0,1,…,n-1]`，请构建一个数组 `B[0,1,…,n-1]`，其中 `B[i]` 的值是数组 `A` 中除了下标 `i` 以外的元素的积, 即 `B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]`。不能使用除法。\n\n\n\n**示例:**\n\n```\n输入: [1,2,3,4,5]\n输出: [120,60,40,30,24]\n```\n\n\n\n**提示：**\n\n- 所有元素乘积之和不会溢出 32 位整数\n- `a.length <= 100000`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] constructArr(int[] a) {\n        if (a == null || a.length == 0) {\n            return a;\n        }\n\n        int[] pre = new int[a.length];\n\n        pre[0] = 1;\n\n        for (int i = 1; i < a.length; i++) {\n            pre[i] = pre[i - 1] * a[i - 1];\n        }\n\n        int[] suf = new int[a.length];\n\n        suf[a.length - 1] = 1;\n\n        for (int i = a.length - 2; i >= 0; i--) {\n            suf[i] = suf[i + 1] * a[i + 1];\n        }\n\n        int[] result = new int[a.length];\n\n        for (int i = 0; i < a.length; i++) {\n            result[i] = pre[i] * suf[i];\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-66.md","raw":"---\ntitle: offer-66\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-01 19:53:18\n---\n\n给定一个数组 `A[0,1,…,n-1]`，请构建一个数组 `B[0,1,…,n-1]`，其中 `B[i]` 的值是数组 `A` 中除了下标 `i` 以外的元素的积, 即 `B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]`。不能使用除法。\n\n\n\n**示例:**\n\n```\n输入: [1,2,3,4,5]\n输出: [120,60,40,30,24]\n```\n\n\n\n**提示：**\n\n- 所有元素乘积之和不会溢出 32 位整数\n- `a.length <= 100000`\n\n```java\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] constructArr(int[] a) {\n        if (a == null || a.length == 0) {\n            return a;\n        }\n\n        int[] pre = new int[a.length];\n\n        pre[0] = 1;\n\n        for (int i = 1; i < a.length; i++) {\n            pre[i] = pre[i - 1] * a[i - 1];\n        }\n\n        int[] suf = new int[a.length];\n\n        suf[a.length - 1] = 1;\n\n        for (int i = a.length - 2; i >= 0; i--) {\n            suf[i] = suf[i + 1] * a[i + 1];\n        }\n\n        int[] result = new int[a.length];\n\n        for (int i = 0; i < a.length; i++) {\n            result[i] = pre[i] * suf[i];\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-66","published":1,"updated":"2023-03-01T12:25:38.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clepnigg000003guu2yd46pqf","content":"<p>给定一个数组 <code>A[0,1,…,n-1]</code>，请构建一个数组 <code>B[0,1,…,n-1]</code>，其中 <code>B[i]</code> 的值是数组 <code>A</code> 中除了下标 <code>i</code> 以外的元素的积, 即 <code>B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]</code>。不能使用除法。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1,2,3,4,5]\n输出: [120,60,40,30,24]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>所有元素乘积之和不会溢出 32 位整数</li>\n<li><code>a.length &lt;= 100000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">constructArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        pre<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        suf<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个数组 <code>A[0,1,…,n-1]</code>，请构建一个数组 <code>B[0,1,…,n-1]</code>，其中 <code>B[i]</code> 的值是数组 <code>A</code> 中除了下标 <code>i</code> 以外的元素的积, 即 <code>B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]</code>。不能使用除法。</p>\n<p><strong>示例:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: [1,2,3,4,5]\n输出: [120,60,40,30,24]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>所有元素乘积之和不会溢出 32 位整数</li>\n<li><code>a.length &lt;= 100000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">constructArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        pre<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        suf<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-68-1","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-02T02:36:31.000Z","_content":"\n给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。\n\n[百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n\n例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png)\n\n\n\n**示例 1:**\n\n```\n输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。\n```\n\n**示例 2:**\n\n```\n输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。\n```\n\n\n\n**说明:**\n\n- 所有节点的值都是唯一的。\n- p、q 为不同节点且均存在于给定的二叉搜索树中。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        List<TreeNode> pPath = new ArrayList<>();\n        List<TreeNode> qPath = new ArrayList<>();\n        pPath.add(root);\n        qPath.add(root);\n        createPath(pPath, root, p);\n        createPath(qPath, root, q);\n\n        int i = 0;\n        while (i < pPath.size() && i < qPath.size() && pPath.get(i) == qPath.get(i)) {\n            i++;\n        }\n        return pPath.get(i - 1);\n    }\n\n    boolean createPath(List<TreeNode> path, TreeNode cur, TreeNode target) {\n        if (cur == target) {\n            return true;\n        }\n\n        if (cur == null) {\n            return false;\n        }\n        if (cur.val > target.val) {\n            if (cur.left != null) {\n                path.add(cur.left);\n\n                if (createPath(path, cur.left, target)) {\n                    return true;\n                } else {\n                    path.remove(cur.left);\n                }\n            }\n        }\n        if (cur.val < target.val) {\n            if (cur.right != null) {\n                path.add(cur.right);\n\n                if (createPath(path, cur.right, target)) {\n                    return true;\n                } else {\n                    path.remove(cur.right);\n                }\n            }\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-68-1.md","raw":"---\ntitle: offer-68-1\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-02 10:36:31\n---\n\n给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。\n\n[百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n\n例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png)\n\n\n\n**示例 1:**\n\n```\n输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。\n```\n\n**示例 2:**\n\n```\n输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。\n```\n\n\n\n**说明:**\n\n- 所有节点的值都是唯一的。\n- p、q 为不同节点且均存在于给定的二叉搜索树中。\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        List<TreeNode> pPath = new ArrayList<>();\n        List<TreeNode> qPath = new ArrayList<>();\n        pPath.add(root);\n        qPath.add(root);\n        createPath(pPath, root, p);\n        createPath(qPath, root, q);\n\n        int i = 0;\n        while (i < pPath.size() && i < qPath.size() && pPath.get(i) == qPath.get(i)) {\n            i++;\n        }\n        return pPath.get(i - 1);\n    }\n\n    boolean createPath(List<TreeNode> path, TreeNode cur, TreeNode target) {\n        if (cur == target) {\n            return true;\n        }\n\n        if (cur == null) {\n            return false;\n        }\n        if (cur.val > target.val) {\n            if (cur.left != null) {\n                path.add(cur.left);\n\n                if (createPath(path, cur.left, target)) {\n                    return true;\n                } else {\n                    path.remove(cur.left);\n                }\n            }\n        }\n        if (cur.val < target.val) {\n            if (cur.right != null) {\n                path.add(cur.right);\n\n                if (createPath(path, cur.right, target)) {\n                    return true;\n                } else {\n                    path.remove(cur.right);\n                }\n            }\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-68-1","published":1,"updated":"2023-03-02T03:48:32.271Z","_id":"cleqirse80000ccuu0hi04qo0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p>例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" alt=\"img\"></p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明:</strong></p>\n<ul>\n<li>所有节点的值都是唯一的。</li>\n<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> pPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> qPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>pPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>qPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> cur<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p>例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" alt=\"img\"></p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5], p &#x3D; 2, q &#x3D; 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明:</strong></p>\n<ul>\n<li>所有节点的值都是唯一的。</li>\n<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> pPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> qPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>pPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>qPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> cur<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> target<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer-68-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-03T03:05:09.000Z","_content":"\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n\n[百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n\n例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png)\n\n\n\n**示例 1:**\n\n```\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出: 3\n解释: 节点 5 和节点 1 的最近公共祖先是节点 3。\n```\n\n**示例 2:**\n\n```\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出: 5\n解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。\n```\n\n\n\n**说明:**\n\n- 所有节点的值都是唯一的。\n- p、q 为不同节点且均存在于给定的二叉树中。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        List<TreeNode> pPath = new ArrayList<>();\n        List<TreeNode> qPath = new ArrayList<>();\n        pPath.add(root);\n        qPath.add(root);\n        createPath(pPath, root, p);\n        createPath(qPath, root, q);\n\n        int i = 0;\n        while (i < pPath.size() && i < qPath.size() && pPath.get(i) == qPath.get(i)) {\n            i++;\n        }\n        return pPath.get(i - 1);\n    }\n\n    boolean createPath(List<TreeNode> path, TreeNode cur, TreeNode target) {\n        if (cur == target) {\n            return true;\n        }\n\n        if (cur == null) {\n            return false;\n        }\n        if (cur.left != null) {\n            path.add(cur.left);\n\n            if (createPath(path, cur.left, target)) {\n                return true;\n            } else {\n                path.remove(cur.left);\n            }\n        }\n        if (cur.right != null) {\n            path.add(cur.right);\n\n            if (createPath(path, cur.right, target)) {\n                return true;\n            } else {\n                path.remove(cur.right);\n            }\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer-68-2.md","raw":"---\ntitle: offer-68-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-03 11:05:09\n---\n\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n\n[百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n\n例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png)\n\n\n\n**示例 1:**\n\n```\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出: 3\n解释: 节点 5 和节点 1 的最近公共祖先是节点 3。\n```\n\n**示例 2:**\n\n```\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出: 5\n解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。\n```\n\n\n\n**说明:**\n\n- 所有节点的值都是唯一的。\n- p、q 为不同节点且均存在于给定的二叉树中。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        List<TreeNode> pPath = new ArrayList<>();\n        List<TreeNode> qPath = new ArrayList<>();\n        pPath.add(root);\n        qPath.add(root);\n        createPath(pPath, root, p);\n        createPath(qPath, root, q);\n\n        int i = 0;\n        while (i < pPath.size() && i < qPath.size() && pPath.get(i) == qPath.get(i)) {\n            i++;\n        }\n        return pPath.get(i - 1);\n    }\n\n    boolean createPath(List<TreeNode> path, TreeNode cur, TreeNode target) {\n        if (cur == target) {\n            return true;\n        }\n\n        if (cur == null) {\n            return false;\n        }\n        if (cur.left != null) {\n            path.add(cur.left);\n\n            if (createPath(path, cur.left, target)) {\n                return true;\n            } else {\n                path.remove(cur.left);\n            }\n        }\n        if (cur.right != null) {\n            path.add(cur.right);\n\n            if (createPath(path, cur.right, target)) {\n                return true;\n            } else {\n                path.remove(cur.right);\n            }\n        }\n\n        return false;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer-68-2","published":1,"updated":"2023-03-03T06:02:20.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cles4pd050000tsuu26np2y47","content":"<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png\" alt=\"img\"></p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出: 3\n解释: 节点 5 和节点 1 的最近公共祖先是节点 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出: 5\n解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明:</strong></p>\n<ul>\n<li>所有节点的值都是唯一的。</li>\n<li>p、q 为不同节点且均存在于给定的二叉树中。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> pPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> qPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>pPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>qPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&gt;</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> cur<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>\n<p>例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png\" alt=\"img\"></p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 1\n输出: 3\n解释: 节点 5 和节点 1 的最近公共祖先是节点 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 4\n输出: 5\n解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明:</strong></p>\n<ul>\n<li>所有节点的值都是唯一的。</li>\n<li>p、q 为不同节点且均存在于给定的二叉树中。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token comment\">/**\n * Definition for a binary tree node.\n * public class TreeNode &#123;\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) &#123; val = x; &#125;\n * &#125;\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> pPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> qPath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        qPath<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>pPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>qPath<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> qPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> pPath<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> cur<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">createPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-1","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-05T07:47:12.000Z","_content":"\n给定两个整数 `a` 和 `b` ，求它们的除法的商 `a/b` ，要求不得使用乘号 `'*'`、除号 `'/'` 以及求余符号 `'%'` 。\n\n\n\n**注意：**\n\n- 整数除法的结果应当截去（`truncate`）其小数部分，例如：`truncate(8.345) = 8` 以及 `truncate(-2.7335) = -2`\n- 假设我们的环境只能存储 32 位有符号整数，其数值范围是 `[−231, 231−1]`。本题中，如果除法结果溢出，则返回 `231 − 1`\n\n\n\n**示例 1：**\n\n```\n输入：a = 15, b = 2\n输出：7\n解释：15/2 = truncate(7.5) = 7\n```\n\n**示例 2：**\n\n```\n输入：a = 7, b = -3\n输出：-2\n解释：7/-3 = truncate(-2.33333..) = -2\n```\n\n**示例 3：**\n\n```\n输入：a = 0, b = 1\n输出：0\n```\n\n**示例 4：**\n\n```\n输入：a = 1, b = 1\n输出：1\n```\n\n\n\n**提示:**\n\n- `-231 <= a, b <= 231 - 1`\n- `b != 0`\n\n```java\nclass Solution {\n    public int divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == Integer.MIN_VALUE) {\n            if (b == 1) {\n                return Integer.MIN_VALUE;\n            }\n            if (b == -1) {\n                return Integer.MAX_VALUE;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == Integer.MIN_VALUE) {\n            return a == Integer.MIN_VALUE ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n\n        // 一般情况，使用二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        boolean rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n\n        int left = 1, right = Integer.MAX_VALUE, ans = 0;\n        while (left <= right) {\n            // 注意溢出，并且不能使用除法\n            int mid = left + ((right - left) >> 1);\n            boolean check = quickAdd(b, mid, a);\n            if (check) {\n                ans = mid;\n                // 注意溢出\n                if (mid == Integer.MAX_VALUE) {\n                    break;\n                }\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n\n    // 快速乘\n    public boolean quickAdd(int y, int z, int x) {\n        // x 和 y 是负数，z 是正数\n        // 需要判断 z * y >= x 是否成立\n        int result = 0, add = y;\n        while (z != 0) {\n            if ((z & 1) != 0) {\n                // 需要保证 result + add >= x\n                if (result < x - add) {\n                    return false;\n                }\n                result += add;\n            }\n            if (z != 1) {\n                // 需要保证 add + add >= x\n                if (add < x - add) {\n                    return false;\n                }\n                add += add;\n            }\n            // 不能使用除法\n            z >>= 1;\n        }\n        return true;\n    }\n}\n```\n","source":"_posts/offer2-1.md","raw":"---\ntitle: offer2-1\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-05 15:47:12\n---\n\n给定两个整数 `a` 和 `b` ，求它们的除法的商 `a/b` ，要求不得使用乘号 `'*'`、除号 `'/'` 以及求余符号 `'%'` 。\n\n\n\n**注意：**\n\n- 整数除法的结果应当截去（`truncate`）其小数部分，例如：`truncate(8.345) = 8` 以及 `truncate(-2.7335) = -2`\n- 假设我们的环境只能存储 32 位有符号整数，其数值范围是 `[−231, 231−1]`。本题中，如果除法结果溢出，则返回 `231 − 1`\n\n\n\n**示例 1：**\n\n```\n输入：a = 15, b = 2\n输出：7\n解释：15/2 = truncate(7.5) = 7\n```\n\n**示例 2：**\n\n```\n输入：a = 7, b = -3\n输出：-2\n解释：7/-3 = truncate(-2.33333..) = -2\n```\n\n**示例 3：**\n\n```\n输入：a = 0, b = 1\n输出：0\n```\n\n**示例 4：**\n\n```\n输入：a = 1, b = 1\n输出：1\n```\n\n\n\n**提示:**\n\n- `-231 <= a, b <= 231 - 1`\n- `b != 0`\n\n```java\nclass Solution {\n    public int divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == Integer.MIN_VALUE) {\n            if (b == 1) {\n                return Integer.MIN_VALUE;\n            }\n            if (b == -1) {\n                return Integer.MAX_VALUE;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == Integer.MIN_VALUE) {\n            return a == Integer.MIN_VALUE ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n\n        // 一般情况，使用二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        boolean rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n\n        int left = 1, right = Integer.MAX_VALUE, ans = 0;\n        while (left <= right) {\n            // 注意溢出，并且不能使用除法\n            int mid = left + ((right - left) >> 1);\n            boolean check = quickAdd(b, mid, a);\n            if (check) {\n                ans = mid;\n                // 注意溢出\n                if (mid == Integer.MAX_VALUE) {\n                    break;\n                }\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n\n    // 快速乘\n    public boolean quickAdd(int y, int z, int x) {\n        // x 和 y 是负数，z 是正数\n        // 需要判断 z * y >= x 是否成立\n        int result = 0, add = y;\n        while (z != 0) {\n            if ((z & 1) != 0) {\n                // 需要保证 result + add >= x\n                if (result < x - add) {\n                    return false;\n                }\n                result += add;\n            }\n            if (z != 1) {\n                // 需要保证 add + add >= x\n                if (add < x - add) {\n                    return false;\n                }\n                add += add;\n            }\n            // 不能使用除法\n            z >>= 1;\n        }\n        return true;\n    }\n}\n```\n","slug":"offer2-1","published":1,"updated":"2023-03-05T09:09:28.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clev69mxq00002suugj2sh175","content":"<p>给定两个整数 <code>a</code> 和 <code>b</code> ，求它们的除法的商 <code>a/b</code> ，要求不得使用乘号 <code>'*'</code>、除号 <code>'/'</code> 以及求余符号 <code>'%'</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8</code> 以及 <code>truncate(-2.7335) = -2</code></li>\n<li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 <code>[−231, 231−1]</code>。本题中，如果除法结果溢出，则返回 <code>231 − 1</code></li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a = 15, b = 2\n输出：7\n解释：15/2 = truncate(7.5) = 7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a = 7, b = -3\n输出：-2\n解释：7/-3 = truncate(-2.33333..) = -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a = 0, b = 1\n输出：0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a = 1, b = 1\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>-231 &lt;= a, b &lt;= 231 - 1</code></li>\n<li><code>b != 0</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 考虑被除数为最小值的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 考虑除数为最小值的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 考虑被除数为 0 的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 一般情况，使用二分查找</span>\n        <span class=\"token comment\">// 将所有的正数取相反数，这样就只需要考虑一种情况</span>\n        <span class=\"token keyword\">boolean</span> rev <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>a<span class=\"token punctuation\">;</span>\n            rev <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>rev<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>b<span class=\"token punctuation\">;</span>\n            rev <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>rev<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 注意溢出，并且不能使用除法</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> check <span class=\"token operator\">=</span> <span class=\"token function\">quickAdd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 注意溢出</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> rev <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>ans <span class=\"token operator\">:</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 快速乘</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">quickAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// x 和 y 是负数，z 是正数</span>\n        <span class=\"token comment\">// 需要判断 z * y &gt;= x 是否成立</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> add <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 需要保证 result + add &gt;= x</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> x <span class=\"token operator\">-</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                result <span class=\"token operator\">+=</span> add<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 需要保证 add + add &gt;= x</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add <span class=\"token operator\">&lt;</span> x <span class=\"token operator\">-</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                add <span class=\"token operator\">+=</span> add<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 不能使用除法</span>\n            z <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定两个整数 <code>a</code> 和 <code>b</code> ，求它们的除法的商 <code>a/b</code> ，要求不得使用乘号 <code>&#39;*&#39;</code>、除号 <code>&#39;/&#39;</code> 以及求余符号 <code>&#39;%&#39;</code> 。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8</code> 以及 <code>truncate(-2.7335) = -2</code></li>\n<li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 <code>[−231, 231−1]</code>。本题中，如果除法结果溢出，则返回 <code>231 − 1</code></li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a &#x3D; 15, b &#x3D; 2\n输出：7\n解释：15&#x2F;2 &#x3D; truncate(7.5) &#x3D; 7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a &#x3D; 7, b &#x3D; -3\n输出：-2\n解释：7&#x2F;-3 &#x3D; truncate(-2.33333..) &#x3D; -2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a &#x3D; 0, b &#x3D; 1\n输出：0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 4：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：a &#x3D; 1, b &#x3D; 1\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>-231 &lt;= a, b &lt;= 231 - 1</code></li>\n<li><code>b != 0</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 考虑被除数为最小值的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 考虑除数为最小值的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 考虑被除数为 0 的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 一般情况，使用二分查找</span>\n        <span class=\"token comment\">// 将所有的正数取相反数，这样就只需要考虑一种情况</span>\n        <span class=\"token keyword\">boolean</span> rev <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>a<span class=\"token punctuation\">;</span>\n            rev <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>rev<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>b<span class=\"token punctuation\">;</span>\n            rev <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>rev<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 注意溢出，并且不能使用除法</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> check <span class=\"token operator\">=</span> <span class=\"token function\">quickAdd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 注意溢出</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> rev <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>ans <span class=\"token operator\">:</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 快速乘</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">quickAdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// x 和 y 是负数，z 是正数</span>\n        <span class=\"token comment\">// 需要判断 z * y >= x 是否成立</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> add <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 需要保证 result + add >= x</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> x <span class=\"token operator\">-</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                result <span class=\"token operator\">+=</span> add<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 需要保证 add + add >= x</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add <span class=\"token operator\">&lt;</span> x <span class=\"token operator\">-</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                add <span class=\"token operator\">+=</span> add<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 不能使用除法</span>\n            z <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-2","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-06T05:27:38.000Z","_content":"\n给定两个 01 字符串 `a` 和 `b` ，请计算它们的和，并以二进制字符串的形式输出。\n\n输入为 **非空** 字符串且只包含数字 `1` 和 `0`。\n\n\n\n**示例 1:**\n\n```\n输入: a = \"11\", b = \"10\"\n输出: \"101\"\n```\n\n**示例 2:**\n\n```\n输入: a = \"1010\", b = \"1011\"\n输出: \"10101\"\n```\n\n\n\n**提示：**\n\n- 每个字符串仅由字符 `'0'` 或 `'1'` 组成。\n- `1 <= a.length, b.length <= 10^4`\n- 字符串如果不是 `\"0\"` ，就都不含前导零。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String addBinary(String a, String b) {\n        StringBuilder resultB = new StringBuilder();\n\n        int indexA = a == null ? -1 : a.length() - 1;\n        int indexB = b == null ? -1 : b.length() - 1;\n        int carry = 0;\n\n        while (indexA >= 0 || indexB >= 0) {\n            int aBit = indexA >= 0 ? a.charAt(indexA) - '0' : 0;\n            int bBit = indexB >= 0 ? b.charAt(indexB) - '0' : 0;\n\n            resultB.append((aBit + bBit + carry) % 2);\n            if (carry + aBit + bBit > 1) {\n                carry = 1;\n            } else {\n                carry = 0;\n            }\n            indexA--;\n            indexB--;\n        }\n\n        if (carry == 1) {\n            resultB.append(1);\n        }\n\n        return resultB.reverse().toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-2.md","raw":"---\ntitle: offer2-2\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-06 13:27:38\n---\n\n给定两个 01 字符串 `a` 和 `b` ，请计算它们的和，并以二进制字符串的形式输出。\n\n输入为 **非空** 字符串且只包含数字 `1` 和 `0`。\n\n\n\n**示例 1:**\n\n```\n输入: a = \"11\", b = \"10\"\n输出: \"101\"\n```\n\n**示例 2:**\n\n```\n输入: a = \"1010\", b = \"1011\"\n输出: \"10101\"\n```\n\n\n\n**提示：**\n\n- 每个字符串仅由字符 `'0'` 或 `'1'` 组成。\n- `1 <= a.length, b.length <= 10^4`\n- 字符串如果不是 `\"0\"` ，就都不含前导零。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public String addBinary(String a, String b) {\n        StringBuilder resultB = new StringBuilder();\n\n        int indexA = a == null ? -1 : a.length() - 1;\n        int indexB = b == null ? -1 : b.length() - 1;\n        int carry = 0;\n\n        while (indexA >= 0 || indexB >= 0) {\n            int aBit = indexA >= 0 ? a.charAt(indexA) - '0' : 0;\n            int bBit = indexB >= 0 ? b.charAt(indexB) - '0' : 0;\n\n            resultB.append((aBit + bBit + carry) % 2);\n            if (carry + aBit + bBit > 1) {\n                carry = 1;\n            } else {\n                carry = 0;\n            }\n            indexA--;\n            indexB--;\n        }\n\n        if (carry == 1) {\n            resultB.append(1);\n        }\n\n        return resultB.reverse().toString();\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-2","published":1,"updated":"2023-03-06T06:14:16.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clewfg4xy0000hguu03hu9035","content":"<p>给定两个 01 字符串 <code>a</code> 和 <code>b</code> ，请计算它们的和，并以二进制字符串的形式输出。</p>\n<p>输入为 <strong>非空</strong> 字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: a = \"11\", b = \"10\"\n输出: \"101\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: a = \"1010\", b = \"1011\"\n输出: \"10101\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>每个字符串仅由字符 <code>'0'</code> 或 <code>'1'</code> 组成。</li>\n<li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li>\n<li>字符串如果不是 <code>\"0\"</code> ，就都不含前导零。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addBinary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> resultB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> indexA <span class=\"token operator\">=</span> a <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> indexB <span class=\"token operator\">=</span> b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>indexA <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> indexB <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> aBit <span class=\"token operator\">=</span> indexA <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>indexA<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> bBit <span class=\"token operator\">=</span> indexB <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>indexB<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            resultB<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBit <span class=\"token operator\">+</span> bBit <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry <span class=\"token operator\">+</span> aBit <span class=\"token operator\">+</span> bBit <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            indexA<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            indexB<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            resultB<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> resultB<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定两个 01 字符串 <code>a</code> 和 <code>b</code> ，请计算它们的和，并以二进制字符串的形式输出。</p>\n<p>输入为 <strong>非空</strong> 字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: a &#x3D; &quot;11&quot;, b &#x3D; &quot;10&quot;\n输出: &quot;101&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: a &#x3D; &quot;1010&quot;, b &#x3D; &quot;1011&quot;\n输出: &quot;10101&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>每个字符串仅由字符 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code> 组成。</li>\n<li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li>\n<li>字符串如果不是 <code>&quot;0&quot;</code> ，就都不含前导零。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addBinary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">StringBuilder</span> resultB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> indexA <span class=\"token operator\">=</span> a <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> indexB <span class=\"token operator\">=</span> b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>indexA <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> indexB <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> aBit <span class=\"token operator\">=</span> indexA <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>indexA<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> bBit <span class=\"token operator\">=</span> indexB <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>indexB<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            resultB<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aBit <span class=\"token operator\">+</span> bBit <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry <span class=\"token operator\">+</span> aBit <span class=\"token operator\">+</span> bBit <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            indexA<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            indexB<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            resultB<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> resultB<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-3","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-07T03:14:37.000Z","_content":"\n给定一个非负整数 `n` ，请计算 `0` 到 `n` 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。\n\n\n\n**示例 1:**\n\n```\n输入: n = 2\n输出: [0,1,1]\n解释: \n0 --> 0\n1 --> 1\n2 --> 10\n```\n\n**示例 2:**\n\n```\n输入: n = 5\n输出: [0,1,1,2,1,2]\n解释:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n```\n\n\n\n**说明 :**\n\n- `0 <= n <= 105`\n\n\n\n**进阶:**\n\n- 给出时间复杂度为 `O(n*sizeof(integer))` 的解答非常容易。但你可以在线性时间 `O(n)` 内用一趟扫描做到吗？\n- 要求算法的空间复杂度为 `O(n)` 。\n- 你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 `__builtin_popcount` ）来执行此操作。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] countBits(int n) {\n        int[] result = new int[n + 1];\n        result[0] = 0;\n        if (n == 0) {\n            return result;\n        }\n        result[1] = 1;\n\n        if (n == 1) {\n            return result;\n        }\n\n        for (int i = 2; i <= n; i++) {\n            result[i] = result[i >> 1] + (i & 1);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-3.md","raw":"---\ntitle: offer2-3\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-07 11:14:37\n---\n\n给定一个非负整数 `n` ，请计算 `0` 到 `n` 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。\n\n\n\n**示例 1:**\n\n```\n输入: n = 2\n输出: [0,1,1]\n解释: \n0 --> 0\n1 --> 1\n2 --> 10\n```\n\n**示例 2:**\n\n```\n输入: n = 5\n输出: [0,1,1,2,1,2]\n解释:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n```\n\n\n\n**说明 :**\n\n- `0 <= n <= 105`\n\n\n\n**进阶:**\n\n- 给出时间复杂度为 `O(n*sizeof(integer))` 的解答非常容易。但你可以在线性时间 `O(n)` 内用一趟扫描做到吗？\n- 要求算法的空间复杂度为 `O(n)` 。\n- 你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 `__builtin_popcount` ）来执行此操作。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] countBits(int n) {\n        int[] result = new int[n + 1];\n        result[0] = 0;\n        if (n == 0) {\n            return result;\n        }\n        result[1] = 1;\n\n        if (n == 1) {\n            return result;\n        }\n\n        for (int i = 2; i <= n; i++) {\n            result[i] = result[i >> 1] + (i & 1);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-3","published":1,"updated":"2023-03-07T03:46:30.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexpm09o0000kcuu4jq020j4","content":"<p>给定一个非负整数 <code>n</code> ，请计算 <code>0</code> 到 <code>n</code> 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 2\n输出: [0,1,1]\n解释: \n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n = 5\n输出: [0,1,1,2,1,2]\n解释:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明 :</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt;= 105</code></li>\n</ul>\n<p><strong>进阶:</strong></p>\n<ul>\n<li>给出时间复杂度为 <code>O(n*sizeof(integer))</code> 的解答非常容易。但你可以在线性时间 <code>O(n)</code> 内用一趟扫描做到吗？</li>\n<li>要求算法的空间复杂度为 <code>O(n)</code> 。</li>\n<li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 <code>__builtin_popcount</code> ）来执行此操作。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个非负整数 <code>n</code> ，请计算 <code>0</code> 到 <code>n</code> 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 2\n输出: [0,1,1]\n解释: \n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: n &#x3D; 5\n输出: [0,1,1,2,1,2]\n解释:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>说明 :</strong></p>\n<ul>\n<li><code>0 &lt;= n &lt;= 105</code></li>\n</ul>\n<p><strong>进阶:</strong></p>\n<ul>\n<li>给出时间复杂度为 <code>O(n*sizeof(integer))</code> 的解答非常容易。但你可以在线性时间 <code>O(n)</code> 内用一趟扫描做到吗？</li>\n<li>要求算法的空间复杂度为 <code>O(n)</code> 。</li>\n<li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 <code>__builtin_popcount</code> ）来执行此操作。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countBits</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>i <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-4","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-08T03:22:54.000Z","_content":"\n给你一个整数数组 `nums` ，除某个元素仅出现 **一次** 外，其余每个元素都恰出现 **三次 。**请你找出并返回那个只出现了一次的元素。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [2,2,3,2]\n输出：3\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,1,0,1,0,1,100]\n输出：100\n```\n\n\n\n**提示：**\n\n- `1 <= nums.length <= 3 * 104`\n- `-231 <= nums[i] <= 231 - 1`\n- `nums` 中，除某个元素仅出现 **一次** 外，其余每个元素都恰出现 **三次**\n\n\n\n**进阶：**你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int[] bitNum = new int[32];\n        for (int num : nums) {\n            for (int i = 0; i < 32; i++) {\n                bitNum[i] += (num & 1);\n                num = num >> 1;\n            }\n        }\n        int result = 0;\n        for (int i = 0; i < 32; i++) {\n            result = (result << 1) + (bitNum[31 - i] % 3);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-4.md","raw":"---\ntitle: offer2-4\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-08 11:22:54\n---\n\n给你一个整数数组 `nums` ，除某个元素仅出现 **一次** 外，其余每个元素都恰出现 **三次 。**请你找出并返回那个只出现了一次的元素。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [2,2,3,2]\n输出：3\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,1,0,1,0,1,100]\n输出：100\n```\n\n\n\n**提示：**\n\n- `1 <= nums.length <= 3 * 104`\n- `-231 <= nums[i] <= 231 - 1`\n- `nums` 中，除某个元素仅出现 **一次** 外，其余每个元素都恰出现 **三次**\n\n\n\n**进阶：**你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int singleNumber(int[] nums) {\n        int[] bitNum = new int[32];\n        for (int num : nums) {\n            for (int i = 0; i < 32; i++) {\n                bitNum[i] += (num & 1);\n                num = num >> 1;\n            }\n        }\n        int result = 0;\n        for (int i = 0; i < 32; i++) {\n            result = (result << 1) + (bitNum[31 - i] % 3);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-4","published":1,"updated":"2023-03-08T07:13:45.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clezcgcur0000t0uuccj63y7e","content":"<p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次 。</strong>请你找出并返回那个只出现了一次的元素。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [2,2,3,2]\n输出：3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [0,1,0,1,0,1,100]\n输出：100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>\n<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>\n<li><code>nums</code> 中，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong></li>\n</ul>\n<p><strong>进阶：</strong>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bitNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                bitNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                num <span class=\"token operator\">=</span> num <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>bitNum<span class=\"token punctuation\">[</span><span class=\"token number\">31</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次 。</strong>请你找出并返回那个只出现了一次的元素。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2,2,3,2]\n输出：3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [0,1,0,1,0,1,100]\n输出：100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>\n<li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li>\n<li><code>nums</code> 中，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong></li>\n</ul>\n<p><strong>进阶：</strong>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bitNum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                bitNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                num <span class=\"token operator\">=</span> num <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>bitNum<span class=\"token punctuation\">[</span><span class=\"token number\">31</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-5","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-09T03:50:56.000Z","_content":"\n给定一个字符串数组 `words`，请计算当两个字符串 `words[i]` 和 `words[j]` 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。\n\n\n\n**示例 1:**\n\n```\n输入: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"fxyz\",\"abcdef\"]\n输出: 16 \n解释: 这两个单词为 \"abcw\", \"fxyz\"。它们不包含相同字符，且长度的乘积最大。\n```\n\n**示例 2:**\n\n```\n输入: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n输出: 4 \n解释: 这两个单词为 \"ab\", \"cd\"。\n```\n\n**示例 3:**\n\n```\n输入: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n输出: 0 \n解释: 不存在这样的两个单词。\n```\n\n\n\n**提示：**\n\n- `2 <= words.length <= 1000`\n- `1 <= words[i].length <= 1000`\n- `words[i]` 仅包含小写字母\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProduct(String[] words) {\n        if (words == null || words.length == 0) {\n            return 0;\n        }\n        Map<String, Integer> wordMap = new HashMap<>();\n\n        for (String word : words) {\n            int bitNum = 0;\n\n            for (char ch : word.toCharArray()) {\n                bitNum = (bitNum | (1 << (ch - 'a')));\n            }\n\n            wordMap.put(word, bitNum);\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < words.length - 1; i++) {\n            for (int j = i + 1; j < words.length; j++) {\n                String one = words[i];\n                String two = words[j];\n\n                if ((wordMap.get(one) & wordMap.get(two)) == 0 && one.length() * two.length() > result) {\n                    result = one.length() * two.length();\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-5.md","raw":"---\ntitle: offer2-5\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-09 11:50:56\n---\n\n给定一个字符串数组 `words`，请计算当两个字符串 `words[i]` 和 `words[j]` 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。\n\n\n\n**示例 1:**\n\n```\n输入: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"fxyz\",\"abcdef\"]\n输出: 16 \n解释: 这两个单词为 \"abcw\", \"fxyz\"。它们不包含相同字符，且长度的乘积最大。\n```\n\n**示例 2:**\n\n```\n输入: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n输出: 4 \n解释: 这两个单词为 \"ab\", \"cd\"。\n```\n\n**示例 3:**\n\n```\n输入: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n输出: 0 \n解释: 不存在这样的两个单词。\n```\n\n\n\n**提示：**\n\n- `2 <= words.length <= 1000`\n- `1 <= words[i].length <= 1000`\n- `words[i]` 仅包含小写字母\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int maxProduct(String[] words) {\n        if (words == null || words.length == 0) {\n            return 0;\n        }\n        Map<String, Integer> wordMap = new HashMap<>();\n\n        for (String word : words) {\n            int bitNum = 0;\n\n            for (char ch : word.toCharArray()) {\n                bitNum = (bitNum | (1 << (ch - 'a')));\n            }\n\n            wordMap.put(word, bitNum);\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < words.length - 1; i++) {\n            for (int j = i + 1; j < words.length; j++) {\n                String one = words[i];\n                String two = words[j];\n\n                if ((wordMap.get(one) & wordMap.get(two)) == 0 && one.length() * two.length() > result) {\n                    result = one.length() * two.length();\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-5","published":1,"updated":"2023-03-10T06:29:36.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf25rekc00004suuh8x11fiy","content":"<p>给定一个字符串数组 <code>words</code>，请计算当两个字符串 <code>words[i]</code> 和 <code>words[j]</code> 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"fxyz\",\"abcdef\"]\n输出: 16 \n解释: 这两个单词为 \"abcw\", \"fxyz\"。它们不包含相同字符，且长度的乘积最大。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n输出: 4 \n解释: 这两个单词为 \"ab\", \"cd\"。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n输出: 0 \n解释: 不存在这样的两个单词。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= words.length &lt;= 1000</code></li>\n<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n<li><code>words[i]</code> 仅包含小写字母</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>words <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> words<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> wordMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> bitNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                bitNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bitNum <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            wordMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> bitNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">String</span> one <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> two <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wordMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> wordMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> one<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> two<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> one<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> two<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个字符串数组 <code>words</code>，请计算当两个字符串 <code>words[i]</code> 和 <code>words[j]</code> 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: words &#x3D; [&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;fxyz&quot;,&quot;abcdef&quot;]\n输出: 16 \n解释: 这两个单词为 &quot;abcw&quot;, &quot;fxyz&quot;。它们不包含相同字符，且长度的乘积最大。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: words &#x3D; [&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]\n输出: 4 \n解释: 这两个单词为 &quot;ab&quot;, &quot;cd&quot;。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: words &#x3D; [&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]\n输出: 0 \n解释: 不存在这样的两个单词。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= words.length &lt;= 1000</code></li>\n<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n<li><code>words[i]</code> 仅包含小写字母</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>words <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> words<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> wordMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> bitNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                bitNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bitNum <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            wordMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> bitNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">String</span> one <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> two <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wordMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> wordMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> one<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> two<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result <span class=\"token operator\">=</span> one<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> two<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-6","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-12T12:03:18.000Z","_content":"\n给定一个已按照 **升序排列** 的整数数组 `numbers` ，请你从数组中找出两个数满足相加之和等于目标数 `target` 。\n\n函数应该以长度为 `2` 的整数数组的形式返回这两个数的下标值*。*`numbers` 的下标 **从 0 开始计数** ，所以答案数组应当满足 `0 <= answer[0] < answer[1] < numbers.length` 。\n\n假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。\n\n\n\n**示例 1：**\n\n```\n输入：numbers = [1,2,4,6,10], target = 8\n输出：[1,3]\n解释：2 与 6 之和等于目标数 8 。因此 index1 = 1, index2 = 3 。\n```\n\n**示例 2：**\n\n```\n输入：numbers = [2,3,4], target = 6\n输出：[0,2]\n```\n\n**示例 3：**\n\n```\n输入：numbers = [-1,0], target = -1\n输出：[0,1]\n```\n\n\n\n**提示：**\n\n- `2 <= numbers.length <= 3 * 104`\n- `-1000 <= numbers[i] <= 1000`\n- `numbers` 按 **递增顺序** 排列\n- `-1000 <= target <= 1000`\n- 仅存在一个有效答案\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        if (numbers == null || numbers.length < 2) {\n            return null;\n        }\n\n        int start = 0, end = numbers.length - 1;\n\n        while (start < end) {\n            if (numbers[start] + numbers[end] == target) {\n                int[] result = new int[2];\n                result[0] = start;\n                result[1] = end;\n                return result;\n            } else if (numbers[start] + numbers[end] < target) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n\n        return null;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-6.md","raw":"---\ntitle: offer2-6\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-12 20:03:18\n---\n\n给定一个已按照 **升序排列** 的整数数组 `numbers` ，请你从数组中找出两个数满足相加之和等于目标数 `target` 。\n\n函数应该以长度为 `2` 的整数数组的形式返回这两个数的下标值*。*`numbers` 的下标 **从 0 开始计数** ，所以答案数组应当满足 `0 <= answer[0] < answer[1] < numbers.length` 。\n\n假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。\n\n\n\n**示例 1：**\n\n```\n输入：numbers = [1,2,4,6,10], target = 8\n输出：[1,3]\n解释：2 与 6 之和等于目标数 8 。因此 index1 = 1, index2 = 3 。\n```\n\n**示例 2：**\n\n```\n输入：numbers = [2,3,4], target = 6\n输出：[0,2]\n```\n\n**示例 3：**\n\n```\n输入：numbers = [-1,0], target = -1\n输出：[0,1]\n```\n\n\n\n**提示：**\n\n- `2 <= numbers.length <= 3 * 104`\n- `-1000 <= numbers[i] <= 1000`\n- `numbers` 按 **递增顺序** 排列\n- `-1000 <= target <= 1000`\n- 仅存在一个有效答案\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        if (numbers == null || numbers.length < 2) {\n            return null;\n        }\n\n        int start = 0, end = numbers.length - 1;\n\n        while (start < end) {\n            if (numbers[start] + numbers[end] == target) {\n                int[] result = new int[2];\n                result[0] = start;\n                result[1] = end;\n                return result;\n            } else if (numbers[start] + numbers[end] < target) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n\n        return null;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-6","published":1,"updated":"2023-03-12T15:02:43.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf5iyu400000ycuu8h6zcncl","content":"<p>给定一个已按照 <strong>升序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p>\n<p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 0 开始计数</strong> ，所以答案数组应当满足 <code>0 &lt;= answer[0] &lt; answer[1] &lt; numbers.length</code> 。</p>\n<p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：numbers = [1,2,4,6,10], target = 8\n输出：[1,3]\n解释：2 与 6 之和等于目标数 8 。因此 index1 = 1, index2 = 3 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：numbers = [2,3,4], target = 6\n输出：[0,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：numbers = [-1,0], target = -1\n输出：[0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li>\n<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n<li><code>numbers</code> 按 <strong>递增顺序</strong> 排列</li>\n<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n<li>仅存在一个有效答案</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个已按照 <strong>升序排列</strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p>\n<p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 0 开始计数</strong> ，所以答案数组应当满足 <code>0 &lt;= answer[0] &lt; answer[1] &lt; numbers.length</code> 。</p>\n<p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：numbers &#x3D; [1,2,4,6,10], target &#x3D; 8\n输出：[1,3]\n解释：2 与 6 之和等于目标数 8 。因此 index1 &#x3D; 1, index2 &#x3D; 3 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：numbers &#x3D; [2,3,4], target &#x3D; 6\n输出：[0,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：numbers &#x3D; [-1,0], target &#x3D; -1\n输出：[0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li>\n<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li>\n<li><code>numbers</code> 按 <strong>递增顺序</strong> 排列</li>\n<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n<li>仅存在一个有效答案</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-7","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-13T03:16:49.000Z","_content":"\n给你一个整数数组 `nums` ，判断是否存在三元组 `[nums[i], nums[j], nums[k]]` 满足 `i != j`、`i != k` 且 `j != k` ，同时还满足 `nums[i] + nums[j] + nums[k] == 0` 。请\n\n你返回所有和为 `0` 且不重复的三元组。\n\n**注意：**答案中不可以包含重复的三元组。\n\n\n\n\n\n**示例 1：**\n\n```\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n解释：\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,1,1]\n输出：[]\n解释：唯一可能的三元组和不为 0 。\n```\n\n**示例 3：**\n\n```\n输入：nums = [0,0,0]\n输出：[[0,0,0]]\n解释：唯一可能的三元组和为 0 。\n```\n\n\n\n**提示：**\n\n- `3 <= nums.length <= 3000`\n- `-105 <= nums[i] <= 105`\n\n```java\nimport java.util.HashSet;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        Arrays.sort(nums);\n        List<List<Integer>> result = new ArrayList<>();\n        Set<String> resutSet = new HashSet<>();\n\n        if (nums == null || nums.length == 0) {\n            return result;\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            findByOne(result, resutSet, nums, i, -nums[i]);\n        }\n\n        return result;\n    }\n\n    void findByOne(List<List<Integer>> result, Set<String> resutSet, int[] nums, int index, int target) {\n        int start = 0;\n        int end = index - 1;\n\n        while (start < end) {\n            if (nums[start] + nums[end] == target) {\n                String resultKey = \"\" + nums[start] + \"_\" + nums[end] + \"_\" + -target;\n                if (resutSet.contains(resultKey)) {\n                    start++;\n                    continue;\n                }\n                resutSet.add(resultKey);\n                List<Integer> oneList = new ArrayList<>();\n                oneList.add(nums[start]);\n                oneList.add(nums[end]);\n                oneList.add(-target);\n                result.add(oneList);\n                start++;\n            } else if (nums[start] + nums[end] < target) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-7.md","raw":"---\ntitle: offer2-7\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-13 11:16:49\n---\n\n给你一个整数数组 `nums` ，判断是否存在三元组 `[nums[i], nums[j], nums[k]]` 满足 `i != j`、`i != k` 且 `j != k` ，同时还满足 `nums[i] + nums[j] + nums[k] == 0` 。请\n\n你返回所有和为 `0` 且不重复的三元组。\n\n**注意：**答案中不可以包含重复的三元组。\n\n\n\n\n\n**示例 1：**\n\n```\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n解释：\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,1,1]\n输出：[]\n解释：唯一可能的三元组和不为 0 。\n```\n\n**示例 3：**\n\n```\n输入：nums = [0,0,0]\n输出：[[0,0,0]]\n解释：唯一可能的三元组和为 0 。\n```\n\n\n\n**提示：**\n\n- `3 <= nums.length <= 3000`\n- `-105 <= nums[i] <= 105`\n\n```java\nimport java.util.HashSet;\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        Arrays.sort(nums);\n        List<List<Integer>> result = new ArrayList<>();\n        Set<String> resutSet = new HashSet<>();\n\n        if (nums == null || nums.length == 0) {\n            return result;\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n            findByOne(result, resutSet, nums, i, -nums[i]);\n        }\n\n        return result;\n    }\n\n    void findByOne(List<List<Integer>> result, Set<String> resutSet, int[] nums, int index, int target) {\n        int start = 0;\n        int end = index - 1;\n\n        while (start < end) {\n            if (nums[start] + nums[end] == target) {\n                String resultKey = \"\" + nums[start] + \"_\" + nums[end] + \"_\" + -target;\n                if (resutSet.contains(resultKey)) {\n                    start++;\n                    continue;\n                }\n                resutSet.add(resultKey);\n                List<Integer> oneList = new ArrayList<>();\n                oneList.add(nums[start]);\n                oneList.add(nums[end]);\n                oneList.add(-target);\n                result.add(oneList);\n                start++;\n            } else if (nums[start] + nums[end] < target) {\n                start++;\n            } else {\n                end--;\n            }\n        }\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-7","published":1,"updated":"2023-03-13T08:44:01.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf6kvq7e0000nguu491b0zjf","content":"<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p>\n<p>你返回所有和为 <code>0</code> 且不重复的三元组。</p>\n<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n解释：\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [0,1,1]\n输出：[]\n解释：唯一可能的三元组和不为 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [0,0,0]\n输出：[[0,0,0]]\n解释：唯一可能的三元组和为 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> resutSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">findByOne</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> resutSet<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">findByOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> result<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> resutSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">String</span> resultKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span>target<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resutSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>resultKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                resutSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>resultKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> oneList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p>\n<p>你返回所有和为 <code>0</code> 且不重复的三元组。</p>\n<p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n解释：\nnums[0] + nums[1] + nums[2] &#x3D; (-1) + 0 + 1 &#x3D; 0 。\nnums[1] + nums[2] + nums[4] &#x3D; 0 + 1 + (-1) &#x3D; 0 。\nnums[0] + nums[3] + nums[4] &#x3D; (-1) + 2 + (-1) &#x3D; 0 。\n不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n注意，输出的顺序和三元组的顺序并不重要。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [0,1,1]\n输出：[]\n解释：唯一可能的三元组和不为 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [0,0,0]\n输出：[[0,0,0]]\n解释：唯一可能的三元组和为 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> resutSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">findByOne</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> resutSet<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">findByOne</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> resutSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">String</span> resultKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span>target<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resutSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>resultKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                resutSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>resultKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> oneList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                oneList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>oneList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-8","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-14T02:52:21.000Z","_content":"\n给定一个含有 `n` 个正整数的数组和一个正整数 `target` **。**\n\n找出该数组中满足其和 `≥ target` 的长度最小的 **连续子数组** `[numsl, numsl+1, ..., numsr-1, numsr]` ，并返回其长度**。**如果不存在符合条件的子数组，返回 `0` 。\n\n\n\n**示例 1：**\n\n```\n输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n\n**示例 2：**\n\n```\n输入：target = 4, nums = [1,4,4]\n输出：1\n```\n\n**示例 3：**\n\n```\n输入：target = 11, nums = [1,1,1,1,1,1,1,1]\n输出：0\n```\n\n\n\n提示：\n\n- `1 <= target <= 109`\n- `1 <= nums.length <= 105`\n- `1 <= nums[i] <= 105`\n\n\n\n进阶：\n\n- 如果你已经实现 `O(n)` 时间复杂度的解法, 请尝试设计一个 `O(n log(n))` 时间复杂度的解法。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int start = 0;\n        int end = -1;\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n\n        for (int i = 0; i < nums.length; i++) {\n            end = i;\n            sum += nums[i];\n\n            if (sum >= target) {\n                while (sum >= target) {\n                    sum -= nums[start];\n                    start++;\n                }\n\n                start--;\n                sum += nums[start];\n                if (end - start + 1 < min) {\n                    min = end - start + 1;\n                }\n            }\n        }\n\n        return min == Integer.MAX_VALUE ? 0 : min;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-8.md","raw":"---\ntitle: offer2-8\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-14 10:52:21\n---\n\n给定一个含有 `n` 个正整数的数组和一个正整数 `target` **。**\n\n找出该数组中满足其和 `≥ target` 的长度最小的 **连续子数组** `[numsl, numsl+1, ..., numsr-1, numsr]` ，并返回其长度**。**如果不存在符合条件的子数组，返回 `0` 。\n\n\n\n**示例 1：**\n\n```\n输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n\n**示例 2：**\n\n```\n输入：target = 4, nums = [1,4,4]\n输出：1\n```\n\n**示例 3：**\n\n```\n输入：target = 11, nums = [1,1,1,1,1,1,1,1]\n输出：0\n```\n\n\n\n提示：\n\n- `1 <= target <= 109`\n- `1 <= nums.length <= 105`\n- `1 <= nums[i] <= 105`\n\n\n\n进阶：\n\n- 如果你已经实现 `O(n)` 时间复杂度的解法, 请尝试设计一个 `O(n log(n))` 时间复杂度的解法。\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int start = 0;\n        int end = -1;\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n\n        for (int i = 0; i < nums.length; i++) {\n            end = i;\n            sum += nums[i];\n\n            if (sum >= target) {\n                while (sum >= target) {\n                    sum -= nums[start];\n                    start++;\n                }\n\n                start--;\n                sum += nums[start];\n                if (end - start + 1 < min) {\n                    min = end - start + 1;\n                }\n            }\n        }\n\n        return min == Integer.MAX_VALUE ? 0 : min;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-8","published":1,"updated":"2023-03-14T06:16:28.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf7v1tum0000nguu4gc97e1s","content":"<p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p>\n<p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target = 4, nums = [1,4,4]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target = 11, nums = [1,1,1,1,1,1,1,1]\n输出：0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= target &lt;= 109</code></li>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<p>进阶：</p>\n<ul>\n<li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minSubArrayLen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            end <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&gt;=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&gt;=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sum <span class=\"token operator\">-=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                start<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    min <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> min <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p>\n<p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target &#x3D; 4, nums &#x3D; [1,4,4]\n输出：1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：target &#x3D; 11, nums &#x3D; [1,1,1,1,1,1,1,1]\n输出：0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= target &lt;= 109</code></li>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<p>进阶：</p>\n<ul>\n<li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minSubArrayLen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            end <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    sum <span class=\"token operator\">-=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                start<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    min <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> min <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-9","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-15T02:53:51.000Z","_content":"\n给定一个正整数数组 `nums`和整数 `k` ，请找出该数组内乘积小于 `k` 的连续的子数组的个数。\n\n\n\n**示例 1:**\n\n```\n输入: nums = [10,5,2,6], k = 100\n输出: 8\n解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。\n```\n\n**示例 2:**\n\n```\n输入: nums = [1,2,3], k = 0\n输出: 0\n```\n\n\n\n**提示:**\n\n- `1 <= nums.length <= 3 * 104`\n- `1 <= nums[i] <= 1000`\n- `0 <= k <= 106`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        int start = 0;\n        int end = 0;\n        int result = 0;\n        int product = 1;\n\n        while (end < nums.length) {\n            product *= nums[end];\n\n            while (start <= end && product >= k) {\n                product /= nums[start];\n                start++;\n            }\n\n            end++;\n            result += (end - start);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-9.md","raw":"---\ntitle: offer2-9\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-15 10:53:51\n---\n\n给定一个正整数数组 `nums`和整数 `k` ，请找出该数组内乘积小于 `k` 的连续的子数组的个数。\n\n\n\n**示例 1:**\n\n```\n输入: nums = [10,5,2,6], k = 100\n输出: 8\n解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。\n```\n\n**示例 2:**\n\n```\n输入: nums = [1,2,3], k = 0\n输出: 0\n```\n\n\n\n**提示:**\n\n- `1 <= nums.length <= 3 * 104`\n- `1 <= nums[i] <= 1000`\n- `0 <= k <= 106`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        int start = 0;\n        int end = 0;\n        int result = 0;\n        int product = 1;\n\n        while (end < nums.length) {\n            product *= nums[end];\n\n            while (start <= end && product >= k) {\n                product /= nums[start];\n                start++;\n            }\n\n            end++;\n            result += (end - start);\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-9","published":1,"updated":"2023-03-15T06:10:58.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9aavn5000028uuhr8q9wyo","content":"<p>给定一个正整数数组 <code>nums</code>和整数 <code>k</code> ，请找出该数组内乘积小于 <code>k</code> 的连续的子数组的个数。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums = [10,5,2,6], k = 100\n输出: 8\n解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums = [1,2,3], k = 0\n输出: 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n<li><code>0 &lt;= k &lt;= 106</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSubarrayProductLessThanK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            product <span class=\"token operator\">*=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end <span class=\"token operator\">&amp;&amp;</span> product <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                product <span class=\"token operator\">/=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            end<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个正整数数组 <code>nums</code>和整数 <code>k</code> ，请找出该数组内乘积小于 <code>k</code> 的连续的子数组的个数。</p>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums &#x3D; [10,5,2,6], k &#x3D; 100\n输出: 8\n解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums &#x3D; [1,2,3], k &#x3D; 0\n输出: 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n<li><code>0 &lt;= k &lt;= 106</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSubarrayProductLessThanK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            product <span class=\"token operator\">*=</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end <span class=\"token operator\">&amp;&amp;</span> product <span class=\"token operator\">>=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                product <span class=\"token operator\">/=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            end<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-10","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-16T03:03:22.000Z","_content":"\n给定一个整数数组和一个整数 `k` **，**请找到该数组中和为 `k` 的连续子数组的个数。\n\n\n\n**示例 1：**\n\n```\n输入:nums = [1,1,1], k = 2\n输出: 2\n解释: 此题 [1,1] 与 [1,1] 为两种不同的情况\n```\n\n**示例 2：**\n\n```\n输入:nums = [1,2,3], k = 3\n输出: 2\n```\n\n\n\n**提示:**\n\n- `1 <= nums.length <= 2 * 104`\n- `-1000 <= nums[i] <= 1000`\n- `-107 <= k <= 107`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int subarraySum(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        int[] sums = new int[nums.length];\n        int sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (i == 0) {\n                sums[i] = nums[i];\n            } else {\n                sums[i] = sums[i - 1] + nums[i];\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (sums[i] == k) {\n                result++;\n            }\n\n            for (int j = 0; j < i; j++) {\n                if (sums[i] - sums[j] == k) {\n                    result++;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-10.md","raw":"---\ntitle: offer2-10\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-16 11:03:22\n---\n\n给定一个整数数组和一个整数 `k` **，**请找到该数组中和为 `k` 的连续子数组的个数。\n\n\n\n**示例 1：**\n\n```\n输入:nums = [1,1,1], k = 2\n输出: 2\n解释: 此题 [1,1] 与 [1,1] 为两种不同的情况\n```\n\n**示例 2：**\n\n```\n输入:nums = [1,2,3], k = 3\n输出: 2\n```\n\n\n\n**提示:**\n\n- `1 <= nums.length <= 2 * 104`\n- `-1000 <= nums[i] <= 1000`\n- `-107 <= k <= 107`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int subarraySum(int[] nums, int k) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        int[] sums = new int[nums.length];\n        int sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (i == 0) {\n                sums[i] = nums[i];\n            } else {\n                sums[i] = sums[i - 1] + nums[i];\n            }\n        }\n\n        int result = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (sums[i] == k) {\n                result++;\n            }\n\n            for (int j = 0; j < i; j++) {\n                if (sums[i] - sums[j] == k) {\n                    result++;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-10","published":1,"updated":"2023-03-16T07:11:20.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfarw3rp0000n4uu73yog309","content":"<p>给定一个整数数组和一个整数 <code>k</code> <strong>，</strong>请找到该数组中和为 <code>k</code> 的连续子数组的个数。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:nums = [1,1,1], k = 2\n输出: 2\n解释: 此题 [1,1] 与 [1,1] 为两种不同的情况<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:nums = [1,2,3], k = 3\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li>\n<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n<li><code>-107 &lt;= k &lt;= 107</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个整数数组和一个整数 <code>k</code> <strong>，</strong>请找到该数组中和为 <code>k</code> 的连续子数组的个数。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:nums &#x3D; [1,1,1], k &#x3D; 2\n输出: 2\n解释: 此题 [1,1] 与 [1,1] 为两种不同的情况<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入:nums &#x3D; [1,2,3], k &#x3D; 3\n输出: 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li>\n<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n<li><code>-107 &lt;= k &lt;= 107</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">subarraySum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-11","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-17T03:01:58.000Z","_content":"\n给定一个二进制数组 `nums` , 找到含有相同数量的 `0` 和 `1` 的最长连续子数组，并返回该子数组的长度。\n\n\n\n**示例 1：**\n\n```\n输入: nums = [0,1]\n输出: 2\n说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。\n```\n\n**示例 2：**\n\n```\n输入: nums = [0,1,0]\n输出: 2\n说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。\n```\n\n\n\n**提示：**\n\n- `1 <= nums.length <= 105`\n- `nums[i]` 不是 `0` 就是 `1`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findMaxLength(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        int[] ones = new int[nums.length + 1];\n        int result = 0;\n\n        for (int i = 1; i <= nums.length; i++) {\n            if (nums[i - 1] == 1) {\n                ones[i] = ones[i - 1] + 1;\n            } else {\n                ones[i] = ones[i - 1];\n            }\n        }\n        for (int i = nums.length; i > 0; i--) {\n            if (i <= result) {\n                break;\n            }\n            for (int j = i % 2 == 1 ? 1 : 0; j < i; j+=2) {\n                if ((i - j) <= result) {\n                    break;\n                }\n                if ((i - j) / 2 == ones[i] - ones[j] && (i - j) > result) {\n                    result = i - j;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-11.md","raw":"---\ntitle: offer2-11\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-17 11:01:58\n---\n\n给定一个二进制数组 `nums` , 找到含有相同数量的 `0` 和 `1` 的最长连续子数组，并返回该子数组的长度。\n\n\n\n**示例 1：**\n\n```\n输入: nums = [0,1]\n输出: 2\n说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。\n```\n\n**示例 2：**\n\n```\n输入: nums = [0,1,0]\n输出: 2\n说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。\n```\n\n\n\n**提示：**\n\n- `1 <= nums.length <= 105`\n- `nums[i]` 不是 `0` 就是 `1`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int findMaxLength(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n\n        int[] ones = new int[nums.length + 1];\n        int result = 0;\n\n        for (int i = 1; i <= nums.length; i++) {\n            if (nums[i - 1] == 1) {\n                ones[i] = ones[i - 1] + 1;\n            } else {\n                ones[i] = ones[i - 1];\n            }\n        }\n        for (int i = nums.length; i > 0; i--) {\n            if (i <= result) {\n                break;\n            }\n            for (int j = i % 2 == 1 ? 1 : 0; j < i; j+=2) {\n                if ((i - j) <= result) {\n                    break;\n                }\n                if ((i - j) / 2 == ones[i] - ones[j] && (i - j) > result) {\n                    result = i - j;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-11","published":1,"updated":"2023-03-17T05:38:41.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfc420j4000048uua11q62op","content":"<p>给定一个二进制数组 <code>nums</code> , 找到含有相同数量的 <code>0</code> 和 <code>1</code> 的最长连续子数组，并返回该子数组的长度。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums = [0,1]\n输出: 2\n说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums = [0,1,0]\n输出: 2\n说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ones <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ones<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ones<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                ones<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ones<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> ones<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> ones<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个二进制数组 <code>nums</code> , 找到含有相同数量的 <code>0</code> 和 <code>1</code> 的最长连续子数组，并返回该子数组的长度。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums &#x3D; [0,1]\n输出: 2\n说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入: nums &#x3D; [0,1,0]\n输出: 2\n说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ones <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ones<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ones<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                ones<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ones<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> ones<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> ones<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    result <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"offer2-12","author":"倪春恩","top":false,"hide":false,"cover":true,"toc":false,"date":"2023-03-19T03:23:46.000Z","_content":"\n给你一个整数数组 `nums` ，请计算数组的 **中心下标** 。\n\n数组 **中心下标** 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。\n\n如果中心下标位于数组最左端，那么左侧数之和视为 `0` ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。\n\n如果数组有多个中心下标，应该返回 **最靠近左边** 的那一个。如果数组不存在中心下标，返回 `-1` 。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [1,7,3,6,5,6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。\n```\n\n**示例 3：**\n\n```\n输入：nums = [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。\n```\n\n\n\n**提示：**\n\n- `1 <= nums.length <= 104`\n- `-1000 <= nums[i] <= 1000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int pivotIndex(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return -1;\n        }\n\n        int[] right = new int[nums.length];\n\n        for (int i = nums.length - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + nums[i + 1];\n        }\n\n        int leftSum = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (leftSum == right[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n\n        return -1;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","source":"_posts/offer2-12.md","raw":"---\ntitle: offer2-12\nauthor: 倪春恩\ntop: false\nhide: false\ncover: true\ntoc: false\ncategories: leetcode\ntags:\n  - leetcode\ndate: 2023-03-19 11:23:46\n---\n\n给你一个整数数组 `nums` ，请计算数组的 **中心下标** 。\n\n数组 **中心下标** 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。\n\n如果中心下标位于数组最左端，那么左侧数之和视为 `0` ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。\n\n如果数组有多个中心下标，应该返回 **最靠近左边** 的那一个。如果数组不存在中心下标，返回 `-1` 。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [1,7,3,6,5,6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。\n```\n\n**示例 3：**\n\n```\n输入：nums = [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。\n```\n\n\n\n**提示：**\n\n- `1 <= nums.length <= 104`\n- `-1000 <= nums[i] <= 1000`\n\n```java\n\n//leetcode submit region begin(Prohibit modification and deletion)\nclass Solution {\n    public int pivotIndex(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return -1;\n        }\n\n        int[] right = new int[nums.length];\n\n        for (int i = nums.length - 2; i >= 0; i--) {\n            right[i] = right[i + 1] + nums[i + 1];\n        }\n\n        int leftSum = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (leftSum == right[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n\n        return -1;\n\n    }\n}\n//leetcode submit region end(Prohibit modification and deletion)\n```\n","slug":"offer2-12","published":1,"updated":"2023-03-19T06:47:11.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clff1cktz0000l8uu0ukn6vpc","content":"<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标</strong> 。</p>\n<p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>\n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [1,7,3,6,5,6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums = [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> leftSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftSum <span class=\"token operator\">==</span> right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            leftSum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标</strong> 。</p>\n<p>数组 <strong>中心下标</strong> 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>\n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1,7,3,6,5,6]\n输出：3\n解释：\n中心下标是 3 。\n左侧数之和 sum &#x3D; nums[0] + nums[1] + nums[2] &#x3D; 1 + 7 + 3 &#x3D; 11 ，\n右侧数之和 sum &#x3D; nums[4] + nums[5] &#x3D; 5 + 6 &#x3D; 11 ，二者相等。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心下标。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：nums &#x3D; [2, 1, -1]\n输出：0\n解释：\n中心下标是 0 。\n左侧数之和 sum &#x3D; 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum &#x3D; nums[1] + nums[2] &#x3D; 1 + -1 &#x3D; 0 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token comment\">//leetcode submit region begin(Prohibit modification and deletion)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> leftSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftSum <span class=\"token operator\">==</span> right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            leftSum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//leetcode submit region end(Prohibit modification and deletion)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cldo5tby8000b3suu0swn3jpg","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyd000k3suube1afo8f"},{"post_id":"cldo5tby100033suu5ciufeli","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbye000p3suu9w29fut0"},{"post_id":"cldo5tby9000d3suuf2hybeto","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyg000s3suud35z2o6m"},{"post_id":"cldo5tbyb000h3suu8i7u95k1","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyg000v3suu6v970knh"},{"post_id":"cldo5tby400053suu0l8ca3r0","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyh000y3suu0q3bbcy2"},{"post_id":"cldo5tbyc000j3suu3tqfaw7b","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyi00113suuc07w1hpm"},{"post_id":"cldo5tbyd000o3suufqzhhagq","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyi00143suu4p46g9ub"},{"post_id":"cldo5tby700093suu54py3nhi","category_id":"cldo5tbyd000l3suu07m417h4","_id":"cldo5tbyj00173suu0aokglpa"},{"post_id":"cldo5tbyf000r3suudr6w8fso","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyk001a3suubzez78w2"},{"post_id":"cldo5tbyg000u3suu7npf2udi","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyk001d3suudhrn4g00"},{"post_id":"cldo5tbyh000x3suud1vrcv6s","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyl001g3suu7by43ils"},{"post_id":"cldo5tbyh00103suu95wbghol","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbym001j3suufowq4tfy"},{"post_id":"cldo5tbyi00133suu054k8z2w","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyn001m3suu660529nh"},{"post_id":"cldo5tbyj00163suu7qth5mcp","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyn001p3suudmre15ot"},{"post_id":"cldo5tbyj00193suu1phk5rbx","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyo001s3suu7uo8bf9b"},{"post_id":"cldo5tbyk001c3suucdveh082","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyo001v3suu5dyr6rb4"},{"post_id":"cldo5tbyl001f3suuf5v9c5u7","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyp001y3suu13mwau74"},{"post_id":"cldo5tbym001i3suu5l5iaw7f","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyp00213suu3gu87b93"},{"post_id":"cldo5tbym001l3suu86857y55","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyq00243suu2rupb0ic"},{"post_id":"cldo5tbyn001o3suubequ8mbi","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyr00273suuavdgcgsg"},{"post_id":"cldo5tbyn001r3suu02kch0sc","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyr002a3suugewqa63n"},{"post_id":"cldo5tbyo001u3suue4po54ua","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbys002d3suu2w9f28df"},{"post_id":"cldo5tbyp001x3suu8exs6dd9","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbys002g3suu9i8pan58"},{"post_id":"cldo5tbyp00203suug7mz2elg","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyt002j3suuekmucp15"},{"post_id":"cldo5tbyq00233suucjdy4n8p","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyu002m3suu5pgrai7a"},{"post_id":"cldo5tbyq00263suuc6rhazxt","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyv002p3suu8tk6fiyc"},{"post_id":"cldo5tbyr00293suu9l4j008j","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyw002s3suu7pll87p1"},{"post_id":"cldo5tbyr002c3suufgkxh2h5","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbyy002v3suu7nbncg86"},{"post_id":"cldo5tbys002f3suuefn42s0y","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbz3002y3suuedx3geec"},{"post_id":"cldo5tbyt002i3suubyqwbrww","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbz500313suueg0n1wht"},{"post_id":"cldo5tbyt002l3suu3kawdce2","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbz700343suuhdzrboap"},{"post_id":"cldo5tbyu002o3suuexwa1qib","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbz800373suu4s7f5m9p"},{"post_id":"cldo5tbyv002r3suua3mo0ubb","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbza003a3suu96xb3gcs"},{"post_id":"cldo5tbyw002u3suu09n6f2fo","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbze003d3suudmtb38a5"},{"post_id":"cldo5tbz1002x3suu54e1geli","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzf003g3suu4rkf18gx"},{"post_id":"cldo5tbz300303suu30w74e3h","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzg003j3suue64lbbqj"},{"post_id":"cldo5tbz600333suub1hq651t","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzh003m3suu0r1y9mab"},{"post_id":"cldo5tbz700363suu7itq11r8","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzh003p3suu4wp6b4xp"},{"post_id":"cldo5tbz900393suu0v5vbgbi","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzi003s3suueucugt3j"},{"post_id":"cldo5tbza003c3suubf61dhez","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzj003v3suucmpa90lh"},{"post_id":"cldo5tbzf003f3suu0oyyg80t","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzj003y3suu9kqrc5d1"},{"post_id":"cldo5tbzf003i3suu9z3174do","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzk00413suu6tv58baj"},{"post_id":"cldo5tbzg003l3suudblq8s6d","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzl00443suugej7dgx3"},{"post_id":"cldo5tbzh003o3suu3q7p2386","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzm00473suu8mfv3y8y"},{"post_id":"cldo5tbzi003r3suubjtsg6yy","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzn004a3suu2uc7do41"},{"post_id":"cldo5tbzi003u3suud3qsb4br","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzn004d3suu9lzcgrzb"},{"post_id":"cldo5tbzj003x3suu01pvc30d","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzo004g3suufdh7dx18"},{"post_id":"cldo5tbzk00403suu3wb510ie","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzo004j3suu8k9wdcej"},{"post_id":"cldo5tbzk00433suu4tb9edcw","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzp004m3suudftphj7s"},{"post_id":"cldo5tbzl00463suudeka8cle","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzq004p3suu0yp05yp2"},{"post_id":"cldo5tbzm00493suu94uy8dnl","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzq004s3suu0pdh1719"},{"post_id":"cldo5tbzn004c3suub2j3bnj1","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzr004v3suudce8f0zh"},{"post_id":"cldo5tbzo004f3suuht26eu9b","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzr004y3suug8q84svg"},{"post_id":"cldo5tbzo004i3suud8062fbc","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzs00513suu5f2p2y8l"},{"post_id":"cldo5tbzp004l3suu0qpx542i","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzt00543suu3b62epjx"},{"post_id":"cldo5tbzp004o3suubq8b6eiq","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzt00573suuaun5cmtg"},{"post_id":"cldo5tbzq004r3suub4nm30ev","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzu005a3suu5ducfkf6"},{"post_id":"cldo5tbzq004u3suu7pmsbrtr","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzv005d3suu6ijaeoed"},{"post_id":"cldo5tbzr004x3suu07lg860h","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzv005g3suubusg77vt"},{"post_id":"cldo5tbzr00503suu8vgt2k69","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzw005j3suuawvq9eef"},{"post_id":"cldo5tbzs00533suu02sg88yz","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzw005m3suu9lfkbb87"},{"post_id":"cldo5tbzt00563suudv6i1ypx","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzx005p3suu3sf145he"},{"post_id":"cldo5tbzu00593suud21vamn1","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzx005s3suuex1xbj7i"},{"post_id":"cldo5tbzu005c3suu65rwd9px","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzy005v3suu3aye4hel"},{"post_id":"cldo5tbzv005f3suuawhe5l9j","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzz005y3suu9s768aww"},{"post_id":"cldo5tbzv005i3suucxyv3mdc","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tbzz00613suu97ldctnw"},{"post_id":"cldo5tbzw005l3suu06697rs9","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0000643suub6984cu4"},{"post_id":"cldo5tbzx005o3suucq7r2pq4","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0100673suu4i5d1a0h"},{"post_id":"cldo5tbzx005r3suu8mn4do7j","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc01006a3suuh6ax2pgo"},{"post_id":"cldo5tbzy005u3suuezvmcsag","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc02006d3suudl2ha8dw"},{"post_id":"cldo5tbzy005x3suue048e37y","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc02006g3suu4k9uh0nf"},{"post_id":"cldo5tbzz00603suufel76h0l","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc03006j3suu28ji20as"},{"post_id":"cldo5tc0000633suu86jrf0op","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc03006m3suu6z3eh5f1"},{"post_id":"cldo5tc0000663suuc3eh106h","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc04006p3suubckh94ee"},{"post_id":"cldo5tc0100693suufm3peqyp","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc04006s3suue30u49bp"},{"post_id":"cldo5tc01006c3suu4phfgn4z","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc05006v3suue7m041pk"},{"post_id":"cldo5tc02006f3suudun5hwio","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc05006y3suucziqe3y3"},{"post_id":"cldo5tc02006i3suuh0cc0ctn","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0600713suugr2g1u8m"},{"post_id":"cldo5tc03006l3suu7nnr60tc","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0600743suu6s425u9d"},{"post_id":"cldo5tc03006o3suu2xhecd29","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0700773suudlfkajtl"},{"post_id":"cldo5tc04006r3suud3ux0jh9","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc07007a3suu4skvgtqv"},{"post_id":"cldo5tc04006u3suu1zbr2o1v","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc08007d3suuf9v45ti7"},{"post_id":"cldo5tc05006x3suu2ye7d5fy","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc08007g3suu7c79ddo9"},{"post_id":"cldo5tc0500703suu9f2v68pr","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc09007j3suufyezgpf4"},{"post_id":"cldo5tc0600733suu0s5ngk95","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0a007m3suu0ulz65xr"},{"post_id":"cldo5tc0600763suuf9pxfh6x","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0a007p3suub7migmu9"},{"post_id":"cldo5tc0700793suu8h1o0a8y","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0b007s3suucdkjbpjc"},{"post_id":"cldo5tc08007c3suu18d85ah6","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0b007v3suu7ewt6pwu"},{"post_id":"cldo5tc08007f3suu8btpbhpk","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0c007y3suud57y2obt"},{"post_id":"cldo5tc09007i3suu1v1gf2rc","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0c00813suug3ey3cm2"},{"post_id":"cldo5tc09007l3suu61xvbw94","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0f00843suua2214f28"},{"post_id":"cldo5tc0a007o3suuhsaw8dx0","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0g00873suuf8h9bs0y"},{"post_id":"cldo5tc0a007r3suu5kn4aact","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0g008a3suu7pj1c9ko"},{"post_id":"cldo5tc0b007u3suub14a41rv","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0h008f3suu7q0mc7rn"},{"post_id":"cldo5tc0b007x3suu6bqcfv3r","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0i008i3suu5i3b7zsz"},{"post_id":"cldo5tc0c00803suuf0r08oy9","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0j008l3suudkdc9nro"},{"post_id":"cldo5tc0d00833suu2dex2dvi","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0j008o3suu8uhjcb2i"},{"post_id":"cldo5tc0g00893suu8cqj8sp6","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0k008r3suu8wf05dsm"},{"post_id":"cldo5tc0h008e3suu5o4203yf","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0l008u3suuaocs5uca"},{"post_id":"cldo5tc0i008h3suudj1i3wgv","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0l008x3suu2pw42lqj"},{"post_id":"cldo5tc0f00863suue2erhur0","category_id":"cldo5tc0g008b3suu05wg8hho","_id":"cldo5tc0m00903suubk9rae86"},{"post_id":"cldo5tc0i008k3suu0sgsc027","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0m00933suu4w5w9oni"},{"post_id":"cldo5tc0j008n3suu682c1rl6","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0n00963suu2hywgonj"},{"post_id":"cldo5tc0k008q3suufzc2ei14","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0n00993suu3v058w6b"},{"post_id":"cldo5tc0k008t3suu82xjbsfb","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0o009c3suu74vxchji"},{"post_id":"cldo5tc0l008w3suubqp173fu","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0o009f3suu3fpigus4"},{"post_id":"cldo5tc0l008z3suuh0gv2dm3","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0p009i3suu3fkk1ozx"},{"post_id":"cldo5tc0m00923suu8n23d1l0","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0p009l3suu98wv232d"},{"post_id":"cldo5tc0m00953suugol05d76","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0q009o3suu6e5q0rfw"},{"post_id":"cldo5tc0n00983suu2p9h4hdg","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0r009r3suu2sws7jxo"},{"post_id":"cldo5tc0n009b3suuh53ff6w0","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0r009u3suudk9n45rr"},{"post_id":"cldo5tc0o009e3suuefp801cd","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0s009x3suuagx867q5"},{"post_id":"cldo5tc0o009h3suu4ed9d7vj","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0t00a03suudocw7th1"},{"post_id":"cldo5tc0p009k3suucgu02r53","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0t00a33suu1xr902vf"},{"post_id":"cldo5tc0q009n3suu67g08ih6","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0u00a63suuc4xkhiqy"},{"post_id":"cldo5tc0q009q3suu2bcn26lc","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0v00a93suuadi58m0w"},{"post_id":"cldo5tc0r009t3suu4lwifkvs","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0v00ac3suufq6b7p6u"},{"post_id":"cldo5tc0s009w3suu2y59c55p","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0w00af3suuccdj5qql"},{"post_id":"cldo5tc0s009z3suubpuqdbt0","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0x00ai3suu8joo9ibt"},{"post_id":"cldo5tc0t00a23suug1pvhxik","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0x00al3suu79rwbpjb"},{"post_id":"cldo5tc0u00a53suufrhp2s01","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0y00ao3suucwyt9vi6"},{"post_id":"cldo5tc0u00a83suub391ah69","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0y00ar3suu9euod44o"},{"post_id":"cldo5tc0v00ab3suu7l4gavb3","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0z00au3suu8zjbfijn"},{"post_id":"cldo5tc0v00ae3suue7s749qm","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc0z00ax3suugzmv11zq"},{"post_id":"cldo5tc0w00ah3suu64ptgy7a","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1000b03suu2jni3ajn"},{"post_id":"cldo5tc0x00ak3suu98zaedue","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1100b33suu0bpy6id6"},{"post_id":"cldo5tc0x00an3suud7ubca8m","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1100b53suu7w18bkta"},{"post_id":"cldo5tc0y00aq3suu06w8fqvi","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1100b73suuf7m31pvy"},{"post_id":"cldo5tc0y00at3suu0jmdgvm8","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1100b93suuac9876mx"},{"post_id":"cldo5tc0z00aw3suu8712a29b","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1100bb3suu34xa7x0x"},{"post_id":"cldo5tc1000az3suu8ujua1ms","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1100bd3suufz7f8iq4"},{"post_id":"cldo5tc1000b23suucidv1to3","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldo5tc1100be3suu58wd26hb"},{"post_id":"cldqzftur0000dkuu3wtc6ubj","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldqzftux0002dkuu6nns3bb7"},{"post_id":"cldskvmj60000o0uu0v8rfif9","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldskvmjc0002o0uu5eg22wr2"},{"post_id":"cldtuh7r7000074uu5tr049ca","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldtuh7rg000274uu2pa5f92o"},{"post_id":"cldv3y0ns0000lsuu7ie9dxa9","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldv3y0nx0002lsuu4qyjejtf"},{"post_id":"cldwofnyu00002wuuayfhdbee","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldwofnz100022wuu843r3tt1"},{"post_id":"cldxyu0uc00002kuuf0x0bh7o","category_id":"cldo5tby400063suu0wvm10cy","_id":"cldxyu0ux00022kuugf8ffa7b"},{"post_id":"cle0z176l0000qsuu6ojj4mso","category_id":"cldo5tby400063suu0wvm10cy","_id":"cle0z176r0002qsuueambb1se"},{"post_id":"cle293iul0000eouuh5df6fau","category_id":"cldo5tby400063suu0wvm10cy","_id":"cle293iv00002eouub2ls79rh"},{"post_id":"cle46pgbh0000k4uu53rjbmvg","category_id":"cldo5tby400063suu0wvm10cy","_id":"cle46pgbp0002k4uu47nzc7xi"},{"post_id":"cle5887ay0000nwuu4au3afqy","category_id":"cldo5tby400063suu0wvm10cy","_id":"cle5887b40002nwuu0tz1bp6a"},{"post_id":"cle6kco4b000040uu8c9l9wjo","category_id":"cldo5tby400063suu0wvm10cy","_id":"cle6kco4h000240uu42c24nkg"},{"post_id":"cle7z9jr200005kuugyt9d3p0","category_id":"cldo5tby400063suu0wvm10cy","_id":"cle7z9jr800025kuu5umbc9wz"},{"post_id":"clebhrceb000030uuh0sl7hhd","category_id":"cldo5tby400063suu0wvm10cy","_id":"clebhrcel000230uu8z7z7c76"},{"post_id":"cleca3tgd000034uu4am8grq9","category_id":"cldo5tby400063suu0wvm10cy","_id":"cleca3tgi000234uu2xv82bnc"},{"post_id":"cledtm6480000kouuhfafhfvb","category_id":"cldo5tby400063suu0wvm10cy","_id":"cledtm64e0002kouu8qqpannz"},{"post_id":"cleftnyji0000rguuedni3l70","category_id":"cldo5tby400063suu0wvm10cy","_id":"cleftnyjp0002rguucfdi60zg"},{"post_id":"cleh2as60000028uu2tl6eita","category_id":"cldo5tby400063suu0wvm10cy","_id":"cleh2as66000228uu7tc80b0r"},{"post_id":"clei78ovs0000oouuhbni11xk","category_id":"cldo5tby400063suu0wvm10cy","_id":"clei78owe0002oouug4y0czp1"},{"post_id":"clel1irpl0000douu1my16g6x","category_id":"cldo5tby400063suu0wvm10cy","_id":"clel1irpr0002douu8fc31jkt"},{"post_id":"clemialgm0000l8uubrca66sf","category_id":"cldo5tby400063suu0wvm10cy","_id":"clemialgr0002l8uud6768x3d"},{"post_id":"clenv4poj0000sguu4dgqdx0y","category_id":"cldo5tby400063suu0wvm10cy","_id":"clenv4poo0002sguuhzbh0vf6"},{"post_id":"clepnigg000003guu2yd46pqf","category_id":"cldo5tby400063suu0wvm10cy","_id":"clepnigg700023guuaweqfo9g"},{"post_id":"cleqirse80000ccuu0hi04qo0","category_id":"cldo5tby400063suu0wvm10cy","_id":"cleqirsee0002ccuuf8p28k3p"},{"post_id":"cles4pd050000tsuu26np2y47","category_id":"cldo5tby400063suu0wvm10cy","_id":"cles4pd0g0002tsuu9l7xencb"},{"post_id":"clev69mxq00002suugj2sh175","category_id":"cldo5tby400063suu0wvm10cy","_id":"clev69mxw00022suu4ks7ffr7"},{"post_id":"clewfg4xy0000hguu03hu9035","category_id":"cldo5tby400063suu0wvm10cy","_id":"clewfg4y60002hguubduh3i13"},{"post_id":"clexpm09o0000kcuu4jq020j4","category_id":"cldo5tby400063suu0wvm10cy","_id":"clexpm0a00002kcuufd6le6g1"},{"post_id":"clezcgcur0000t0uuccj63y7e","category_id":"cldo5tby400063suu0wvm10cy","_id":"clezcgcux0002t0uu7v1mcyrx"},{"post_id":"clf25rekc00004suuh8x11fiy","category_id":"cldo5tby400063suu0wvm10cy","_id":"clf25rekh00024suu3dd92frr"},{"post_id":"clf5iyu400000ycuu8h6zcncl","category_id":"cldo5tby400063suu0wvm10cy","_id":"clf5iyu480002ycuu03qn00wv"},{"post_id":"clf6kvq7e0000nguu491b0zjf","category_id":"cldo5tby400063suu0wvm10cy","_id":"clf6kvq7l0002nguubw4m58m0"},{"post_id":"clf7v1tum0000nguu4gc97e1s","category_id":"cldo5tby400063suu0wvm10cy","_id":"clf7v1tur0002nguu45y7avfu"},{"post_id":"clf9aavn5000028uuhr8q9wyo","category_id":"cldo5tby400063suu0wvm10cy","_id":"clf9aavna000228uu9lte0fgb"},{"post_id":"clfarw3rp0000n4uu73yog309","category_id":"cldo5tby400063suu0wvm10cy","_id":"clfarw3rv0002n4uueqnv7gld"},{"post_id":"clfc420j4000048uua11q62op","category_id":"cldo5tby400063suu0wvm10cy","_id":"clfc420ja000248uufqek0abp"},{"post_id":"clff1cktz0000l8uu0ukn6vpc","category_id":"cldo5tby400063suu0wvm10cy","_id":"clff1cku40002l8uubeioevea"}],"PostTag":[{"post_id":"cldo5tby8000b3suu0swn3jpg","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyb000g3suuhpvggdxw"},{"post_id":"cldo5tby100033suu5ciufeli","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyc000i3suu5vmh8qs7"},{"post_id":"cldo5tby9000d3suuf2hybeto","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyd000n3suu0hygca9z"},{"post_id":"cldo5tbyb000h3suu8i7u95k1","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyf000q3suu1wuyaqmi"},{"post_id":"cldo5tby400053suu0l8ca3r0","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyg000t3suu7q4t7y0f"},{"post_id":"cldo5tbyc000j3suu3tqfaw7b","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyh000w3suug9sq9ool"},{"post_id":"cldo5tbyd000o3suufqzhhagq","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyh000z3suuh5dwgx3u"},{"post_id":"cldo5tby700093suu54py3nhi","tag_id":"cldo5tbyd000m3suuhc0m8j6i","_id":"cldo5tbyi00123suu55cm17vo"},{"post_id":"cldo5tbyf000r3suudr6w8fso","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyj00153suu7booh03o"},{"post_id":"cldo5tbyg000u3suu7npf2udi","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyj00183suuh5978kit"},{"post_id":"cldo5tbyh000x3suud1vrcv6s","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyk001b3suua5ee5zfb"},{"post_id":"cldo5tbyh00103suu95wbghol","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyl001e3suuc264hdra"},{"post_id":"cldo5tbyi00133suu054k8z2w","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbym001h3suucqjrfmhl"},{"post_id":"cldo5tbyj00163suu7qth5mcp","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbym001k3suuh7mp3str"},{"post_id":"cldo5tbyj00193suu1phk5rbx","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyn001n3suubptxhffw"},{"post_id":"cldo5tbyk001c3suucdveh082","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyn001q3suu5gzu8n0j"},{"post_id":"cldo5tbyl001f3suuf5v9c5u7","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyo001t3suuc1ei5e4f"},{"post_id":"cldo5tbym001i3suu5l5iaw7f","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyo001w3suudpv3410h"},{"post_id":"cldo5tbym001l3suu86857y55","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyp001z3suug2u9czoz"},{"post_id":"cldo5tbyn001o3suubequ8mbi","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyq00223suu9w1o7ahy"},{"post_id":"cldo5tbyn001r3suu02kch0sc","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyq00253suufdpy62qm"},{"post_id":"cldo5tbyo001u3suue4po54ua","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyr00283suu6eu39xug"},{"post_id":"cldo5tbyp001x3suu8exs6dd9","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyr002b3suu6ezbc124"},{"post_id":"cldo5tbyp00203suug7mz2elg","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbys002e3suuac125f8f"},{"post_id":"cldo5tbyq00233suucjdy4n8p","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyt002h3suu3g0n9ezn"},{"post_id":"cldo5tbyq00263suuc6rhazxt","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyt002k3suudwtw8ew6"},{"post_id":"cldo5tbyr00293suu9l4j008j","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyu002n3suufu7afcrt"},{"post_id":"cldo5tbyr002c3suufgkxh2h5","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyv002q3suu7fxn9pbl"},{"post_id":"cldo5tbys002f3suuefn42s0y","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbyw002t3suue6s8dymx"},{"post_id":"cldo5tbyt002i3suubyqwbrww","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbz0002w3suue7gl16bz"},{"post_id":"cldo5tbyt002l3suu3kawdce2","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbz3002z3suu0iv0en44"},{"post_id":"cldo5tbyu002o3suuexwa1qib","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbz500323suuaoveh7ty"},{"post_id":"cldo5tbyv002r3suua3mo0ubb","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbz700353suu3xsr2hyw"},{"post_id":"cldo5tbyw002u3suu09n6f2fo","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbz900383suu5mcr8tt4"},{"post_id":"cldo5tbz1002x3suu54e1geli","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbza003b3suuf00kg68q"},{"post_id":"cldo5tbz300303suu30w74e3h","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbze003e3suubnpwfju9"},{"post_id":"cldo5tbz600333suub1hq651t","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzf003h3suu1uyi07zs"},{"post_id":"cldo5tbz700363suu7itq11r8","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzg003k3suu1db9bpyl"},{"post_id":"cldo5tbz900393suu0v5vbgbi","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzh003n3suuhgjlfu7d"},{"post_id":"cldo5tbza003c3suubf61dhez","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzi003q3suu47dt718c"},{"post_id":"cldo5tbzf003f3suu0oyyg80t","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzi003t3suubtp9f9bd"},{"post_id":"cldo5tbzf003i3suu9z3174do","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzj003w3suu8ag4fgfe"},{"post_id":"cldo5tbzg003l3suudblq8s6d","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzk003z3suufdljcaat"},{"post_id":"cldo5tbzh003o3suu3q7p2386","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzk00423suueqrjcchm"},{"post_id":"cldo5tbzi003r3suubjtsg6yy","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzl00453suu65rxgpz2"},{"post_id":"cldo5tbzi003u3suud3qsb4br","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzm00483suu0w1q2dpv"},{"post_id":"cldo5tbzj003x3suu01pvc30d","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzn004b3suu6rnqeknw"},{"post_id":"cldo5tbzk00403suu3wb510ie","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzn004e3suug90ybwdd"},{"post_id":"cldo5tbzk00433suu4tb9edcw","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzo004h3suug1ldg1iq"},{"post_id":"cldo5tbzl00463suudeka8cle","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzp004k3suubi14e6dg"},{"post_id":"cldo5tbzm00493suu94uy8dnl","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzp004n3suu2s280d61"},{"post_id":"cldo5tbzn004c3suub2j3bnj1","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzq004q3suufbb6azmm"},{"post_id":"cldo5tbzo004f3suuht26eu9b","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzq004t3suu3h1dcr1g"},{"post_id":"cldo5tbzo004i3suud8062fbc","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzr004w3suufwwndfq1"},{"post_id":"cldo5tbzp004l3suu0qpx542i","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzr004z3suu2fbk2bsv"},{"post_id":"cldo5tbzp004o3suubq8b6eiq","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzs00523suug02sblfu"},{"post_id":"cldo5tbzq004r3suub4nm30ev","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzt00553suuhi0n29nu"},{"post_id":"cldo5tbzq004u3suu7pmsbrtr","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzu00583suualvq96mx"},{"post_id":"cldo5tbzr004x3suu07lg860h","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzu005b3suu15uk63ik"},{"post_id":"cldo5tbzr00503suu8vgt2k69","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzv005e3suue0kkancy"},{"post_id":"cldo5tbzs00533suu02sg88yz","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzv005h3suugq467f04"},{"post_id":"cldo5tbzt00563suudv6i1ypx","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzw005k3suue7kk9kok"},{"post_id":"cldo5tbzu00593suud21vamn1","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzx005n3suugsgf2yn4"},{"post_id":"cldo5tbzu005c3suu65rwd9px","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzx005q3suu72m5f56z"},{"post_id":"cldo5tbzv005f3suuawhe5l9j","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzy005t3suu25fld2ja"},{"post_id":"cldo5tbzv005i3suucxyv3mdc","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzy005w3suu2lqs7ibw"},{"post_id":"cldo5tbzw005l3suu06697rs9","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzz005z3suufxol14wd"},{"post_id":"cldo5tbzx005o3suucq7r2pq4","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tbzz00623suuaap57bxu"},{"post_id":"cldo5tbzx005r3suu8mn4do7j","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0000653suue947af3p"},{"post_id":"cldo5tbzy005u3suuezvmcsag","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0100683suu4bjn63pm"},{"post_id":"cldo5tbzy005x3suue048e37y","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc01006b3suu5u0r2te9"},{"post_id":"cldo5tbzz00603suufel76h0l","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc02006e3suu05p96898"},{"post_id":"cldo5tc0000633suu86jrf0op","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc02006h3suu8xijcdfu"},{"post_id":"cldo5tc0000663suuc3eh106h","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc03006k3suudosr675w"},{"post_id":"cldo5tc0100693suufm3peqyp","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc03006n3suu7y5v4401"},{"post_id":"cldo5tc01006c3suu4phfgn4z","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc04006q3suu5n6hh9pk"},{"post_id":"cldo5tc02006f3suudun5hwio","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc04006t3suuepsa4e4g"},{"post_id":"cldo5tc02006i3suuh0cc0ctn","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc05006w3suu7btjhcak"},{"post_id":"cldo5tc03006l3suu7nnr60tc","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc05006z3suu484i9r5i"},{"post_id":"cldo5tc03006o3suu2xhecd29","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0600723suu1pxq4fln"},{"post_id":"cldo5tc04006r3suud3ux0jh9","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0600753suu23bp5geh"},{"post_id":"cldo5tc04006u3suu1zbr2o1v","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0700783suu5p97c6qr"},{"post_id":"cldo5tc05006x3suu2ye7d5fy","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc07007b3suu69bf6tjr"},{"post_id":"cldo5tc0500703suu9f2v68pr","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc08007e3suu5kyx3c4g"},{"post_id":"cldo5tc0600733suu0s5ngk95","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc09007h3suuc3h980fy"},{"post_id":"cldo5tc0600763suuf9pxfh6x","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc09007k3suue4mm7toc"},{"post_id":"cldo5tc0700793suu8h1o0a8y","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0a007n3suu597k8k5f"},{"post_id":"cldo5tc08007c3suu18d85ah6","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0a007q3suudtwdcar8"},{"post_id":"cldo5tc08007f3suu8btpbhpk","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0b007t3suugpkkh2ur"},{"post_id":"cldo5tc09007i3suu1v1gf2rc","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0b007w3suu39p2e49e"},{"post_id":"cldo5tc09007l3suu61xvbw94","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0c007z3suu2bc0fk9s"},{"post_id":"cldo5tc0a007o3suuhsaw8dx0","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0d00823suu77y7dvsm"},{"post_id":"cldo5tc0a007r3suu5kn4aact","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0f00853suu91fy4xon"},{"post_id":"cldo5tc0b007u3suub14a41rv","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0g00883suu6v2wb15v"},{"post_id":"cldo5tc0b007x3suu6bqcfv3r","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0h008d3suu92dyhdzp"},{"post_id":"cldo5tc0c00803suuf0r08oy9","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0i008g3suug17m6wup"},{"post_id":"cldo5tc0d00833suu2dex2dvi","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0i008j3suugjq50feu"},{"post_id":"cldo5tc0g00893suu8cqj8sp6","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0j008m3suu81qcafbk"},{"post_id":"cldo5tc0h008e3suu5o4203yf","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0k008p3suu99xvg3sp"},{"post_id":"cldo5tc0i008h3suudj1i3wgv","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0k008s3suu8qcld2ph"},{"post_id":"cldo5tc0f00863suue2erhur0","tag_id":"cldo5tc0h008c3suua5hcgr7w","_id":"cldo5tc0l008v3suu2xe6avmv"},{"post_id":"cldo5tc0i008k3suu0sgsc027","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0l008y3suu94h9hq1e"},{"post_id":"cldo5tc0j008n3suu682c1rl6","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0m00913suug3teevhf"},{"post_id":"cldo5tc0k008q3suufzc2ei14","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0m00943suu349reh2b"},{"post_id":"cldo5tc0k008t3suu82xjbsfb","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0n00973suu8wm279ec"},{"post_id":"cldo5tc0l008w3suubqp173fu","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0n009a3suu7qv9en0o"},{"post_id":"cldo5tc0l008z3suuh0gv2dm3","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0o009d3suub2vsf3o2"},{"post_id":"cldo5tc0m00923suu8n23d1l0","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0o009g3suu4lyacx5y"},{"post_id":"cldo5tc0m00953suugol05d76","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0p009j3suueyhqa1za"},{"post_id":"cldo5tc0n00983suu2p9h4hdg","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0q009m3suu0cvgg8b4"},{"post_id":"cldo5tc0n009b3suuh53ff6w0","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0q009p3suu9rtq270k"},{"post_id":"cldo5tc0o009e3suuefp801cd","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0r009s3suugsyvcpm8"},{"post_id":"cldo5tc0o009h3suu4ed9d7vj","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0s009v3suuazpbhfgv"},{"post_id":"cldo5tc0p009k3suucgu02r53","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0s009y3suud7xa83hq"},{"post_id":"cldo5tc0q009n3suu67g08ih6","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0t00a13suugd2e6gy1"},{"post_id":"cldo5tc0q009q3suu2bcn26lc","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0u00a43suueqd2dtpa"},{"post_id":"cldo5tc0r009t3suu4lwifkvs","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0u00a73suu5wo54aps"},{"post_id":"cldo5tc0s009w3suu2y59c55p","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0v00aa3suu9nri0j4l"},{"post_id":"cldo5tc0s009z3suubpuqdbt0","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0v00ad3suugpak2zkj"},{"post_id":"cldo5tc0t00a23suug1pvhxik","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0w00ag3suu74qc70k2"},{"post_id":"cldo5tc0u00a53suufrhp2s01","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0x00aj3suufh6ianuc"},{"post_id":"cldo5tc0u00a83suub391ah69","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0x00am3suuctspfuui"},{"post_id":"cldo5tc0v00ab3suu7l4gavb3","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0y00ap3suu5zok7ait"},{"post_id":"cldo5tc0v00ae3suue7s749qm","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0y00as3suuc93napku"},{"post_id":"cldo5tc0w00ah3suu64ptgy7a","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc0z00av3suu9f3l1p0v"},{"post_id":"cldo5tc0x00ak3suu98zaedue","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc1000ay3suu1yh1g35m"},{"post_id":"cldo5tc0x00an3suud7ubca8m","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc1000b13suu7susd48s"},{"post_id":"cldo5tc0y00aq3suu06w8fqvi","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc1100b43suuc581eu9u"},{"post_id":"cldo5tc0y00at3suu0jmdgvm8","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc1100b63suuccmce7it"},{"post_id":"cldo5tc0z00aw3suu8712a29b","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc1100b83suual4i8xju"},{"post_id":"cldo5tc1000az3suu8ujua1ms","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc1100ba3suuf9wgbbt6"},{"post_id":"cldo5tc1000b23suucidv1to3","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldo5tc1100bc3suucyv56gms"},{"post_id":"cldqzftur0000dkuu3wtc6ubj","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldqzftuw0001dkuu25u1234u"},{"post_id":"cldskvmj60000o0uu0v8rfif9","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldskvmjc0001o0uu1zap5gqr"},{"post_id":"cldtuh7r7000074uu5tr049ca","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldtuh7rf000174uu1aqdgyp0"},{"post_id":"cldv3y0ns0000lsuu7ie9dxa9","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldv3y0nx0001lsuu8ui7fwam"},{"post_id":"cldwofnyu00002wuuayfhdbee","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldwofnz000012wuu4ietco4a"},{"post_id":"cldxyu0uc00002kuuf0x0bh7o","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cldxyu0uw00012kuu86b73eig"},{"post_id":"cle0z176l0000qsuu6ojj4mso","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cle0z176q0001qsuu00vodeuc"},{"post_id":"cle293iul0000eouuh5df6fau","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cle293iuz0001eouuc6ibaekl"},{"post_id":"cle46pgbh0000k4uu53rjbmvg","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cle46pgbo0001k4uu10fffqq8"},{"post_id":"cle5887ay0000nwuu4au3afqy","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cle5887b40001nwuu1hyh0uz3"},{"post_id":"cle6kco4b000040uu8c9l9wjo","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cle6kco4g000140uubqch29ht"},{"post_id":"cle7z9jr200005kuugyt9d3p0","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cle7z9jr700015kuubtcl6nwy"},{"post_id":"clebhrceb000030uuh0sl7hhd","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clebhrcek000130uugkxv9rq0"},{"post_id":"cleca3tgd000034uu4am8grq9","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cleca3tgi000134uufpsbdvsw"},{"post_id":"cledtm6480000kouuhfafhfvb","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cledtm64e0001kouufh8sbuuq"},{"post_id":"cleftnyji0000rguuedni3l70","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cleftnyjp0001rguu2w774aud"},{"post_id":"cleh2as60000028uu2tl6eita","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cleh2as65000128uug8o32xi3"},{"post_id":"clei78ovs0000oouuhbni11xk","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clei78owd0001oouu6awneibo"},{"post_id":"clel1irpl0000douu1my16g6x","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clel1irpq0001douub61e41gn"},{"post_id":"clemialgm0000l8uubrca66sf","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clemialgr0001l8uucih73v9p"},{"post_id":"clenv4poj0000sguu4dgqdx0y","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clenv4poo0001sguu6sapho3a"},{"post_id":"clepnigg000003guu2yd46pqf","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clepnigg600013guu74sc25s3"},{"post_id":"cleqirse80000ccuu0hi04qo0","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cleqirsed0001ccuu7y1ygy41"},{"post_id":"cles4pd050000tsuu26np2y47","tag_id":"cldo5tby600073suu9r2a51ji","_id":"cles4pd0g0001tsuuffp29gy6"},{"post_id":"clev69mxq00002suugj2sh175","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clev69mxw00012suuf9vsevlj"},{"post_id":"clewfg4xy0000hguu03hu9035","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clewfg4y60001hguuchc48a67"},{"post_id":"clexpm09o0000kcuu4jq020j4","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clexpm0a00001kcuu3bb3hvk8"},{"post_id":"clezcgcur0000t0uuccj63y7e","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clezcgcux0001t0uu6fqmcy56"},{"post_id":"clf25rekc00004suuh8x11fiy","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clf25rekh00014suuhhat6beh"},{"post_id":"clf5iyu400000ycuu8h6zcncl","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clf5iyu470001ycuu82ptc93q"},{"post_id":"clf6kvq7e0000nguu491b0zjf","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clf6kvq7k0001nguu9dw8fage"},{"post_id":"clf7v1tum0000nguu4gc97e1s","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clf7v1tur0001nguu7l845taj"},{"post_id":"clf9aavn5000028uuhr8q9wyo","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clf9aavna000128uueh35b77m"},{"post_id":"clfarw3rp0000n4uu73yog309","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clfarw3ru0001n4uue3cxgffj"},{"post_id":"clfc420j4000048uua11q62op","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clfc420ja000148uu6xc854f3"},{"post_id":"clff1cktz0000l8uu0ukn6vpc","tag_id":"cldo5tby600073suu9r2a51ji","_id":"clff1cku40001l8uu8wlehxo2"}],"Tag":[{"name":"leetcode","_id":"cldo5tby600073suu9r2a51ji"},{"name":"kylin","_id":"cldo5tbyd000m3suuhc0m8j6i"},{"name":"其他","_id":"cldo5tc0h008c3suua5hcgr7w"}]}}